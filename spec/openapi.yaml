openapi: 3.0.0
info:
  title: SnideMind - OpenAI Compatible API
  description: This API is compatible with OpenAI's API, allowing you to build applications that can interact with OpenAI's models and services.
  version: 1.0.0
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
# servers:
#   - url: https://localhost:3000
# security:
#   - ApiKeyAuth: []
tags:
  - name: Assistants
    description: Build Assistants that can call models and use tools.
  - name: Audio
    description: Turn audio into text or text into audio.
  - name: Chat
    description: Given a list of messages comprising a conversation, the model will
      return a response.
  - name: Completions
    description: Given a prompt, the model will return one or more predicted
      completions, and can also return the probabilities of alternative tokens
      at each position.
  - name: Embeddings
    description: Get a vector representation of a given input that can be easily
      consumed by machine learning models and algorithms.
  - name: Evals
    description: Manage and run evals in the OpenAI platform.
  - name: Fine-tuning
    description: Manage fine-tuning jobs to tailor a model to your specific training data.
  - name: Batch
    description: Create large batches of API requests to run asynchronously.
  - name: Files
    description: Files are used to upload documents that can be used with features
      like Assistants and Fine-tuning.
  - name: Uploads
    description: Use Uploads to upload large files in multiple parts.
  - name: Images
    description: Given a prompt and/or an input image, the model will generate a new image.
  - name: Models
    description: List and describe the various models available in the API.
  - name: Moderations
    description: Given text and/or image inputs, classifies if those inputs are
      potentially harmful.
  - name: Audit Logs
    description: List user actions and configuration changes within this organization.
paths:
  /v1/chat/completions:
    get:
      operationId: listChatCompletions
      tags:
        - Chat
      summary: >
        List stored Chat Completions. Only Chat Completions that have been
        stored with the `store` parameter set to `true` will be returned.
      parameters:
        - name: model
          in: query
          description: The model used to generate the Chat Completions.
          required: false
          schema:
            type: string
        - name: metadata
          in: query
          description: |
            A list of metadata keys to filter the Chat Completions by. Example:

            `metadata[key1]=value1&metadata[key2]=value2`
          required: false
          schema:
            $ref: "#/components/schemas/Metadata"
        - name: after
          in: query
          description: Identifier for the last chat completion from the previous
            pagination request.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of Chat Completions to retrieve.
          required: false
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: Sort order for Chat Completions by timestamp. Use `asc` for
            ascending order or `desc` for descending order. Defaults to `asc`.
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        "200":
          description: A list of Chat Completions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatCompletionList"
      x-oaiMeta:
        name: List Chat Completions
        group: chat
        returns: A list of [Chat Completions](/docs/api-reference/chat/list-object)
          matching the specified filters.
        path: list
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json"
            python: |
              from openai import OpenAI
              client = OpenAI()

              completions = client.chat.completions.list()
              print(completions)
          response: >
            {
              "object": "list",
              "data": [
                {
                  "object": "chat.completion",
                  "id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
                  "model": "gpt-4.1-2025-04-14",
                  "created": 1738960610,
                  "request_id": "req_ded8ab984ec4bf840f37566c1011c417",
                  "tool_choice": null,
                  "usage": {
                    "total_tokens": 31,
                    "completion_tokens": 18,
                    "prompt_tokens": 13
                  },
                  "seed": 4944116822809979520,
                  "top_p": 1.0,
                  "temperature": 1.0,
                  "presence_penalty": 0.0,
                  "frequency_penalty": 0.0,
                  "system_fingerprint": "fp_50cad350e4",
                  "input_user": null,
                  "service_tier": "default",
                  "tools": null,
                  "metadata": {},
                  "choices": [
                    {
                      "index": 0,
                      "message": {
                        "content": "Mind of circuits hum,  \nLearning patterns in silenceâ€”  \nFuture's quiet spark.",
                        "role": "assistant",
                        "tool_calls": null,
                        "function_call": null
                      },
                      "finish_reason": "stop",
                      "logprobs": null
                    }
                  ],
                  "response_format": null
                }
              ],
              "first_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
              "last_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
              "has_more": false
            }
    post:
      operationId: createChatCompletion
      tags:
        - Chat
      summary: |
        **Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses) 
        to take advantage of the latest OpenAI platform features. Compare
        [Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).

        ---

        Creates a model response for the given chat conversation. Learn more in the
        [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
        and [audio](/docs/guides/audio) guides.

        Parameter support can differ depending on the model used to generate the
        response, particularly for newer reasoning models. Parameters that are only
        supported for reasoning models are noted below. For the current state of 
        unsupported parameters in reasoning models, 
        [refer to the reasoning guide](/docs/guides/reasoning).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChatCompletionRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateChatCompletionResponse"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/CreateChatCompletionStreamResponse"
      x-oaiMeta:
        name: Create chat completion
        group: chat
        returns: >
          Returns a [chat completion](/docs/api-reference/chat/object) object,
          or a streamed sequence of [chat completion
          chunk](/docs/api-reference/chat/streaming) objects if the request is
          streamed.
        path: create
        examples:
          - title: Default
            request:
              curl: |
                curl https://api.openai.com/v1/chat/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "VAR_chat_model_id",
                    "messages": [
                      {
                        "role": "developer",
                        "content": "You are a helpful assistant."
                      },
                      {
                        "role": "user",
                        "content": "Hello!"
                      }
                    ]
                  }'
              python: >
                from openai import OpenAI

                client = OpenAI()


                completion = client.chat.completions.create(
                  model="VAR_chat_model_id",
                  messages=[
                    {"role": "developer", "content": "You are a helpful assistant."},
                    {"role": "user", "content": "Hello!"}
                  ]
                )


                print(completion.choices[0].message)
              node.js: >
                import OpenAI from "openai";


                const openai = new OpenAI();


                async function main() {
                  const completion = await openai.chat.completions.create({
                    messages: [{ role: "developer", content: "You are a helpful assistant." }],
                    model: "VAR_chat_model_id",
                    store: true,
                  });

                  console.log(completion.choices[0]);
                }


                main();
              csharp: |
                using System;
                using System.Collections.Generic;

                using OpenAI.Chat;

                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                List<ChatMessage> messages =
                [
                    new SystemChatMessage("You are a helpful assistant."),
                    new UserChatMessage("Hello!")
                ];

                ChatCompletion completion = client.CompleteChat(messages);

                Console.WriteLine(completion.Content[0].Text);
            response: |
              {
                "id": "chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT",
                "object": "chat.completion",
                "created": 1741569952,
                "model": "gpt-4.1-2025-04-14",
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "role": "assistant",
                      "content": "Hello! How can I assist you today?",
                      "refusal": null,
                      "annotations": []
                    },
                    "logprobs": null,
                    "finish_reason": "stop"
                  }
                ],
                "usage": {
                  "prompt_tokens": 19,
                  "completion_tokens": 10,
                  "total_tokens": 29,
                  "prompt_tokens_details": {
                    "cached_tokens": 0,
                    "audio_tokens": 0
                  },
                  "completion_tokens_details": {
                    "reasoning_tokens": 0,
                    "audio_tokens": 0,
                    "accepted_prediction_tokens": 0,
                    "rejected_prediction_tokens": 0
                  }
                },
                "service_tier": "default"
              }
          - title: Image input
            request:
              curl: >
                curl https://api.openai.com/v1/chat/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "messages": [
                      {
                        "role": "user",
                        "content": [
                          {
                            "type": "text",
                            "text": "What is in this image?"
                          },
                          {
                            "type": "image_url",
                            "image_url": {
                              "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                            }
                          }
                        ]
                      }
                    ],
                    "max_tokens": 300
                  }'
              python: >
                from openai import OpenAI


                client = OpenAI()


                response = client.chat.completions.create(
                    model="gpt-4.1",
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": "What's in this image?"},
                                {
                                    "type": "image_url",
                                    "image_url": {
                                        "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                    }
                                },
                            ],
                        }
                    ],
                    max_tokens=300,
                )


                print(response.choices[0])
              node.js: >
                import OpenAI from "openai";


                const openai = new OpenAI();


                async function main() {
                  const response = await openai.chat.completions.create({
                    model: "gpt-4.1",
                    messages: [
                      {
                        role: "user",
                        content: [
                          { type: "text", text: "What's in this image?" },
                          {
                            type: "image_url",
                            image_url: {
                              "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                            },
                          }
                        ],
                      },
                    ],
                  });
                  console.log(response.choices[0]);
                }

                main();
              csharp: >
                using System;

                using System.Collections.Generic;


                using OpenAI.Chat;


                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );


                List<ChatMessage> messages =

                [
                    new UserChatMessage(
                    [
                        ChatMessageContentPart.CreateTextPart("What's in this image?"),
                        ChatMessageContentPart.CreateImagePart(new Uri("https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"))
                    ])
                ];


                ChatCompletion completion = client.CompleteChat(messages);


                Console.WriteLine(completion.Content[0].Text);
            response: >
              {
                "id": "chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG",
                "object": "chat.completion",
                "created": 1741570283,
                "model": "gpt-4.1-2025-04-14",
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "role": "assistant",
                      "content": "The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.",
                      "refusal": null,
                      "annotations": []
                    },
                    "logprobs": null,
                    "finish_reason": "stop"
                  }
                ],
                "usage": {
                  "prompt_tokens": 1117,
                  "completion_tokens": 46,
                  "total_tokens": 1163,
                  "prompt_tokens_details": {
                    "cached_tokens": 0,
                    "audio_tokens": 0
                  },
                  "completion_tokens_details": {
                    "reasoning_tokens": 0,
                    "audio_tokens": 0,
                    "accepted_prediction_tokens": 0,
                    "rejected_prediction_tokens": 0
                  }
                },
                "service_tier": "default"
              }
          - title: Streaming
            request:
              curl: |
                curl https://api.openai.com/v1/chat/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "VAR_chat_model_id",
                    "messages": [
                      {
                        "role": "developer",
                        "content": "You are a helpful assistant."
                      },
                      {
                        "role": "user",
                        "content": "Hello!"
                      }
                    ],
                    "stream": true
                  }'
              python: >
                from openai import OpenAI

                client = OpenAI()


                completion = client.chat.completions.create(
                  model="VAR_chat_model_id",
                  messages=[
                    {"role": "developer", "content": "You are a helpful assistant."},
                    {"role": "user", "content": "Hello!"}
                  ],
                  stream=True
                )


                for chunk in completion:
                  print(chunk.choices[0].delta)
              node.js: >
                import OpenAI from "openai";


                const openai = new OpenAI();


                async function main() {
                  const completion = await openai.chat.completions.create({
                    model: "VAR_chat_model_id",
                    messages: [
                      {"role": "developer", "content": "You are a helpful assistant."},
                      {"role": "user", "content": "Hello!"}
                    ],
                    stream: true,
                  });

                  for await (const chunk of completion) {
                    console.log(chunk.choices[0].delta.content);
                  }
                }


                main();
              csharp: >
                using System;

                using System.ClientModel;

                using System.Collections.Generic;

                using System.Threading.Tasks;


                using OpenAI.Chat;


                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );


                List<ChatMessage> messages =

                [
                    new SystemChatMessage("You are a helpful assistant."),
                    new UserChatMessage("Hello!")
                ];


                AsyncCollectionResult<StreamingChatCompletionUpdate>
                completionUpdates = client.CompleteChatStreamingAsync(messages);


                await foreach (StreamingChatCompletionUpdate completionUpdate in
                completionUpdates)

                {
                    if (completionUpdate.ContentUpdate.Count > 0)
                    {
                        Console.Write(completionUpdate.ContentUpdate[0].Text);
                    }
                }
            response: |
              {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

              {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

              ....

              {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
          - title: Functions
            request:
              curl: >
                curl https://api.openai.com/v1/chat/completions \

                -H "Content-Type: application/json" \

                -H "Authorization: Bearer $OPENAI_API_KEY" \

                -d '{
                  "model": "gpt-4.1",
                  "messages": [
                    {
                      "role": "user",
                      "content": "What is the weather like in Boston today?"
                    }
                  ],
                  "tools": [
                    {
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                              "type": "string",
                              "enum": ["celsius", "fahrenheit"]
                            }
                          },
                          "required": ["location"]
                        }
                      }
                    }
                  ],
                  "tool_choice": "auto"
                }'
              python: >
                from openai import OpenAI

                client = OpenAI()


                tools = [
                  {
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "description": "Get the current weather in a given location",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "string",
                            "description": "The city and state, e.g. San Francisco, CA",
                          },
                          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                        },
                        "required": ["location"],
                      },
                    }
                  }
                ]

                messages = [{"role": "user", "content": "What's the weather like
                in Boston today?"}]

                completion = client.chat.completions.create(
                  model="VAR_chat_model_id",
                  messages=messages,
                  tools=tools,
                  tool_choice="auto"
                )


                print(completion)
              node.js: >
                import OpenAI from "openai";


                const openai = new OpenAI();


                async function main() {
                  const messages = [{"role": "user", "content": "What's the weather like in Boston today?"}];
                  const tools = [
                      {
                        "type": "function",
                        "function": {
                          "name": "get_current_weather",
                          "description": "Get the current weather in a given location",
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "location": {
                                "type": "string",
                                "description": "The city and state, e.g. San Francisco, CA",
                              },
                              "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                            },
                            "required": ["location"],
                          },
                        }
                      }
                  ];

                  const response = await openai.chat.completions.create({
                    model: "gpt-4.1",
                    messages: messages,
                    tools: tools,
                    tool_choice: "auto",
                  });

                  console.log(response);
                }


                main();
              csharp: >
                using System;

                using System.Collections.Generic;


                using OpenAI.Chat;


                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );


                ChatTool getCurrentWeatherTool = ChatTool.CreateFunctionTool(
                    functionName: "get_current_weather",
                    functionDescription: "Get the current weather in a given location",
                    functionParameters: BinaryData.FromString("""
                        {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "description": "The city and state, e.g. San Francisco, CA"
                                },
                                "unit": {
                                    "type": "string",
                                    "enum": [ "celsius", "fahrenheit" ]
                                }
                            },
                            "required": [ "location" ]
                        }
                    """)
                );


                List<ChatMessage> messages =

                [
                    new UserChatMessage("What's the weather like in Boston today?"),
                ];


                ChatCompletionOptions options = new()

                {
                    Tools =
                    {
                        getCurrentWeatherTool
                    },
                    ToolChoice = ChatToolChoice.CreateAutoChoice(),
                };


                ChatCompletion completion = client.CompleteChat(messages,
                options);
            response: |
              {
                "id": "chatcmpl-abc123",
                "object": "chat.completion",
                "created": 1699896916,
                "model": "gpt-4o-mini",
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "role": "assistant",
                      "content": null,
                      "tool_calls": [
                        {
                          "id": "call_abc123",
                          "type": "function",
                          "function": {
                            "name": "get_current_weather",
                            "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                          }
                        }
                      ]
                    },
                    "logprobs": null,
                    "finish_reason": "tool_calls"
                  }
                ],
                "usage": {
                  "prompt_tokens": 82,
                  "completion_tokens": 17,
                  "total_tokens": 99,
                  "completion_tokens_details": {
                    "reasoning_tokens": 0,
                    "accepted_prediction_tokens": 0,
                    "rejected_prediction_tokens": 0
                  }
                }
              }
          - title: Logprobs
            request:
              curl: |
                curl https://api.openai.com/v1/chat/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "VAR_chat_model_id",
                    "messages": [
                      {
                        "role": "user",
                        "content": "Hello!"
                      }
                    ],
                    "logprobs": true,
                    "top_logprobs": 2
                  }'
              python: |
                from openai import OpenAI
                client = OpenAI()

                completion = client.chat.completions.create(
                  model="VAR_chat_model_id",
                  messages=[
                    {"role": "user", "content": "Hello!"}
                  ],
                  logprobs=True,
                  top_logprobs=2
                )

                print(completion.choices[0].message)
                print(completion.choices[0].logprobs)
              node.js: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                async function main() {
                  const completion = await openai.chat.completions.create({
                    messages: [{ role: "user", content: "Hello!" }],
                    model: "VAR_chat_model_id",
                    logprobs: true,
                    top_logprobs: 2,
                  });

                  console.log(completion.choices[0]);
                }

                main();
              csharp: >
                using System;

                using System.Collections.Generic;


                using OpenAI.Chat;


                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );


                List<ChatMessage> messages =

                [
                    new UserChatMessage("Hello!")
                ];


                ChatCompletionOptions options = new()

                {
                    IncludeLogProbabilities = true,
                    TopLogProbabilityCount = 2
                };


                ChatCompletion completion = client.CompleteChat(messages,
                options);


                Console.WriteLine(completion.Content[0].Text);
            response: |
              {
                "id": "chatcmpl-123",
                "object": "chat.completion",
                "created": 1702685778,
                "model": "gpt-4o-mini",
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "role": "assistant",
                      "content": "Hello! How can I assist you today?"
                    },
                    "logprobs": {
                      "content": [
                        {
                          "token": "Hello",
                          "logprob": -0.31725305,
                          "bytes": [72, 101, 108, 108, 111],
                          "top_logprobs": [
                            {
                              "token": "Hello",
                              "logprob": -0.31725305,
                              "bytes": [72, 101, 108, 108, 111]
                            },
                            {
                              "token": "Hi",
                              "logprob": -1.3190403,
                              "bytes": [72, 105]
                            }
                          ]
                        },
                        {
                          "token": "!",
                          "logprob": -0.02380986,
                          "bytes": [
                            33
                          ],
                          "top_logprobs": [
                            {
                              "token": "!",
                              "logprob": -0.02380986,
                              "bytes": [33]
                            },
                            {
                              "token": " there",
                              "logprob": -3.787621,
                              "bytes": [32, 116, 104, 101, 114, 101]
                            }
                          ]
                        },
                        {
                          "token": " How",
                          "logprob": -0.000054669687,
                          "bytes": [32, 72, 111, 119],
                          "top_logprobs": [
                            {
                              "token": " How",
                              "logprob": -0.000054669687,
                              "bytes": [32, 72, 111, 119]
                            },
                            {
                              "token": "<|end|>",
                              "logprob": -10.953937,
                              "bytes": null
                            }
                          ]
                        },
                        {
                          "token": " can",
                          "logprob": -0.015801601,
                          "bytes": [32, 99, 97, 110],
                          "top_logprobs": [
                            {
                              "token": " can",
                              "logprob": -0.015801601,
                              "bytes": [32, 99, 97, 110]
                            },
                            {
                              "token": " may",
                              "logprob": -4.161023,
                              "bytes": [32, 109, 97, 121]
                            }
                          ]
                        },
                        {
                          "token": " I",
                          "logprob": -3.7697225e-6,
                          "bytes": [
                            32,
                            73
                          ],
                          "top_logprobs": [
                            {
                              "token": " I",
                              "logprob": -3.7697225e-6,
                              "bytes": [32, 73]
                            },
                            {
                              "token": " assist",
                              "logprob": -13.596657,
                              "bytes": [32, 97, 115, 115, 105, 115, 116]
                            }
                          ]
                        },
                        {
                          "token": " assist",
                          "logprob": -0.04571125,
                          "bytes": [32, 97, 115, 115, 105, 115, 116],
                          "top_logprobs": [
                            {
                              "token": " assist",
                              "logprob": -0.04571125,
                              "bytes": [32, 97, 115, 115, 105, 115, 116]
                            },
                            {
                              "token": " help",
                              "logprob": -3.1089056,
                              "bytes": [32, 104, 101, 108, 112]
                            }
                          ]
                        },
                        {
                          "token": " you",
                          "logprob": -5.4385737e-6,
                          "bytes": [32, 121, 111, 117],
                          "top_logprobs": [
                            {
                              "token": " you",
                              "logprob": -5.4385737e-6,
                              "bytes": [32, 121, 111, 117]
                            },
                            {
                              "token": " today",
                              "logprob": -12.807695,
                              "bytes": [32, 116, 111, 100, 97, 121]
                            }
                          ]
                        },
                        {
                          "token": " today",
                          "logprob": -0.0040071653,
                          "bytes": [32, 116, 111, 100, 97, 121],
                          "top_logprobs": [
                            {
                              "token": " today",
                              "logprob": -0.0040071653,
                              "bytes": [32, 116, 111, 100, 97, 121]
                            },
                            {
                              "token": "?",
                              "logprob": -5.5247097,
                              "bytes": [63]
                            }
                          ]
                        },
                        {
                          "token": "?",
                          "logprob": -0.0008108172,
                          "bytes": [63],
                          "top_logprobs": [
                            {
                              "token": "?",
                              "logprob": -0.0008108172,
                              "bytes": [63]
                            },
                            {
                              "token": "?\n",
                              "logprob": -7.184561,
                              "bytes": [63, 10]
                            }
                          ]
                        }
                      ]
                    },
                    "finish_reason": "stop"
                  }
                ],
                "usage": {
                  "prompt_tokens": 9,
                  "completion_tokens": 9,
                  "total_tokens": 18,
                  "completion_tokens_details": {
                    "reasoning_tokens": 0,
                    "accepted_prediction_tokens": 0,
                    "rejected_prediction_tokens": 0
                  }
                },
                "system_fingerprint": null
              }
  /v1/models:
    get:
      operationId: listModels
      tags:
        - Models
      summary: Lists the currently available models, and provides basic information
        about each one such as the owner and availability.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListModelsResponse"
      x-oaiMeta:
        name: List models
        group: models
        returns: A list of [model](/docs/api-reference/models/object) objects.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/models \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.models.list()
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const list = await openai.models.list();

                for await (const model of list) {
                  console.log(model);
                }
              }
              main();
            csharp: |
              using System;

              using OpenAI.Models;

              OpenAIModelClient client = new(
                  apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
              );

              foreach (var model in client.GetModels().Value)
              {
                  Console.WriteLine(model.Id);
              }
          response: |
            {
              "object": "list",
              "data": [
                {
                  "id": "model-id-0",
                  "object": "model",
                  "created": 1686935002,
                  "owned_by": "organization-owner"
                },
                {
                  "id": "model-id-1",
                  "object": "model",
                  "created": 1686935002,
                  "owned_by": "organization-owner",
                },
                {
                  "id": "model-id-2",
                  "object": "model",
                  "created": 1686935002,
                  "owned_by": "openai"
                },
              ],
              "object": "list"
            }
  /v1/models/{model}:
    get:
      operationId: retrieveModel
      tags:
        - Models
      summary: Retrieves a model instance, providing basic information about the model
        such as the owner and permissioning.
      parameters:
        - in: path
          name: model
          required: true
          schema:
            type: string
            example: gpt-4o-mini
          description: The ID of the model to use for this request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
      x-oaiMeta:
        name: Retrieve model
        group: models
        returns: The [model](/docs/api-reference/models/object) object matching the
          specified ID.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/models/VAR_chat_model_id \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.models.retrieve("VAR_chat_model_id")
            node.js: |-
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const model = await openai.models.retrieve("VAR_chat_model_id");

                console.log(model);
              }

              main();
            csharp: |
              using System;
              using System.ClientModel;

              using OpenAI.Models;

                OpenAIModelClient client = new(
                  apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
              );

              ClientResult<OpenAIModel> model = client.GetModel("babbage-002");
              Console.WriteLine(model.Value.Id);
          response: |
            {
              "id": "VAR_chat_model_id",
              "object": "model",
              "created": 1686935002,
              "owned_by": "openai"
            }
    delete:
      operationId: deleteModel
      tags:
        - Models
      summary: Delete a fine-tuned model. You must have the Owner role in your
        organization to delete a model.
      parameters:
        - in: path
          name: model
          required: true
          schema:
            type: string
            example: ft:gpt-4o-mini:acemeco:suffix:abc123
          description: The model to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteModelResponse"
      x-oaiMeta:
        name: Delete a fine-tuned model
        group: models
        returns: Deletion status.
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/models/ft:gpt-4o-mini:acemeco:suffix:abc123 \
                -X DELETE \
                -H "Authorization: Bearer $OPENAI_API_KEY"
            python: |
              from openai import OpenAI
              client = OpenAI()

              client.models.delete("ft:gpt-4o-mini:acemeco:suffix:abc123")
            node.js: >-
              import OpenAI from "openai";


              const openai = new OpenAI();


              async function main() {
                const model = await openai.models.del("ft:gpt-4o-mini:acemeco:suffix:abc123");

                console.log(model);
              }

              main();
            csharp: >
              using System;

              using System.ClientModel;


              using OpenAI.Models;


              OpenAIModelClient client = new(
                  apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
              );


              ClientResult success =
              client.DeleteModel("ft:gpt-4o-mini:acemeco:suffix:abc123");

              Console.WriteLine(success);
          response: |
            {
              "id": "ft:gpt-4o-mini:acemeco:suffix:abc123",
              "object": "model",
              "deleted": true
            }
components:
  schemas:
    AddUploadPartRequest:
      type: object
      additionalProperties: false
      properties:
        data:
          description: |
            The chunk of bytes for this Part.
          type: string
          format: binary
      required:
        - data
    AdminApiKey:
      type: object
      description: Represents an individual Admin API key in an org.
      properties:
        object:
          type: string
          example: organization.admin_api_key
          description: The object type, which is always `organization.admin_api_key`
          x-stainless-const: true
        id:
          type: string
          example: key_abc
          description: The identifier, which can be referenced in API endpoints
        name:
          type: string
          example: Administration Key
          description: The name of the API key
        redacted_value:
          type: string
          example: sk-admin...def
          description: The redacted value of the API key
        value:
          type: string
          example: sk-admin-1234abcd
          description: The value of the API key. Only shown on create.
        created_at:
          type: integer
          format: int64
          example: 1711471533
          description: The Unix timestamp (in seconds) of when the API key was created
        last_used_at:
          type: integer
          format: int64
          nullable: true
          example: 1711471534
          description: The Unix timestamp (in seconds) of when the API key was last used
        owner:
          type: object
          properties:
            type:
              type: string
              example: user
              description: Always `user`
            object:
              type: string
              example: organization.user
              description: The object type, which is always organization.user
            id:
              type: string
              example: sa_456
              description: The identifier, which can be referenced in API endpoints
            name:
              type: string
              example: My Service Account
              description: The name of the user
            created_at:
              type: integer
              format: int64
              example: 1711471533
              description: The Unix timestamp (in seconds) of when the user was created
            role:
              type: string
              example: owner
              description: Always `owner`
      required:
        - object
        - redacted_value
        - name
        - created_at
        - last_used_at
        - id
        - owner
      x-oaiMeta:
        name: The admin API key object
        example: |
          {
            "object": "organization.admin_api_key",
            "id": "key_abc",
            "name": "Main Admin Key",
            "redacted_value": "sk-admin...xyz",
            "created_at": 1711471533,
            "last_used_at": 1711471534,
            "owner": {
              "type": "user",
              "object": "organization.user",
              "id": "user_123",
              "name": "John Doe",
              "created_at": 1711471533,
              "role": "owner"
            }
          }
    ApiKeyList:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/AdminApiKey"
        has_more:
          type: boolean
          example: false
        first_id:
          type: string
          example: key_abc
        last_id:
          type: string
          example: key_xyz
    ChatCompletionDeleted:
      type: object
      properties:
        object:
          type: string
          description: The type of object being deleted.
          enum:
            - chat.completion.deleted
          x-stainless-const: true
        id:
          type: string
          description: The ID of the chat completion that was deleted.
        deleted:
          type: boolean
          description: Whether the chat completion was deleted.
      required:
        - object
        - id
        - deleted
    ChatCompletionFunctionCallOption:
      type: object
      description: >
        Specifying a particular function via `{"name": "my_function"}` forces
        the model to call that function.
      properties:
        name:
          type: string
          description: The name of the function to call.
      required:
        - name
    ChatCompletionFunctions:
      type: object
      deprecated: true
      properties:
        description:
          type: string
          description: A description of what the function does, used by the model to
            choose when and how to call the function.
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or
            contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: "#/components/schemas/FunctionParameters"
      required:
        - name
    ChatCompletionList:
      type: object
      title: ChatCompletionList
      description: |
        An object representing a list of Chat Completions.
      properties:
        object:
          type: string
          enum:
            - list
          default: list
          description: |
            The type of this object. It is always set to "list".
          x-stainless-const: true
        data:
          type: array
          description: |
            An array of chat completion objects.
          items:
            $ref: "#/components/schemas/CreateChatCompletionResponse"
        first_id:
          type: string
          description: The identifier of the first chat completion in the data array.
        last_id:
          type: string
          description: The identifier of the last chat completion in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more Chat Completions available.
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      x-oaiMeta:
        name: The chat completion list object
        group: chat
        example: >
          {
            "object": "list",
            "data": [
              {
                "object": "chat.completion",
                "id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
                "model": "gpt-4o-2024-08-06",
                "created": 1738960610,
                "request_id": "req_ded8ab984ec4bf840f37566c1011c417",
                "tool_choice": null,
                "usage": {
                  "total_tokens": 31,
                  "completion_tokens": 18,
                  "prompt_tokens": 13
                },
                "seed": 4944116822809979520,
                "top_p": 1.0,
                "temperature": 1.0,
                "presence_penalty": 0.0,
                "frequency_penalty": 0.0,
                "system_fingerprint": "fp_50cad350e4",
                "input_user": null,
                "service_tier": "default",
                "tools": null,
                "metadata": {},
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "content": "Mind of circuits hum,  \nLearning patterns in silenceâ€”  \nFuture's quiet spark.",
                      "role": "assistant",
                      "tool_calls": null,
                      "function_call": null
                    },
                    "finish_reason": "stop",
                    "logprobs": null
                  }
                ],
                "response_format": null
              }
            ],
            "first_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
            "last_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
            "has_more": false
          }
    ChatCompletionMessageList:
      type: object
      title: ChatCompletionMessageList
      description: |
        An object representing a list of chat completion messages.
      properties:
        object:
          type: string
          enum:
            - list
          default: list
          description: |
            The type of this object. It is always set to "list".
          x-stainless-const: true
        data:
          type: array
          description: |
            An array of chat completion message objects.
          items:
            allOf:
              - $ref: "#/components/schemas/ChatCompletionResponseMessage"
              - type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                    description: The identifier of the chat message.
        first_id:
          type: string
          description: The identifier of the first chat message in the data array.
        last_id:
          type: string
          description: The identifier of the last chat message in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more chat messages available.
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      x-oaiMeta:
        name: The chat completion message list object
        group: chat
        example: |
          {
            "object": "list",
            "data": [
              {
                "id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0",
                "role": "user",
                "content": "write a haiku about ai",
                "name": null,
                "content_parts": null
              }
            ],
            "first_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0",
            "last_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0",
            "has_more": false
          }
    ChatCompletionMessageToolCall:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          description: The function that the model called.
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function
    ChatCompletionMessageToolCallChunk:
      type: object
      properties:
        index:
          type: integer
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
      required:
        - index
    ChatCompletionMessageToolCalls:
      type: array
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: "#/components/schemas/ChatCompletionMessageToolCall"
    ChatCompletionModalities:
      type: array
      nullable: true
      description: >
        Output types that you would like the model to generate for this request.

        Most models are capable of generating text, which is the default:


        `["text"]`


        The `gpt-4o-audio-preview` model can also be used to [generate
        audio](/docs/guides/audio). To

        request that this model generate both text and audio responses, you can

        use:


        `["text", "audio"]`
      items:
        type: string
        enum:
          - text
          - audio
    ChatCompletionNamedToolChoice:
      type: object
      description: Specifies a tool the model should use. Use to force the model to
        call a specific function.
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
            - name
      required:
        - type
        - function
    ChatCompletionRequestAssistantMessage:
      type: object
      title: Assistant message
      description: |
        Messages sent by the model in response to user messages.
      properties:
        content:
          nullable: true
          oneOf:
            - type: string
              description: The contents of the assistant message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. Can be one or more
                of type `text`, or exactly one of type `refusal`.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/ChatCompletionRequestAssistantMessageContentPart"
              minItems: 1
          description: >
            The contents of the assistant message. Required unless `tool_calls`
            or `function_call` is specified.
        refusal:
          nullable: true
          type: string
          description: The refusal message by the assistant.
        role:
          type: string
          enum:
            - assistant
          description: The role of the messages author, in this case `assistant`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model
            information to differentiate between participants of the same role.
        audio:
          type: object
          nullable: true
          description: |
            Data about a previous audio response from the model. 
            [Learn more](/docs/guides/audio).
          required:
            - id
          properties:
            id:
              type: string
              description: |
                Unique identifier for a previous audio response from the model.
        tool_calls:
          $ref: "#/components/schemas/ChatCompletionMessageToolCalls"
        function_call:
          type: object
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of
            a function that should be called, as generated by the model.
          nullable: true
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
            - arguments
            - name
      required:
        - role
    ChatCompletionRequestAssistantMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
        - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartRefusal"
    ChatCompletionRequestDeveloperMessage:
      type: object
      title: Developer message
      description: >
        Developer-provided instructions that the model should follow, regardless
        of

        messages sent by the user. With o1 models and newer, `developer`
        messages

        replace the previous `system` messages.
      properties:
        content:
          description: The contents of the developer message.
          oneOf:
            - type: string
              description: The contents of the developer message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. For developer
                messages, only type `text` is supported.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
              minItems: 1
        role:
          type: string
          enum:
            - developer
          description: The role of the messages author, in this case `developer`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model
            information to differentiate between participants of the same role.
      required:
        - content
        - role
    ChatCompletionRequestFunctionMessage:
      type: object
      title: Function message
      deprecated: true
      properties:
        role:
          type: string
          enum:
            - function
          description: The role of the messages author, in this case `function`.
          x-stainless-const: true
        content:
          nullable: true
          type: string
          description: The contents of the function message.
        name:
          type: string
          description: The name of the function to call.
      required:
        - role
        - content
        - name
    ChatCompletionRequestMessage:
      oneOf:
        - $ref: "#/components/schemas/ChatCompletionRequestDeveloperMessage"
        - $ref: "#/components/schemas/ChatCompletionRequestSystemMessage"
        - $ref: "#/components/schemas/ChatCompletionRequestUserMessage"
        - $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage"
        - $ref: "#/components/schemas/ChatCompletionRequestToolMessage"
        - $ref: "#/components/schemas/ChatCompletionRequestFunctionMessage"
    ChatCompletionRequestMessageContentPartAudio:
      type: object
      title: Audio content part
      description: |
        Learn about [audio inputs](/docs/guides/audio).
      properties:
        type:
          type: string
          enum:
            - input_audio
          description: The type of the content part. Always `input_audio`.
          x-stainless-const: true
        input_audio:
          type: object
          properties:
            data:
              type: string
              description: Base64 encoded audio data.
            format:
              type: string
              enum:
                - wav
                - mp3
              description: >
                The format of the encoded audio data. Currently supports "wav"
                and "mp3".
          required:
            - data
            - format
      required:
        - type
        - input_audio
    ChatCompletionRequestMessageContentPartFile:
      type: object
      title: File content part
      description: |
        Learn about [file inputs](/docs/guides/text) for text generation.
      properties:
        type:
          type: string
          enum:
            - file
          description: The type of the content part. Always `file`.
          x-stainless-const: true
        file:
          type: object
          properties:
            filename:
              type: string
              description: >
                The name of the file, used when passing the file to the model as
                a 

                string.
            file_data:
              type: string
              description: >
                The base64 encoded file data, used when passing the file to the
                model 

                as a string.
            file_id:
              type: string
              description: |
                The ID of an uploaded file to use as input.
      required:
        - type
        - file
    ChatCompletionRequestMessageContentPartImage:
      type: object
      title: Image content part
      description: |
        Learn about [image inputs](/docs/guides/vision).
      properties:
        type:
          type: string
          enum:
            - image_url
          description: The type of the content part.
          x-stainless-const: true
        image_url:
          type: object
          properties:
            url:
              type: string
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
            detail:
              type: string
              description: Specifies the detail level of the image. Learn more in the [Vision
                guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
              enum:
                - auto
                - low
                - high
              default: auto
          required:
            - url
      required:
        - type
        - image_url
    ChatCompletionRequestMessageContentPartRefusal:
      type: object
      title: Refusal content part
      properties:
        type:
          type: string
          enum:
            - refusal
          description: The type of the content part.
          x-stainless-const: true
        refusal:
          type: string
          description: The refusal message generated by the model.
      required:
        - type
        - refusal
    ChatCompletionRequestMessageContentPartText:
      type: object
      title: Text content part
      description: |
        Learn about [text inputs](/docs/guides/text-generation).
      properties:
        type:
          type: string
          enum:
            - text
          description: The type of the content part.
          x-stainless-const: true
        text:
          type: string
          description: The text content.
      required:
        - type
        - text
    ChatCompletionRequestSystemMessage:
      type: object
      title: System message
      description: >
        Developer-provided instructions that the model should follow, regardless
        of

        messages sent by the user. With o1 models and newer, use `developer`
        messages

        for this purpose instead.
      properties:
        content:
          description: The contents of the system message.
          oneOf:
            - type: string
              description: The contents of the system message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. For system messages,
                only type `text` is supported.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/ChatCompletionRequestSystemMessageContentPart"
              minItems: 1
        role:
          type: string
          enum:
            - system
          description: The role of the messages author, in this case `system`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model
            information to differentiate between participants of the same role.
      required:
        - content
        - role
    ChatCompletionRequestSystemMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
    ChatCompletionRequestToolMessage:
      type: object
      title: Tool message
      properties:
        role:
          type: string
          enum:
            - tool
          description: The role of the messages author, in this case `tool`.
          x-stainless-const: true
        content:
          oneOf:
            - type: string
              description: The contents of the tool message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. For tool messages,
                only type `text` is supported.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/ChatCompletionRequestToolMessageContentPart"
              minItems: 1
          description: The contents of the tool message.
        tool_call_id:
          type: string
          description: Tool call that this message is responding to.
      required:
        - role
        - content
        - tool_call_id
    ChatCompletionRequestToolMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
    ChatCompletionRequestUserMessage:
      type: object
      title: User message
      description: |
        Messages sent by an end user, containing prompts or additional context
        information.
      properties:
        content:
          description: |
            The contents of the user message.
          oneOf:
            - type: string
              description: The text contents of the message.
              title: Text content
            - type: array
              description: An array of content parts with a defined type. Supported options
                differ based on the [model](/docs/models) being used to generate
                the response. Can contain text, image, or audio inputs.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/ChatCompletionRequestUserMessageContentPart"
              minItems: 1
        role:
          type: string
          enum:
            - user
          description: The role of the messages author, in this case `user`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model
            information to differentiate between participants of the same role.
      required:
        - content
        - role
    ChatCompletionRequestUserMessageContentPart:
      oneOf:
        - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
        - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartImage"
        - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartAudio"
        - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartFile"
    ChatCompletionResponseMessage:
      type: object
      description: A chat completion message generated by the model.
      properties:
        content:
          type: string
          description: The contents of the message.
          nullable: true
        refusal:
          type: string
          description: The refusal message generated by the model.
          nullable: true
        tool_calls:
          $ref: "#/components/schemas/ChatCompletionMessageToolCalls"
        annotations:
          type: array
          description: |
            Annotations for the message, when applicable, as when using the
            [web search tool](/docs/guides/tools-web-search?api-mode=chat).
          items:
            type: object
            description: |
              A URL citation when using web search.
            required:
              - type
              - url_citation
            properties:
              type:
                type: string
                description: The type of the URL citation. Always `url_citation`.
                enum:
                  - url_citation
                x-stainless-const: true
              url_citation:
                type: object
                description: A URL citation when using web search.
                required:
                  - end_index
                  - start_index
                  - url
                  - title
                properties:
                  end_index:
                    type: integer
                    description: The index of the last character of the URL citation in the message.
                  start_index:
                    type: integer
                    description: The index of the first character of the URL citation in the
                      message.
                  url:
                    type: string
                    description: The URL of the web resource.
                  title:
                    type: string
                    description: The title of the web resource.
        role:
          type: string
          enum:
            - assistant
          description: The role of the author of this message.
          x-stainless-const: true
        function_call:
          type: object
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of
            a function that should be called, as generated by the model.
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
            - name
            - arguments
        audio:
          type: object
          nullable: true
          description: >
            If the audio output modality is requested, this object contains data

            about the audio response from the model. [Learn
            more](/docs/guides/audio).
          required:
            - id
            - expires_at
            - data
            - transcript
          properties:
            id:
              type: string
              description: Unique identifier for this audio response.
            expires_at:
              type: integer
              description: >
                The Unix timestamp (in seconds) for when this audio response
                will

                no longer be accessible on the server for use in multi-turn

                conversations.
            data:
              type: string
              description: |
                Base64 encoded audio bytes generated by the model, in the format
                specified in the request.
            transcript:
              type: string
              description: Transcript of the audio generated by the model.
      required:
        - role
        - content
        - refusal
    ChatCompletionRole:
      type: string
      description: The role of the author of a message
      enum:
        - developer
        - system
        - user
        - assistant
        - tool
        - function
    ChatCompletionStreamOptions:
      description: >
        Options for streaming response. Only set this when you set `stream:
        true`.
      type: object
      nullable: true
      default: null
      properties:
        include_usage:
          type: boolean
          description: >
            If set, an additional chunk will be streamed before the `data:
            [DONE]`

            message. The `usage` field on this chunk shows the token usage
            statistics

            for the entire request, and the `choices` field will always be an
            empty

            array. 


            All other chunks will also include a `usage` field, but with a null

            value. **NOTE:** If the stream is interrupted, you may not receive
            the

            final usage chunk which contains the total token usage for the
            request.
    ChatCompletionStreamResponseDelta:
      type: object
      description: A chat completion delta generated by streamed model responses.
      properties:
        content:
          type: string
          description: The contents of the chunk message.
          nullable: true
        function_call:
          deprecated: true
          type: object
          description: Deprecated and replaced by `tool_calls`. The name and arguments of
            a function that should be called, as generated by the model.
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model
                in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your
                function schema. Validate the arguments in your code before
                calling your function.
            name:
              type: string
              description: The name of the function to call.
        tool_calls:
          type: array
          items:
            $ref: "#/components/schemas/ChatCompletionMessageToolCallChunk"
        role:
          type: string
          enum:
            - developer
            - system
            - user
            - assistant
            - tool
          description: The role of the author of this message.
        refusal:
          type: string
          description: The refusal message generated by the model.
          nullable: true
    ChatCompletionTokenLogprob:
      type: object
      properties:
        token:
          description: The token.
          type: string
        logprob:
          description: The log probability of this token, if it is within the top 20 most
            likely tokens. Otherwise, the value `-9999.0` is used to signify
            that the token is very unlikely.
          type: number
        bytes:
          description: A list of integers representing the UTF-8 bytes representation of
            the token. Useful in instances where characters are represented by
            multiple tokens and their byte representations must be combined to
            generate the correct text representation. Can be `null` if there is
            no bytes representation for the token.
          type: array
          items:
            type: integer
          nullable: true
        top_logprobs:
          description: List of the most likely tokens and their log probability, at this
            token position. In rare cases, there may be fewer than the number of
            requested `top_logprobs` returned.
          type: array
          items:
            type: object
            properties:
              token:
                description: The token.
                type: string
              logprob:
                description: The log probability of this token, if it is within the top 20 most
                  likely tokens. Otherwise, the value `-9999.0` is used to
                  signify that the token is very unlikely.
                type: number
              bytes:
                description: A list of integers representing the UTF-8 bytes representation of
                  the token. Useful in instances where characters are
                  represented by multiple tokens and their byte representations
                  must be combined to generate the correct text representation.
                  Can be `null` if there is no bytes representation for the
                  token.
                type: array
                items:
                  type: integer
                nullable: true
            required:
              - token
              - logprob
              - bytes
      required:
        - token
        - logprob
        - bytes
        - top_logprobs
    ChatCompletionTool:
      type: object
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/FunctionObject"
      required:
        - type
        - function
    ChatCompletionToolChoiceOption:
      description: >
        Controls which (if any) tool is called by the model.

        `none` means the model will not call any tool and instead generates a
        message.

        `auto` means the model can pick between generating a message or calling
        one or more tools.

        `required` means the model must call one or more tools.

        Specifying a particular tool via `{"type": "function", "function":
        {"name": "my_function"}}` forces the model to call that tool.


        `none` is the default when no tools are present. `auto` is the default
        if tools are present.
      oneOf:
        - type: string
          description: >
            `none` means the model will not call any tool and instead generates
            a message. `auto` means the model can pick between generating a
            message or calling one or more tools. `required` means the model
            must call one or more tools.
          enum:
            - none
            - auto
            - required
        - $ref: "#/components/schemas/ChatCompletionNamedToolChoice"
    Click:
      type: object
      title: Click
      description: |
        A click action.
      properties:
        type:
          type: string
          enum:
            - click
          default: click
          description: |
            Specifies the event type. For a click action, this property is 
            always set to `click`.
          x-stainless-const: true
        button:
          type: string
          enum:
            - left
            - right
            - wheel
            - back
            - forward
          description: >
            Indicates which mouse button was pressed during the click. One of
            `left`, `right`, `wheel`, `back`, or `forward`.
        x:
          type: integer
          description: |
            The x-coordinate where the click occurred.
        y:
          type: integer
          description: |
            The y-coordinate where the click occurred.
      required:
        - type
        - button
        - x
        - y
    CodeInterpreterFileOutput:
      type: object
      title: Code interpreter file output
      description: |
        The output of a code interpreter tool call that is a file.
      properties:
        type:
          type: string
          enum:
            - files
          description: |
            The type of the code interpreter file output. Always `files`.
          x-stainless-const: true
        files:
          type: array
          items:
            type: object
            properties:
              mime_type:
                type: string
                description: |
                  The MIME type of the file.
              file_id:
                type: string
                description: |
                  The ID of the file.
            required:
              - mime_type
              - file_id
      required:
        - type
        - files
    CodeInterpreterTextOutput:
      type: object
      title: Code interpreter text output
      description: |
        The output of a code interpreter tool call that is text.
      properties:
        type:
          type: string
          enum:
            - logs
          description: |
            The type of the code interpreter text output. Always `logs`.
          x-stainless-const: true
        logs:
          type: string
          description: |
            The logs of the code interpreter tool call.
      required:
        - type
        - logs
    CodeInterpreterToolCall:
      type: object
      title: Code interpreter tool call
      description: |
        A tool call to run code.
      properties:
        id:
          type: string
          description: |
            The unique ID of the code interpreter tool call.
        type:
          type: string
          enum:
            - code_interpreter_call
          description: >
            The type of the code interpreter tool call. Always
            `code_interpreter_call`.
          x-stainless-const: true
        code:
          type: string
          description: |
            The code to run.
        status:
          type: string
          enum:
            - in_progress
            - interpreting
            - completed
          description: |
            The status of the code interpreter tool call.
        results:
          type: array
          items:
            $ref: "#/components/schemas/CodeInterpreterToolOutput"
          description: |
            The results of the code interpreter tool call.
      required:
        - id
        - type
        - code
        - status
        - results
    CodeInterpreterToolOutput:
      oneOf:
        - $ref: "#/components/schemas/CodeInterpreterTextOutput"
        - $ref: "#/components/schemas/CodeInterpreterFileOutput"
    ComparisonFilter:
      type: object
      additionalProperties: false
      title: Comparison Filter
      description: >
        A filter used to compare a specified attribute key to a given value
        using a defined comparison operation.
      properties:
        type:
          type: string
          default: eq
          enum:
            - eq
            - ne
            - gt
            - gte
            - lt
            - lte
          description: >
            Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`,
            `lte`.

            - `eq`: equals

            - `ne`: not equal

            - `gt`: greater than

            - `gte`: greater than or equal

            - `lt`: less than

            - `lte`: less than or equal
        key:
          type: string
          description: The key to compare against the value.
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
          description: The value to compare against the attribute key; supports string,
            number, or boolean types.
      required:
        - type
        - key
        - value
      x-oaiMeta:
        name: ComparisonFilter
    CompleteUploadRequest:
      type: object
      additionalProperties: false
      properties:
        part_ids:
          type: array
          description: |
            The ordered list of Part IDs.
          items:
            type: string
        md5:
          description: >
            The optional md5 checksum for the file contents to verify if the
            bytes uploaded matches what you expect.
          type: string
      required:
        - part_ids
    CompletionUsage:
      type: object
      description: Usage statistics for the completion request.
      properties:
        completion_tokens:
          type: integer
          default: 0
          description: Number of tokens in the generated completion.
        prompt_tokens:
          type: integer
          default: 0
          description: Number of tokens in the prompt.
        total_tokens:
          type: integer
          default: 0
          description: Total number of tokens used in the request (prompt + completion).
        completion_tokens_details:
          type: object
          description: Breakdown of tokens used in a completion.
          properties:
            accepted_prediction_tokens:
              type: integer
              default: 0
              description: |
                When using Predicted Outputs, the number of tokens in the
                prediction that appeared in the completion.
            audio_tokens:
              type: integer
              default: 0
              description: Audio input tokens generated by the model.
            reasoning_tokens:
              type: integer
              default: 0
              description: Tokens generated by the model for reasoning.
            rejected_prediction_tokens:
              type: integer
              default: 0
              description: >
                When using Predicted Outputs, the number of tokens in the

                prediction that did not appear in the completion. However, like

                reasoning tokens, these tokens are still counted in the total

                completion tokens for purposes of billing, output, and context
                window

                limits.
        prompt_tokens_details:
          type: object
          description: Breakdown of tokens used in the prompt.
          properties:
            audio_tokens:
              type: integer
              default: 0
              description: Audio input tokens present in the prompt.
            cached_tokens:
              type: integer
              default: 0
              description: Cached tokens present in the prompt.
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
    CompoundFilter:
      type: object
      additionalProperties: false
      title: Compound Filter
      description: Combine multiple filters using `and` or `or`.
      properties:
        type:
          type: string
          description: "Type of operation: `and` or `or`."
          enum:
            - and
            - or
        filters:
          type: array
          description: Array of filters to combine. Items can be `ComparisonFilter` or
            `CompoundFilter`.
          items:
            oneOf:
              - $ref: "#/components/schemas/ComparisonFilter"
              - $ref: "#/components/schemas/CompoundFilter"
      required:
        - type
        - filters
      x-oaiMeta:
        name: CompoundFilter
    ComputerAction:
      oneOf:
        - $ref: "#/components/schemas/Click"
        - $ref: "#/components/schemas/DoubleClick"
        - $ref: "#/components/schemas/Drag"
        - $ref: "#/components/schemas/KeyPress"
        - $ref: "#/components/schemas/Move"
        - $ref: "#/components/schemas/Screenshot"
        - $ref: "#/components/schemas/Scroll"
        - $ref: "#/components/schemas/Type"
        - $ref: "#/components/schemas/Wait"
    ComputerScreenshotImage:
      type: object
      description: |
        A computer screenshot image used with the computer use tool.
      properties:
        type:
          type: string
          enum:
            - computer_screenshot
          default: computer_screenshot
          description: >
            Specifies the event type. For a computer screenshot, this property
            is 

            always set to `computer_screenshot`.
          x-stainless-const: true
        image_url:
          type: string
          description: The URL of the screenshot image.
        file_id:
          type: string
          description: The identifier of an uploaded file that contains the screenshot.
      required:
        - type
    ComputerToolCall:
      type: object
      title: Computer tool call
      description: >
        A tool call to a computer use tool. See the 

        [computer use guide](/docs/guides/tools-computer-use) for more
        information.
      properties:
        type:
          type: string
          description: The type of the computer call. Always `computer_call`.
          enum:
            - computer_call
          default: computer_call
        id:
          type: string
          description: The unique ID of the computer call.
        call_id:
          type: string
          description: |
            An identifier used when responding to the tool call with output.
        action:
          $ref: "#/components/schemas/ComputerAction"
        pending_safety_checks:
          type: array
          items:
            $ref: "#/components/schemas/ComputerToolCallSafetyCheck"
          description: |
            The pending safety checks for the computer call.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - id
        - action
        - call_id
        - pending_safety_checks
        - status
    ComputerToolCallOutput:
      type: object
      title: Computer tool call output
      description: |
        The output of a computer tool call.
      properties:
        type:
          type: string
          description: >
            The type of the computer tool call output. Always
            `computer_call_output`.
          enum:
            - computer_call_output
          default: computer_call_output
          x-stainless-const: true
        id:
          type: string
          description: |
            The ID of the computer tool call output.
        call_id:
          type: string
          description: |
            The ID of the computer tool call that produced the output.
        acknowledged_safety_checks:
          type: array
          description: >
            The safety checks reported by the API that have been acknowledged by
            the 

            developer.
          items:
            $ref: "#/components/schemas/ComputerToolCallSafetyCheck"
        output:
          $ref: "#/components/schemas/ComputerScreenshotImage"
        status:
          type: string
          description: >
            The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - call_id
        - output
    ComputerToolCallOutputResource:
      allOf:
        - $ref: "#/components/schemas/ComputerToolCallOutput"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the computer call tool output.
          required:
            - id
    ComputerToolCallSafetyCheck:
      type: object
      description: |
        A pending safety check for the computer call.
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          type: string
          description: The type of the pending safety check.
        message:
          type: string
          description: Details about the pending safety check.
      required:
        - id
        - code
        - message
    Content:
      description: |
        Multi-modal input and output contents.
      oneOf:
        - title: Input content types
          $ref: "#/components/schemas/InputContent"
        - title: Output content types
          $ref: "#/components/schemas/OutputContent"
    Coordinate:
      type: object
      title: Coordinate
      description: |
        An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.
      properties:
        x:
          type: integer
          description: |
            The x-coordinate.
        y:
          type: integer
          description: |
            The y-coordinate.
      required:
        - x
        - y
    CostsResult:
      type: object
      description: The aggregated costs details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.costs.result
          x-stainless-const: true
        amount:
          type: object
          description: The monetary value in its associated currency.
          properties:
            value:
              type: number
              description: The numeric value of the cost.
            currency:
              type: string
              description: Lowercase ISO-4217 currency e.g. "usd"
        line_item:
          type: string
          nullable: true
          description: When `group_by=line_item`, this field provides the line item of the
            grouped costs result.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped costs result.
      required:
        - object
      x-oaiMeta:
        name: Costs object
        example: |
          {
              "object": "organization.costs.result",
              "amount": {
                "value": 0.06,
                "currency": "usd"
              },
              "line_item": "Image models",
              "project_id": "proj_abc"
          }
    CreateChatCompletionRequest:
      type: object
      properties:
        messages:
          description: >
            A list of messages comprising the conversation so far. Depending
            on the

            [model](/docs/models) you use, different message types
            (modalities) are

            supported, like [text](/docs/guides/text-generation),

            [images](/docs/guides/vision), and [audio](/docs/guides/audio).
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/ChatCompletionRequestMessage"
        model:
          description: >
            Model ID used to generate the response, like `gpt-4o` or `o3`.
            OpenAI

            offers a wide range of models with different capabilities,
            performance

            characteristics, and price points. Refer to the [model
            guide](/docs/models)

            to browse and compare available models.
          $ref: "#/components/schemas/ModelIdsShared"
        modalities:
          $ref: "#/components/schemas/ResponseModalities"
        reasoning_effort:
          $ref: "#/components/schemas/ReasoningEffort"
        max_completion_tokens:
          description: >
            An upper bound for the number of tokens that can be generated
            for a completion, including visible output tokens and [reasoning
            tokens](/docs/guides/reasoning).
          type: integer
          nullable: true
        frequency_penalty:
          type: number
          default: 0
          minimum: -2
          maximum: 2
          nullable: true
          description: >
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on

            their existing frequency in the text so far, decreasing the
            model's

            likelihood to repeat the same line verbatim.
        presence_penalty:
          type: number
          default: 0
          minimum: -2
          maximum: 2
          nullable: true
          description: >
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on

            whether they appear in the text so far, increasing the model's
            likelihood

            to talk about new topics.
        web_search_options:
          type: object
          title: Web search
          description: >
            This tool searches the web for relevant results to use in a
            response.

            Learn more about the [web search
            tool](/docs/guides/tools-web-search?api-mode=chat).
          properties:
            user_location:
              type: object
              nullable: true
              required:
                - type
                - approximate
              description: |
                Approximate location parameters for the search.
              properties:
                type:
                  type: string
                  description: >
                    The type of location approximation. Always `approximate`.
                  enum:
                    - approximate
                  x-stainless-const: true
                approximate:
                  $ref: "#/components/schemas/WebSearchLocation"
            search_context_size:
              $ref: "#/components/schemas/WebSearchContextSize"
        top_logprobs:
          description: >
            An integer between 0 and 20 specifying the number of most likely
            tokens to

            return at each token position, each with an associated log
            probability.

            `logprobs` must be set to `true` if this parameter is used.
          type: integer
          minimum: 0
          maximum: 20
          nullable: true
        response_format:
          description: >
            An object specifying the format that the model must output.


            Setting to `{ "type": "json_schema", "json_schema": {...} }`
            enables

            Structured Outputs which ensures the model will match your
            supplied JSON

            schema. Learn more in the [Structured Outputs

            guide](/docs/guides/structured-outputs).


            Setting to `{ "type": "json_object" }` enables the older JSON
            mode, which

            ensures the message the model generates is valid JSON. Using
            `json_schema`

            is preferred for models that support it.
          oneOf:
            - $ref: "#/components/schemas/ResponseFormatText"
            - $ref: "#/components/schemas/ResponseFormatJsonSchema"
            - $ref: "#/components/schemas/ResponseFormatJsonObject"
        store:
          type: boolean
          default: false
          nullable: true
          description: >
            Whether or not to store the output of this chat completion
            request for 

            use in our [model distillation](/docs/guides/distillation) or

            [evals](/docs/guides/evals) products.
        stream:
          description: |
            If set to true, the model response data will be streamed to the client
            as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
            See the [Streaming section below](/docs/api-reference/chat/streaming)
            for more information, along with the [streaming responses](/docs/guides/streaming-responses)
            guide for more information on how to handle the streaming events.
          type: boolean
          nullable: true
          default: false
        stop:
          $ref: "#/components/schemas/StopConfiguration"
        logit_bias:
          type: object
          x-oaiTypeLabel: map
          default: null
          nullable: true
          additionalProperties:
            type: integer
          description: >
            Modify the likelihood of specified tokens appearing in the
            completion.


            Accepts a JSON object that maps tokens (specified by their token
            ID in the

            tokenizer) to an associated bias value from -100 to 100.
            Mathematically,

            the bias is added to the logits generated by the model prior to
            sampling.

            The exact effect will vary per model, but values between -1 and
            1 should

            decrease or increase likelihood of selection; values like -100
            or 100

            should result in a ban or exclusive selection of the relevant
            token.
        logprobs:
          description: >
            Whether to return log probabilities of the output tokens or not.
            If true,

            returns the log probabilities of each output token returned in
            the

            `content` of `message`.
          type: boolean
          default: false
          nullable: true
        max_tokens:
          description: >
            The maximum number of [tokens](/tokenizer) that can be generated
            in the

            chat completion. This value can be used to control

            [costs](https://openai.com/api/pricing/) for text generated via
            API.


            This value is now deprecated in favor of
            `max_completion_tokens`, and is

            not compatible with [o-series models](/docs/guides/reasoning).
          type: integer
          nullable: true
          deprecated: true
        n:
          type: integer
          minimum: 1
          maximum: 128
          default: 1
          example: 1
          nullable: true
          description: How many chat completion choices to generate for each input
            message. Note that you will be charged based on the number of
            generated tokens across all of the choices. Keep `n` as `1` to
            minimize costs.
        prediction:
          nullable: true
          description: >
            Configuration for a [Predicted
            Output](/docs/guides/predicted-outputs),

            which can greatly improve response times when large parts of the
            model

            response are known ahead of time. This is most common when you
            are

            regenerating a file with only minor changes to most of the
            content.
          oneOf:
            - $ref: "#/components/schemas/PredictionContent"
        seed:
          type: integer
          minimum: -9223372036854776000
          maximum: 9223372036854776000
          nullable: true
          description: >
            This feature is in Beta.

            If specified, our system will make a best effort to sample
            deterministically, such that repeated requests with the same
            `seed` and parameters should return the same result.

            Determinism is not guaranteed, and you should refer to the
            `system_fingerprint` response parameter to monitor changes in
            the backend.
          x-oaiMeta:
            beta: true
        stream_options:
          $ref: "#/components/schemas/ChatCompletionStreamOptions"
        tools:
          type: array
          description: >
            A list of tools the model may call. Currently, only functions
            are supported as a tool. Use this to provide a list of functions
            the model may generate JSON inputs for. A max of 128 functions
            are supported.
          items:
            $ref: "#/components/schemas/ChatCompletionTool"
        tool_choice:
          $ref: "#/components/schemas/ChatCompletionToolChoiceOption"
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        function_call:
          deprecated: true
          description: >
            Deprecated in favor of `tool_choice`.


            Controls which (if any) function is called by the model.


            `none` means the model will not call a function and instead
            generates a

            message.


            `auto` means the model can pick between generating a message or
            calling a

            function.


            Specifying a particular function via `{"name": "my_function"}`
            forces the

            model to call that function.


            `none` is the default when no functions are present. `auto` is
            the default

            if functions are present.
          oneOf:
            - type: string
              description: >
                `none` means the model will not call a function and instead
                generates a message. `auto` means the model can pick between
                generating a message or calling a function.
              enum:
                - none
                - auto
            - $ref: "#/components/schemas/ChatCompletionFunctionCallOption"
        functions:
          deprecated: true
          description: |
            Deprecated in favor of `tools`.

            A list of functions the model may generate JSON inputs for.
          type: array
          minItems: 1
          maxItems: 128
          items:
            $ref: "#/components/schemas/ChatCompletionFunctions"
      required:
        - model
        - messages
    CreateChatCompletionResponse:
      type: object
      description: Represents a chat completion response returned by model, based on
        the provided input.
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        choices:
          type: array
          description: A list of chat completion choices. Can be more than one if `n` is
            greater than 1.
          items:
            type: object
            required:
              - finish_reason
              - index
              - message
              - logprobs
            properties:
              finish_reason:
                type: string
                description: >
                  The reason the model stopped generating tokens. This will be
                  `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the
                  request was reached,

                  `content_filter` if content was omitted due to a flag from our
                  content filters,

                  `tool_calls` if the model called a tool, or `function_call`
                  (deprecated) if the model called a function.
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
              index:
                type: integer
                description: The index of the choice in the list of choices.
              message:
                $ref: "#/components/schemas/ChatCompletionResponseMessage"
              logprobs:
                description: Log probability information for the choice.
                type: object
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability information.
                    type: array
                    items:
                      $ref: "#/components/schemas/ChatCompletionTokenLogprob"
                    nullable: true
                  refusal:
                    description: A list of message refusal tokens with log probability information.
                    type: array
                    items:
                      $ref: "#/components/schemas/ChatCompletionTokenLogprob"
                    nullable: true
                required:
                  - content
                  - refusal
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion was
            created.
        model:
          type: string
          description: The model used for the chat completion.
        service_tier:
          $ref: "#/components/schemas/ServiceTier"
        system_fingerprint:
          type: string
          description: >
            This fingerprint represents the backend configuration that the model
            runs with.


            Can be used in conjunction with the `seed` request parameter to
            understand when backend changes have been made that might impact
            determinism.
        object:
          type: string
          description: The object type, which is always `chat.completion`.
          enum:
            - chat.completion
          x-stainless-const: true
        usage:
          $ref: "#/components/schemas/CompletionUsage"
      required:
        - choices
        - created
        - id
        - model
        - object
      x-oaiMeta:
        name: The chat completion object
        group: chat
        example: >
          {
            "id": "chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG",
            "object": "chat.completion",
            "created": 1741570283,
            "model": "gpt-4o-2024-08-06",
            "choices": [
              {
                "index": 0,
                "message": {
                  "role": "assistant",
                  "content": "The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.",
                  "refusal": null,
                  "annotations": []
                },
                "logprobs": null,
                "finish_reason": "stop"
              }
            ],
            "usage": {
              "prompt_tokens": 1117,
              "completion_tokens": 46,
              "total_tokens": 1163,
              "prompt_tokens_details": {
                "cached_tokens": 0,
                "audio_tokens": 0
              },
              "completion_tokens_details": {
                "reasoning_tokens": 0,
                "audio_tokens": 0,
                "accepted_prediction_tokens": 0,
                "rejected_prediction_tokens": 0
              }
            },
            "service_tier": "default",
            "system_fingerprint": "fp_fc9f1d7035"
          }
    CreateChatCompletionStreamResponse:
      type: object
      description: |
        Represents a streamed chunk of a chat completion response returned
        by the model, based on the provided input. 
        [Learn more](/docs/guides/streaming-responses).
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion. Each chunk has the
            same ID.
        choices:
          type: array
          description: >
            A list of chat completion choices. Can contain more than one
            elements if `n` is greater than 1. Can also be empty for the

            last chunk if you set `stream_options: {"include_usage": true}`.
          items:
            type: object
            required:
              - delta
              - finish_reason
              - index
            properties:
              delta:
                $ref: "#/components/schemas/ChatCompletionStreamResponseDelta"
              logprobs:
                description: Log probability information for the choice.
                type: object
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability information.
                    type: array
                    items:
                      $ref: "#/components/schemas/ChatCompletionTokenLogprob"
                    nullable: true
                  refusal:
                    description: A list of message refusal tokens with log probability information.
                    type: array
                    items:
                      $ref: "#/components/schemas/ChatCompletionTokenLogprob"
                    nullable: true
                required:
                  - content
                  - refusal
              finish_reason:
                type: string
                description: >
                  The reason the model stopped generating tokens. This will be
                  `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the
                  request was reached,

                  `content_filter` if content was omitted due to a flag from our
                  content filters,

                  `tool_calls` if the model called a tool, or `function_call`
                  (deprecated) if the model called a function.
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                nullable: true
              index:
                type: integer
                description: The index of the choice in the list of choices.
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion was
            created. Each chunk has the same timestamp.
        model:
          type: string
          description: The model to generate the completion.
        service_tier:
          $ref: "#/components/schemas/ServiceTier"
        system_fingerprint:
          type: string
          description: >
            This fingerprint represents the backend configuration that the model
            runs with.

            Can be used in conjunction with the `seed` request parameter to
            understand when backend changes have been made that might impact
            determinism.
        object:
          type: string
          description: The object type, which is always `chat.completion.chunk`.
          enum:
            - chat.completion.chunk
          x-stainless-const: true
        usage:
          $ref: "#/components/schemas/CompletionUsage"
          nullable: true
          description: >
            An optional field that will only be present when you set

            `stream_options: {"include_usage": true}` in your request. When
            present, it

            contains a null value **except for the last chunk** which contains
            the

            token usage statistics for the entire request.


            **NOTE:** If the stream is interrupted or cancelled, you may not

            receive the final usage chunk which contains the total token usage
            for

            the request.
      required:
        - choices
        - created
        - id
        - model
        - object
      x-oaiMeta:
        name: The chat completion chunk object
        group: chat
        example: |
          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

          ....

          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
    CreateCompletionRequest:
      type: object
      properties:
        model:
          description: >
            ID of the model to use. You can use the [List
            models](/docs/api-reference/models/list) API to see all of your
            available models, or see our [Model overview](/docs/models) for
            descriptions of them.
          anyOf:
            - type: string
            - type: string
              enum:
                - gpt-3.5-turbo-instruct
                - davinci-002
                - babbage-002
          x-oaiTypeLabel: string
        prompt:
          description: >
            The prompt(s) to generate completions for, encoded as a string,
            array of strings, array of tokens, or array of token arrays.


            Note that <|endoftext|> is the document separator that the model
            sees during training, so if a prompt is not specified the model will
            generate as if from the beginning of a new document.
          default: <|endoftext|>
          nullable: true
          oneOf:
            - type: string
              default: ""
              example: This is a test.
            - type: array
              items:
                type: string
                default: ""
                example: This is a test.
            - type: array
              minItems: 1
              items:
                type: integer
              example: [1212, 318, 257, 1332, 13]
            - type: array
              minItems: 1
              items:
                type: array
                minItems: 1
                items:
                  type: integer
              example: [[1212, 318, 257, 1332, 13]]
        best_of:
          type: integer
          default: 1
          minimum: 0
          maximum: 20
          nullable: true
          description: >
            Generates `best_of` completions server-side and returns the "best"
            (the one with the highest log probability per token). Results cannot
            be streamed.


            When used with `n`, `best_of` controls the number of candidate
            completions and `n` specifies how many to return â€“ `best_of` must be
            greater than `n`.


            **Note:** Because this parameter generates many completions, it can
            quickly consume your token quota. Use carefully and ensure that you
            have reasonable settings for `max_tokens` and `stop`.
        echo:
          type: boolean
          default: false
          nullable: true
          description: |
            Echo back the prompt in addition to the completion
        frequency_penalty:
          type: number
          default: 0
          minimum: -2
          maximum: 2
          nullable: true
          description: >
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on their existing frequency in the text so far, decreasing the
            model's likelihood to repeat the same line verbatim.


            [See more information about frequency and presence
            penalties.](/docs/guides/text-generation)
        logit_bias:
          type: object
          x-oaiTypeLabel: map
          default: null
          nullable: true
          additionalProperties:
            type: integer
          description: >
            Modify the likelihood of specified tokens appearing in the
            completion.


            Accepts a JSON object that maps tokens (specified by their token ID
            in the GPT tokenizer) to an associated bias value from -100 to 100.
            You can use this [tokenizer tool](/tokenizer?view=bpe) to convert
            text to token IDs. Mathematically, the bias is added to the logits
            generated by the model prior to sampling. The exact effect will vary
            per model, but values between -1 and 1 should decrease or increase
            likelihood of selection; values like -100 or 100 should result in a
            ban or exclusive selection of the relevant token.


            As an example, you can pass `{"50256": -100}` to prevent the
            <|endoftext|> token from being generated.
        logprobs:
          type: integer
          minimum: 0
          maximum: 5
          default: null
          nullable: true
          description: >
            Include the log probabilities on the `logprobs` most likely output
            tokens, as well the chosen tokens. For example, if `logprobs` is 5,
            the API will return a list of the 5 most likely tokens. The API will
            always return the `logprob` of the sampled token, so there may be up
            to `logprobs+1` elements in the response.


            The maximum value for `logprobs` is 5.
        max_tokens:
          type: integer
          minimum: 0
          default: 16
          example: 16
          nullable: true
          description: |
            The maximum number of [tokens](/tokenizer) that can be generated in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
        n:
          type: integer
          minimum: 1
          maximum: 128
          default: 1
          example: 1
          nullable: true
          description: >
            How many completions to generate for each prompt.


            **Note:** Because this parameter generates many completions, it can
            quickly consume your token quota. Use carefully and ensure that you
            have reasonable settings for `max_tokens` and `stop`.
        presence_penalty:
          type: number
          default: 0
          minimum: -2
          maximum: 2
          nullable: true
          description: >
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on whether they appear in the text so far, increasing the
            model's likelihood to talk about new topics.


            [See more information about frequency and presence
            penalties.](/docs/guides/text-generation)
        seed:
          type: integer
          format: int64
          nullable: true
          description: >
            If specified, our system will make a best effort to sample
            deterministically, such that repeated requests with the same `seed`
            and parameters should return the same result.


            Determinism is not guaranteed, and you should refer to the
            `system_fingerprint` response parameter to monitor changes in the
            backend.
        stop:
          $ref: "#/components/schemas/StopConfiguration"
        stream:
          description: |
            Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
          type: boolean
          nullable: true
          default: false
        stream_options:
          $ref: "#/components/schemas/ChatCompletionStreamOptions"
        suffix:
          description: |
            The suffix that comes after a completion of inserted text.

            This parameter is only supported for `gpt-3.5-turbo-instruct`.
          default: null
          nullable: true
          type: string
          example: test.
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: >
            What sampling temperature to use, between 0 and 2. Higher values
            like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.


            We generally recommend altering this or `top_p` but not both.
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: >
            An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with
            top_p probability mass. So 0.1 means only the tokens comprising the
            top 10% probability mass are considered.


            We generally recommend altering this or `temperature` but not both.
        user:
          type: string
          example: user-1234
          description: >
            A unique identifier representing your end-user, which can help
            OpenAI to monitor and detect abuse. [Learn
            more](/docs/guides/safety-best-practices#end-user-ids).
      required:
        - model
        - prompt
    CreateCompletionResponse:
      type: object
      description: >
        Represents a completion response from the API. Note: both the streamed
        and non-streamed response objects share the same shape (unlike the chat
        endpoint).
      properties:
        id:
          type: string
          description: A unique identifier for the completion.
        choices:
          type: array
          description: The list of completion choices the model generated for the input
            prompt.
          items:
            type: object
            required:
              - finish_reason
              - index
              - logprobs
              - text
            properties:
              finish_reason:
                type: string
                description: >
                  The reason the model stopped generating tokens. This will be
                  `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the
                  request was reached,

                  or `content_filter` if content was omitted due to a flag from
                  our content filters.
                enum:
                  - stop
                  - length
                  - content_filter
              index:
                type: integer
              logprobs:
                type: object
                nullable: true
                properties:
                  text_offset:
                    type: array
                    items:
                      type: integer
                  token_logprobs:
                    type: array
                    items:
                      type: number
                  tokens:
                    type: array
                    items:
                      type: string
                  top_logprobs:
                    type: array
                    items:
                      type: object
                      additionalProperties:
                        type: number
              text:
                type: string
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the completion was created.
        model:
          type: string
          description: The model used for completion.
        system_fingerprint:
          type: string
          description: >
            This fingerprint represents the backend configuration that the model
            runs with.


            Can be used in conjunction with the `seed` request parameter to
            understand when backend changes have been made that might impact
            determinism.
        object:
          type: string
          description: The object type, which is always "text_completion"
          enum:
            - text_completion
          x-stainless-const: true
        usage:
          $ref: "#/components/schemas/CompletionUsage"
      required:
        - id
        - object
        - created
        - model
        - choices
      x-oaiMeta:
        name: The completion object
        legacy: true
        example: |
          {
            "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
            "object": "text_completion",
            "created": 1589478378,
            "model": "gpt-4-turbo",
            "choices": [
              {
                "text": "\n\nThis is indeed a test",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
              }
            ],
            "usage": {
              "prompt_tokens": 5,
              "completion_tokens": 7,
              "total_tokens": 12
            }
          }
    CreateEmbeddingRequest:
      type: object
      additionalProperties: false
      properties:
        input:
          description: |
            Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.
          example: The quick brown fox jumped over the lazy dog
          oneOf:
            - type: string
              title: string
              description: The string that will be turned into an embedding.
              default: ""
              example: This is a test.
            - type: array
              title: array
              description: The array of strings that will be turned into an embedding.
              minItems: 1
              maxItems: 2048
              items:
                type: string
                default: ""
                example: "This is a test."
            - type: array
              title: array
              description: The array of integers that will be turned into an embedding.
              minItems: 1
              maxItems: 2048
              items:
                type: integer
              example: [1212, 318, 257, 1332, 13]
            - type: array
              title: array
              description: The array of arrays containing integers that will be turned into an
                embedding.
              minItems: 1
              maxItems: 2048
              items:
                type: array
                minItems: 1
                items:
                  type: integer
              example: [[1212, 318, 257, 1332, 13]]
        model:
          description: >
            ID of the model to use. You can use the [List
            models](/docs/api-reference/models/list) API to see all of your
            available models, or see our [Model overview](/docs/models) for
            descriptions of them.
          example: text-embedding-3-small
          anyOf:
            - type: string
            - type: string
              enum:
                - text-embedding-ada-002
                - text-embedding-3-small
                - text-embedding-3-large
          x-oaiTypeLabel: string
        encoding_format:
          description: The format to return the embeddings in. Can be either `float` or
            [`base64`](https://pypi.org/project/pybase64/).
          example: float
          default: float
          type: string
          enum:
            - float
            - base64
        dimensions:
          description: >
            The number of dimensions the resulting output embeddings should
            have. Only supported in `text-embedding-3` and later models.
          type: integer
          minimum: 1
        user:
          type: string
          example: user-1234
          description: >
            A unique identifier representing your end-user, which can help
            OpenAI to monitor and detect abuse. [Learn
            more](/docs/guides/safety-best-practices#end-user-ids).
      required:
        - model
        - input
    CreateEmbeddingResponse:
      type: object
      properties:
        data:
          type: array
          description: The list of embeddings generated by the model.
          items:
            $ref: "#/components/schemas/Embedding"
        model:
          type: string
          description: The name of the model used to generate the embedding.
        object:
          type: string
          description: The object type, which is always "list".
          enum:
            - list
          x-stainless-const: true
        usage:
          type: object
          description: The usage information for the request.
          properties:
            prompt_tokens:
              type: integer
              description: The number of tokens used by the prompt.
            total_tokens:
              type: integer
              description: The total number of tokens used by the request.
          required:
            - prompt_tokens
            - total_tokens
      required:
        - object
        - model
        - data
        - usage
    CreateFileRequest:
      type: object
      additionalProperties: false
      properties:
        file:
          description: |
            The File object (not file name) to be uploaded.
          type: string
          format: binary
        purpose:
          description: >
            The intended purpose of the uploaded file. One of: - `assistants`:
            Used in the Assistants API - `batch`: Used in the Batch API -
            `fine-tune`: Used for fine-tuning - `vision`: Images used for vision
            fine-tuning - `user_data`: Flexible file type for any purpose -
            `evals`: Used for eval data sets
          type: string
          enum:
            - assistants
            - batch
            - fine-tune
            - vision
            - user_data
            - evals
      required:
        - file
        - purpose
    CreateFineTuningCheckpointPermissionRequest:
      type: object
      additionalProperties: false
      properties:
        project_ids:
          type: array
          description: The project identifiers to grant access to.
          items:
            type: string
      required:
        - project_ids
    CreateFineTuningJobRequest:
      type: object
      properties:
        model:
          description: >
            The name of the model to fine-tune. You can select one of the

            [supported
            models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).
          example: gpt-4o-mini
          anyOf:
            - type: string
            - type: string
              enum:
                - babbage-002
                - davinci-002
                - gpt-3.5-turbo
                - gpt-4o-mini
          x-oaiTypeLabel: string
        training_file:
          description: >
            The ID of an uploaded file that contains training data.


            See [upload file](/docs/api-reference/files/create) for how to
            upload a file.


            Your dataset must be formatted as a JSONL file. Additionally, you
            must upload your file with the purpose `fine-tune`.


            The contents of the file should differ depending on if the model
            uses the [chat](/docs/api-reference/fine-tuning/chat-input),
            [completions](/docs/api-reference/fine-tuning/completions-input)
            format, or if the fine-tuning method uses the
            [preference](/docs/api-reference/fine-tuning/preference-input)
            format.


            See the [fine-tuning guide](/docs/guides/fine-tuning) for more
            details.
          type: string
          example: file-abc123
        hyperparameters:
          type: object
          description: >
            The hyperparameters used for the fine-tuning job.

            This value is now deprecated in favor of `method`, and should be
            passed in under the `method` parameter.
          properties:
            batch_size:
              description: >
                Number of examples in each batch. A larger batch size means that
                model parameters

                are updated less frequently, but with lower variance.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: integer
                  minimum: 1
                  maximum: 256
              default: auto
            learning_rate_multiplier:
              description: >
                Scaling factor for the learning rate. A smaller learning rate
                may be useful to avoid

                overfitting.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: number
                  minimum: 0
                  exclusiveMinimum: true
              default: auto
            n_epochs:
              description: >
                The number of epochs to train the model for. An epoch refers to
                one full cycle

                through the training dataset.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: integer
                  minimum: 1
                  maximum: 50
              default: auto
          deprecated: true
        suffix:
          description: >
            A string of up to 64 characters that will be added to your
            fine-tuned model name.


            For example, a `suffix` of "custom-model-name" would produce a model
            name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
          type: string
          minLength: 1
          maxLength: 64
          default: null
          nullable: true
        validation_file:
          description: >
            The ID of an uploaded file that contains validation data.


            If you provide this file, the data is used to generate validation

            metrics periodically during fine-tuning. These metrics can be viewed
            in

            the fine-tuning results file.

            The same data should not be present in both train and validation
            files.


            Your dataset must be formatted as a JSONL file. You must upload your
            file with the purpose `fine-tune`.


            See the [fine-tuning guide](/docs/guides/fine-tuning) for more
            details.
          type: string
          nullable: true
          example: file-abc123
        integrations:
          type: array
          description: A list of integrations to enable for your fine-tuning job.
          nullable: true
          items:
            type: object
            required:
              - type
              - wandb
            properties:
              type:
                description: >
                  The type of integration to enable. Currently, only "wandb"
                  (Weights and Biases) is supported.
                oneOf:
                  - type: string
                    enum:
                      - wandb
                    x-stainless-const: true
              wandb:
                type: object
                description: >
                  The settings for your integration with Weights and Biases.
                  This payload specifies the project that

                  metrics will be sent to. Optionally, you can set an explicit
                  display name for your run, add tags

                  to your run, and set a default entity (team, username, etc) to
                  be associated with your run.
                required:
                  - project
                properties:
                  project:
                    description: >
                      The name of the project that the new run will be created
                      under.
                    type: string
                    example: my-wandb-project
                  name:
                    description: >
                      A display name to set for the run. If not set, we will use
                      the Job ID as the name.
                    nullable: true
                    type: string
                  entity:
                    description: >
                      The entity to use for the run. This allows you to set the
                      team or username of the WandB user that you would

                      like associated with the run. If not set, the default
                      entity for the registered WandB API key is used.
                    nullable: true
                    type: string
                  tags:
                    description: >
                      A list of tags to be attached to the newly created run.
                      These tags are passed through directly to WandB. Some

                      default tags are generated by OpenAI: "openai/finetune",
                      "openai/{base-model}", "openai/{ftjob-abcdef}".
                    type: array
                    items:
                      type: string
                      example: custom-tag
        seed:
          description: >
            The seed controls the reproducibility of the job. Passing in the
            same seed and job parameters should produce the same results, but
            may differ in rare cases.

            If a seed is not specified, one will be generated for you.
          type: integer
          nullable: true
          minimum: 0
          maximum: 2147483647
          example: 42
        method:
          $ref: "#/components/schemas/FineTuneMethod"
        metadata:
          $ref: "#/components/schemas/Metadata"
      required:
        - model
        - training_file
    CreateImageEditRequest:
      type: object
      properties:
        image:
          anyOf:
            - type: string
              format: binary
            - type: array
              maxItems: 16
              items:
                type: string
                format: binary
          description: >
            The image(s) to edit. Must be a supported image file or an array of
            images.


            For `gpt-image-1`, each image should be a `png`, `webp`, or `jpg`
            file less 

            than 25MB. You can provide up to 16 images.


            For `dall-e-2`, you can only provide one image, and it should be a
            square 

            `png` file less than 4MB.
        prompt:
          description: A text description of the desired image(s). The maximum length is
            1000 characters for `dall-e-2`, and 32000 characters for
            `gpt-image-1`.
          type: string
          example: A cute baby sea otter wearing a beret
        mask:
          description: An additional image whose fully transparent areas (e.g. where alpha
            is zero) indicate where `image` should be edited. If there are
            multiple images provided, the mask will be applied on the first
            image. Must be a valid PNG file, less than 4MB, and have the same
            dimensions as `image`.
          type: string
          format: binary
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
                - gpt-image-1
              x-stainless-const: true
          x-oaiTypeLabel: string
          default: dall-e-2
          example: gpt-image-1
          nullable: true
          description: The model to use for image generation. Only `dall-e-2` and
            `gpt-image-1` are supported. Defaults to `dall-e-2` unless a
            parameter specific to `gpt-image-1` is used.
        n:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          example: 1
          nullable: true
          description: The number of images to generate. Must be between 1 and 10.
        size:
          type: string
          enum:
            - 256x256
            - 512x512
            - 1024x1024
            - 1536x1024
            - 1024x1536
            - auto
          default: 1024x1024
          example: 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `1024x1024`,
            `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default
            value) for `gpt-image-1`, and one of `256x256`, `512x512`, or
            `1024x1024` for `dall-e-2`.
        response_format:
          type: string
          enum:
            - url
            - b64_json
          default: url
          example: url
          nullable: true
          description: The format in which the generated images are returned. Must be one
            of `url` or `b64_json`. URLs are only valid for 60 minutes after the
            image has been generated. This parameter is only supported for
            `dall-e-2`, as `gpt-image-1` will always return base64-encoded
            images.
        user:
          type: string
          example: user-1234
          description: >
            A unique identifier representing your end-user, which can help
            OpenAI to monitor and detect abuse. [Learn
            more](/docs/guides/safety-best-practices#end-user-ids).
        quality:
          type: string
          enum:
            - standard
            - low
            - medium
            - high
            - auto
          default: auto
          example: high
          nullable: true
          description: >
            The quality of the image that will be generated. `high`, `medium`
            and `low` are only supported for `gpt-image-1`. `dall-e-2` only
            supports `standard` quality. Defaults to `auto`.
      required:
        - prompt
        - image
    CreateImageRequest:
      type: object
      properties:
        prompt:
          description: A text description of the desired image(s). The maximum length is
            32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2`
            and 4000 characters for `dall-e-3`.
          type: string
          example: A cute baby sea otter
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
                - dall-e-3
                - gpt-image-1
          x-oaiTypeLabel: string
          default: dall-e-2
          example: gpt-image-1
          nullable: true
          description: The model to use for image generation. One of `dall-e-2`,
            `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a
            parameter specific to `gpt-image-1` is used.
        n:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          example: 1
          nullable: true
          description: The number of images to generate. Must be between 1 and 10. For
            `dall-e-3`, only `n=1` is supported.
        quality:
          type: string
          enum:
            - standard
            - hd
            - low
            - medium
            - high
            - auto
          default: auto
          example: medium
          nullable: true
          description: >
            The quality of the image that will be generated. 


            - `auto` (default value) will automatically select the best quality
            for the given model.

            - `high`, `medium` and `low` are supported for `gpt-image-1`.

            - `hd` and `standard` are supported for `dall-e-3`.

            - `standard` is the only option for `dall-e-2`.
        response_format:
          type: string
          enum:
            - url
            - b64_json
          default: url
          example: url
          nullable: true
          description: The format in which generated images with `dall-e-2` and `dall-e-3`
            are returned. Must be one of `url` or `b64_json`. URLs are only
            valid for 60 minutes after the image has been generated. This
            parameter isn't supported for `gpt-image-1` which will always return
            base64-encoded images.
        output_format:
          type: string
          enum:
            - png
            - jpeg
            - webp
          default: png
          example: png
          nullable: true
          description: The format in which the generated images are returned. This
            parameter is only supported for `gpt-image-1`. Must be one of `png`,
            `jpeg`, or `webp`.
        output_compression:
          type: integer
          default: 100
          example: 100
          nullable: true
          description: The compression level (0-100%) for the generated images. This
            parameter is only supported for `gpt-image-1` with the `webp` or
            `jpeg` output formats, and defaults to 100.
        size:
          type: string
          enum:
            - auto
            - 1024x1024
            - 1536x1024
            - 1024x1536
            - 256x256
            - 512x512
            - 1792x1024
            - 1024x1792
          default: auto
          example: 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `1024x1024`,
            `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default
            value) for `gpt-image-1`, one of `256x256`, `512x512`, or
            `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or
            `1024x1792` for `dall-e-3`.
        moderation:
          type: string
          enum:
            - low
            - auto
          default: auto
          example: low
          nullable: true
          description: Control the content-moderation level for images generated by
            `gpt-image-1`. Must be either `low` for less restrictive filtering
            or `auto` (default value).
        background:
          type: string
          enum:
            - transparent
            - opaque
            - auto
          default: auto
          example: transparent
          nullable: true
          description: >
            Allows to set transparency for the background of the generated
            image(s). 

            This parameter is only supported for `gpt-image-1`. Must be one of 

            `transparent`, `opaque` or `auto` (default value). When `auto` is
            used, the 

            model will automatically determine the best background for the
            image.


            If `transparent`, the output format needs to support transparency,
            so it 

            should be set to either `png` (default value) or `webp`.
        style:
          type: string
          enum:
            - vivid
            - natural
          default: vivid
          example: vivid
          nullable: true
          description: The style of the generated images. This parameter is only supported
            for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes
            the model to lean towards generating hyper-real and dramatic images.
            Natural causes the model to produce more natural, less hyper-real
            looking images.
        user:
          type: string
          example: user-1234
          description: >
            A unique identifier representing your end-user, which can help
            OpenAI to monitor and detect abuse. [Learn
            more](/docs/guides/safety-best-practices#end-user-ids).
      required:
        - prompt
    CreateImageVariationRequest:
      type: object
      properties:
        image:
          description: The image to use as the basis for the variation(s). Must be a valid
            PNG file, less than 4MB, and square.
          type: string
          format: binary
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
              x-stainless-const: true
          x-oaiTypeLabel: string
          default: dall-e-2
          example: dall-e-2
          nullable: true
          description: The model to use for image generation. Only `dall-e-2` is supported
            at this time.
        n:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          example: 1
          nullable: true
          description: The number of images to generate. Must be between 1 and 10.
        response_format:
          type: string
          enum:
            - url
            - b64_json
          default: url
          example: url
          nullable: true
          description: The format in which the generated images are returned. Must be one
            of `url` or `b64_json`. URLs are only valid for 60 minutes after the
            image has been generated.
        size:
          type: string
          enum:
            - 256x256
            - 512x512
            - 1024x1024
          default: 1024x1024
          example: 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `256x256`,
            `512x512`, or `1024x1024`.
        user:
          type: string
          example: user-1234
          description: >
            A unique identifier representing your end-user, which can help
            OpenAI to monitor and detect abuse. [Learn
            more](/docs/guides/safety-best-practices#end-user-ids).
      required:
        - image
    CreateModelResponseProperties:
      allOf:
        - $ref: "#/components/schemas/ModelResponseProperties"
    CreateModerationRequest:
      type: object
      properties:
        input:
          description: >
            Input (or inputs) to classify. Can be a single string, an array of
            strings, or

            an array of multi-modal input objects similar to other models.
          oneOf:
            - type: string
              description: A string of text to classify for moderation.
              default: ""
              example: I want to kill them.
            - type: array
              description: An array of strings to classify for moderation.
              items:
                type: string
                default: ""
                example: I want to kill them.
            - type: array
              description: An array of multi-modal inputs to the moderation model.
              items:
                oneOf:
                  - type: object
                    description: An object describing an image to classify.
                    properties:
                      type:
                        description: Always `image_url`.
                        type: string
                        enum:
                          - image_url
                        x-stainless-const: true
                      image_url:
                        type: object
                        description: Contains either an image URL or a data URL for a base64 encoded
                          image.
                        properties:
                          url:
                            type: string
                            description: Either a URL of the image or the base64 encoded image data.
                            format: uri
                            example: https://example.com/image.jpg
                        required:
                          - url
                    required:
                      - type
                      - image_url
                  - type: object
                    description: An object describing text to classify.
                    properties:
                      type:
                        description: Always `text`.
                        type: string
                        enum:
                          - text
                        x-stainless-const: true
                      text:
                        description: A string of text to classify.
                        type: string
                        example: I want to kill them
                    required:
                      - type
                      - text
        model:
          description: |
            The content moderation model you would like to use. Learn more in
            [the moderation guide](/docs/guides/moderation), and learn about
            available models [here](/docs/models#moderation).
          nullable: false
          default: omni-moderation-latest
          example: omni-moderation-2024-09-26
          anyOf:
            - type: string
            - type: string
              enum:
                - omni-moderation-latest
                - omni-moderation-2024-09-26
                - text-moderation-latest
                - text-moderation-stable
          x-oaiTypeLabel: string
      required:
        - input
    CreateModerationResponse:
      type: object
      description: Represents if a given text input is potentially harmful.
      properties:
        id:
          type: string
          description: The unique identifier for the moderation request.
        model:
          type: string
          description: The model used to generate the moderation results.
        results:
          type: array
          description: A list of moderation objects.
          items:
            type: object
            properties:
              flagged:
                type: boolean
                description: Whether any of the below categories are flagged.
              categories:
                type: object
                description: A list of the categories, and whether they are flagged or not.
                properties:
                  hate:
                    type: boolean
                    description: Content that expresses, incites, or promotes hate based on race,
                      gender, ethnicity, religion, nationality, sexual
                      orientation, disability status, or caste. Hateful content
                      aimed at non-protected groups (e.g., chess players) is
                      harassment.
                  hate/threatening:
                    type: boolean
                    description: Hateful content that also includes violence or serious harm towards
                      the targeted group based on race, gender, ethnicity,
                      religion, nationality, sexual orientation, disability
                      status, or caste.
                  harassment:
                    type: boolean
                    description: Content that expresses, incites, or promotes harassing language
                      towards any target.
                  harassment/threatening:
                    type: boolean
                    description: Harassment content that also includes violence or serious harm
                      towards any target.
                  illicit:
                    type: boolean
                    nullable: true
                    description: Content that includes instructions or advice that facilitate the
                      planning or execution of wrongdoing, or that gives advice
                      or instruction on how to commit illicit acts. For example,
                      "how to shoplift" would fit this category.
                  illicit/violent:
                    type: boolean
                    nullable: true
                    description: Content that includes instructions or advice that facilitate the
                      planning or execution of wrongdoing that also includes
                      violence, or that gives advice or instruction on the
                      procurement of any weapon.
                  self-harm:
                    type: boolean
                    description: Content that promotes, encourages, or depicts acts of self-harm,
                      such as suicide, cutting, and eating disorders.
                  self-harm/intent:
                    type: boolean
                    description: Content where the speaker expresses that they are engaging or
                      intend to engage in acts of self-harm, such as suicide,
                      cutting, and eating disorders.
                  self-harm/instructions:
                    type: boolean
                    description: Content that encourages performing acts of self-harm, such as
                      suicide, cutting, and eating disorders, or that gives
                      instructions or advice on how to commit such acts.
                  sexual:
                    type: boolean
                    description: Content meant to arouse sexual excitement, such as the description
                      of sexual activity, or that promotes sexual services
                      (excluding sex education and wellness).
                  sexual/minors:
                    type: boolean
                    description: Sexual content that includes an individual who is under 18 years
                      old.
                  violence:
                    type: boolean
                    description: Content that depicts death, violence, or physical injury.
                  violence/graphic:
                    type: boolean
                    description: Content that depicts death, violence, or physical injury in graphic
                      detail.
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - illicit
                  - illicit/violent
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
              category_scores:
                type: object
                description: A list of the categories along with their scores as predicted by
                  model.
                properties:
                  hate:
                    type: number
                    description: The score for the category 'hate'.
                  hate/threatening:
                    type: number
                    description: The score for the category 'hate/threatening'.
                  harassment:
                    type: number
                    description: The score for the category 'harassment'.
                  harassment/threatening:
                    type: number
                    description: The score for the category 'harassment/threatening'.
                  illicit:
                    type: number
                    description: The score for the category 'illicit'.
                  illicit/violent:
                    type: number
                    description: The score for the category 'illicit/violent'.
                  self-harm:
                    type: number
                    description: The score for the category 'self-harm'.
                  self-harm/intent:
                    type: number
                    description: The score for the category 'self-harm/intent'.
                  self-harm/instructions:
                    type: number
                    description: The score for the category 'self-harm/instructions'.
                  sexual:
                    type: number
                    description: The score for the category 'sexual'.
                  sexual/minors:
                    type: number
                    description: The score for the category 'sexual/minors'.
                  violence:
                    type: number
                    description: The score for the category 'violence'.
                  violence/graphic:
                    type: number
                    description: The score for the category 'violence/graphic'.
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - illicit
                  - illicit/violent
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
              category_applied_input_types:
                type: object
                description: A list of the categories along with the input type(s) that the
                  score applies to.
                properties:
                  hate:
                    type: array
                    description: The applied input type(s) for the category 'hate'.
                    items:
                      type: string
                      enum:
                        - text
                      x-stainless-const: true
                  hate/threatening:
                    type: array
                    description: The applied input type(s) for the category 'hate/threatening'.
                    items:
                      type: string
                      enum:
                        - text
                      x-stainless-const: true
                  harassment:
                    type: array
                    description: The applied input type(s) for the category 'harassment'.
                    items:
                      type: string
                      enum:
                        - text
                      x-stainless-const: true
                  harassment/threatening:
                    type: array
                    description: The applied input type(s) for the category
                      'harassment/threatening'.
                    items:
                      type: string
                      enum:
                        - text
                      x-stainless-const: true
                  illicit:
                    type: array
                    description: The applied input type(s) for the category 'illicit'.
                    items:
                      type: string
                      enum:
                        - text
                      x-stainless-const: true
                  illicit/violent:
                    type: array
                    description: The applied input type(s) for the category 'illicit/violent'.
                    items:
                      type: string
                      enum:
                        - text
                      x-stainless-const: true
                  self-harm:
                    type: array
                    description: The applied input type(s) for the category 'self-harm'.
                    items:
                      type: string
                      enum:
                        - text
                        - image
                  self-harm/intent:
                    type: array
                    description: The applied input type(s) for the category 'self-harm/intent'.
                    items:
                      type: string
                      enum:
                        - text
                        - image
                  self-harm/instructions:
                    type: array
                    description: The applied input type(s) for the category
                      'self-harm/instructions'.
                    items:
                      type: string
                      enum:
                        - text
                        - image
                  sexual:
                    type: array
                    description: The applied input type(s) for the category 'sexual'.
                    items:
                      type: string
                      enum:
                        - text
                        - image
                  sexual/minors:
                    type: array
                    description: The applied input type(s) for the category 'sexual/minors'.
                    items:
                      type: string
                      enum:
                        - text
                      x-stainless-const: true
                  violence:
                    type: array
                    description: The applied input type(s) for the category 'violence'.
                    items:
                      type: string
                      enum:
                        - text
                        - image
                  violence/graphic:
                    type: array
                    description: The applied input type(s) for the category 'violence/graphic'.
                    items:
                      type: string
                      enum:
                        - text
                        - image
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - illicit
                  - illicit/violent
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
            required:
              - flagged
              - categories
              - category_scores
              - category_applied_input_types
      required:
        - id
        - model
        - results
      x-oaiMeta:
        name: The moderation object
        example: |
          {
            "id": "modr-0d9740456c391e43c445bf0f010940c7",
            "model": "omni-moderation-latest",
            "results": [
              {
                "flagged": true,
                "categories": {
                  "harassment": true,
                  "harassment/threatening": true,
                  "sexual": false,
                  "hate": false,
                  "hate/threatening": false,
                  "illicit": false,
                  "illicit/violent": false,
                  "self-harm/intent": false,
                  "self-harm/instructions": false,
                  "self-harm": false,
                  "sexual/minors": false,
                  "violence": true,
                  "violence/graphic": true
                },
                "category_scores": {
                  "harassment": 0.8189693396524255,
                  "harassment/threatening": 0.804985420696006,
                  "sexual": 1.573112165348997e-6,
                  "hate": 0.007562942636942845,
                  "hate/threatening": 0.004208854591835476,
                  "illicit": 0.030535955153511665,
                  "illicit/violent": 0.008925306722380033,
                  "self-harm/intent": 0.00023023930975076432,
                  "self-harm/instructions": 0.0002293869201073356,
                  "self-harm": 0.012598046106750154,
                  "sexual/minors": 2.212566909570261e-8,
                  "violence": 0.9999992735124786,
                  "violence/graphic": 0.843064871157054
                },
                "category_applied_input_types": {
                  "harassment": [
                    "text"
                  ],
                  "harassment/threatening": [
                    "text"
                  ],
                  "sexual": [
                    "text",
                    "image"
                  ],
                  "hate": [
                    "text"
                  ],
                  "hate/threatening": [
                    "text"
                  ],
                  "illicit": [
                    "text"
                  ],
                  "illicit/violent": [
                    "text"
                  ],
                  "self-harm/intent": [
                    "text",
                    "image"
                  ],
                  "self-harm/instructions": [
                    "text",
                    "image"
                  ],
                  "self-harm": [
                    "text",
                    "image"
                  ],
                  "sexual/minors": [
                    "text"
                  ],
                  "violence": [
                    "text",
                    "image"
                  ],
                  "violence/graphic": [
                    "text",
                    "image"
                  ]
                }
              }
            ]
          }
    DeleteCertificateResponse:
      type: object
      properties:
        object:
          type: string
          description: The object type, must be `certificate.deleted`.
          enum:
            - certificate.deleted
          x-stainless-const: true
        id:
          type: string
          description: The ID of the certificate that was deleted.
      required:
        - object
        - id
    DeleteFileResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum:
            - file
          x-stainless-const: true
        deleted:
          type: boolean
      required:
        - id
        - object
        - deleted
    DeleteFineTuningCheckpointPermissionResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the fine-tuned model checkpoint permission that was
            deleted.
        object:
          type: string
          description: The object type, which is always "checkpoint.permission".
          enum:
            - checkpoint.permission
          x-stainless-const: true
        deleted:
          type: boolean
          description: Whether the fine-tuned model checkpoint permission was successfully
            deleted.
      required:
        - id
        - object
        - deleted
    DeleteMessageResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - thread.message.deleted
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
    DeleteModelResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
      required:
        - id
        - object
        - deleted
    DeleteThreadResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - thread.deleted
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
    DeleteVectorStoreFileResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - vector_store.file.deleted
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
    DeleteVectorStoreResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - vector_store.deleted
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
    DoneEvent:
      type: object
      properties:
        event:
          type: string
          enum:
            - done
          x-stainless-const: true
        data:
          type: string
          enum:
            - "[DONE]"
          x-stainless-const: true
      required:
        - event
        - data
      description: Occurs when a stream ends.
      x-oaiMeta:
        dataDescription: "`data` is `[DONE]`"
    DoubleClick:
      type: object
      title: DoubleClick
      description: |
        A double click action.
      properties:
        type:
          type: string
          enum:
            - double_click
          default: double_click
          description: >
            Specifies the event type. For a double click action, this property
            is 

            always set to `double_click`.
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate where the double click occurred.
        y:
          type: integer
          description: |
            The y-coordinate where the double click occurred.
      required:
        - type
        - x
        - y
    Drag:
      type: object
      title: Drag
      description: |
        A drag action.
      properties:
        type:
          type: string
          enum:
            - drag
          default: drag
          description: |
            Specifies the event type. For a drag action, this property is 
            always set to `drag`.
          x-stainless-const: true
        path:
          type: array
          description: >
            An array of coordinates representing the path of the drag action.
            Coordinates will appear as an array

            of objects, eg

            ```

            [
              { x: 100, y: 200 },
              { x: 200, y: 300 }
            ]

            ```
          items:
            title: Drag path coordinates
            description: |
              A series of x/y coordinate pairs in the drag path.
            $ref: "#/components/schemas/Coordinate"
      required:
        - type
        - path
    EasyInputMessage:
      type: object
      title: Input message
      description: >
        A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role. Messages with
        the

        `assistant` role are presumed to have been generated by the model in
        previous

        interactions.
      properties:
        role:
          type: string
          description: >
            The role of the message input. One of `user`, `assistant`, `system`,
            or

            `developer`.
          enum:
            - user
            - assistant
            - system
            - developer
        content:
          description: >
            Text, image, or audio input to the model, used to generate a
            response.

            Can also contain previous assistant responses.
          oneOf:
            - type: string
              title: Text input
              description: |
                A text input to the model.
            - $ref: "#/components/schemas/InputMessageContentList"
        type:
          type: string
          description: |
            The type of the message input. Always `message`.
          enum:
            - message
          x-stainless-const: true
      required:
        - role
        - content
    Embedding:
      type: object
      description: |
        Represents an embedding vector returned by embedding endpoint.
      properties:
        index:
          type: integer
          description: The index of the embedding in the list of embeddings.
        embedding:
          type: array
          description: >
            The embedding vector, which is a list of floats. The length of
            vector depends on the model as listed in the [embedding
            guide](/docs/guides/embeddings).
          items:
            type: number
        object:
          type: string
          description: The object type, which is always "embedding".
          enum:
            - embedding
          x-stainless-const: true
      required:
        - index
        - object
        - embedding
      x-oaiMeta:
        name: The embedding object
        example: |
          {
            "object": "embedding",
            "embedding": [
              0.0023064255,
              -0.009327292,
              .... (1536 floats total for ada-002)
              -0.0028842222,
            ],
            "index": 0
          }
    Error:
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: false
        param:
          type: string
          nullable: true
        type:
          type: string
          nullable: false
      required:
        - type
        - message
        - param
        - code
    ErrorEvent:
      type: object
      properties:
        event:
          type: string
          enum:
            - error
          x-stainless-const: true
        data:
          $ref: "#/components/schemas/Error"
      required:
        - event
        - data
      description: Occurs when an [error](/docs/guides/error-codes#api-errors) occurs.
        This can happen due to an internal server error or a timeout.
      x-oaiMeta:
        dataDescription: "`data` is an [error](/docs/guides/error-codes#api-errors)"
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
      required:
        - error
    FilePath:
      type: object
      title: File path
      description: |
        A path to a file.
      properties:
        type:
          type: string
          description: |
            The type of the file path. Always `file_path`.
          enum:
            - file_path
          x-stainless-const: true
        file_id:
          type: string
          description: |
            The ID of the file.
        index:
          type: integer
          description: |
            The index of the file in the list of files.
      required:
        - type
        - file_id
        - index
    FileSearchRanker:
      type: string
      description: The ranker to use for the file search. If not specified will use
        the `auto` ranker.
      enum:
        - auto
        - default_2024_08_21
    FileSearchRankingOptions:
      title: File search tool call ranking options
      type: object
      description: |
        The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.

        See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
      properties:
        ranker:
          $ref: "#/components/schemas/FileSearchRanker"
        score_threshold:
          type: number
          description: The score threshold for the file search. All values must be a
            floating point number between 0 and 1.
          minimum: 0
          maximum: 1
      required:
        - score_threshold
    FineTuneChatCompletionRequestAssistantMessage:
      allOf:
        - type: object
          title: Assistant message
          deprecated: false
          properties:
            weight:
              type: integer
              enum:
                - 0
                - 1
              description: Controls whether the assistant message is trained against (0 or 1)
        - $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage"
      required:
        - role
    FineTuneChatRequestInput:
      type: object
      description: The per-line training example of a fine-tuning input file for chat
        models using the supervised method.
      properties:
        messages:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: "#/components/schemas/ChatCompletionRequestSystemMessage"
              - $ref: "#/components/schemas/ChatCompletionRequestUserMessage"
              - $ref: "#/components/schemas/FineTuneChatCompletionRequestAssistantMessage"
              - $ref: "#/components/schemas/ChatCompletionRequestToolMessage"
              - $ref: "#/components/schemas/ChatCompletionRequestFunctionMessage"
        tools:
          type: array
          description: A list of tools the model may generate JSON inputs for.
          items:
            $ref: "#/components/schemas/ChatCompletionTool"
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        functions:
          deprecated: true
          description: A list of functions the model may generate JSON inputs for.
          type: array
          minItems: 1
          maxItems: 128
          items:
            $ref: "#/components/schemas/ChatCompletionFunctions"
      x-oaiMeta:
        name: Training format for chat models using the supervised method
        example: >
          {
            "messages": [
              { "role": "user", "content": "What is the weather in San Francisco?" },
              {
                "role": "assistant",
                "tool_calls": [
                  {
                    "id": "call_id",
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "arguments": "{\"location\": \"San Francisco, USA\", \"format\": \"celsius\"}"
                    }
                  }
                ]
              }
            ],
            "parallel_tool_calls": false,
            "tools": [
              {
                "type": "function",
                "function": {
                  "name": "get_current_weather",
                  "description": "Get the current weather",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "location": {
                          "type": "string",
                          "description": "The city and country, eg. San Francisco, USA"
                      },
                      "format": { "type": "string", "enum": ["celsius", "fahrenheit"] }
                    },
                    "required": ["location", "format"]
                  }
                }
              }
            ]
          }
    FineTuneCompletionRequestInput:
      type: object
      description: The per-line training example of a fine-tuning input file for
        completions models
      properties:
        prompt:
          type: string
          description: The input prompt for this training example.
        completion:
          type: string
          description: The desired completion for this training example.
      x-oaiMeta:
        name: Training format for completions models
        example: |
          {
            "prompt": "What is the answer to 2+2",
            "completion": "4"
          }
    FineTuneDPOMethod:
      type: object
      description: Configuration for the DPO fine-tuning method.
      properties:
        hyperparameters:
          type: object
          description: The hyperparameters used for the fine-tuning job.
          properties:
            beta:
              description: >
                The beta value for the DPO method. A higher beta value will
                increase the weight of the penalty between the policy and
                reference model.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: number
                  minimum: 0
                  maximum: 2
                  exclusiveMinimum: true
              default: auto
            batch_size:
              description: >
                Number of examples in each batch. A larger batch size means that
                model parameters are updated less frequently, but with lower
                variance.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: integer
                  minimum: 1
                  maximum: 256
              default: auto
            learning_rate_multiplier:
              description: >
                Scaling factor for the learning rate. A smaller learning rate
                may be useful to avoid overfitting.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: number
                  minimum: 0
                  exclusiveMinimum: true
              default: auto
            n_epochs:
              description: >
                The number of epochs to train the model for. An epoch refers to
                one full cycle through the training dataset.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: integer
                  minimum: 1
                  maximum: 50
              default: auto
    FineTuneMethod:
      type: object
      description: The method used for fine-tuning.
      properties:
        type:
          type: string
          description: The type of method. Is either `supervised` or `dpo`.
          enum:
            - supervised
            - dpo
        supervised:
          $ref: "#/components/schemas/FineTuneSupervisedMethod"
        dpo:
          $ref: "#/components/schemas/FineTuneDPOMethod"
    FineTunePreferenceRequestInput:
      type: object
      description: The per-line training example of a fine-tuning input file for chat
        models using the dpo method.
      properties:
        input:
          type: object
          properties:
            messages:
              type: array
              minItems: 1
              items:
                oneOf:
                  - $ref: "#/components/schemas/ChatCompletionRequestSystemMessage"
                  - $ref: "#/components/schemas/ChatCompletionRequestUserMessage"
                  - $ref: "#/components/schemas/FineTuneChatCompletionRequestAssistantMessage"
                  - $ref: "#/components/schemas/ChatCompletionRequestToolMessage"
                  - $ref: "#/components/schemas/ChatCompletionRequestFunctionMessage"
            tools:
              type: array
              description: A list of tools the model may generate JSON inputs for.
              items:
                $ref: "#/components/schemas/ChatCompletionTool"
            parallel_tool_calls:
              $ref: "#/components/schemas/ParallelToolCalls"
        preferred_completion:
          type: array
          description: The preferred completion message for the output.
          maxItems: 1
          items:
            oneOf:
              - $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage"
        non_preferred_completion:
          type: array
          description: The non-preferred completion message for the output.
          maxItems: 1
          items:
            oneOf:
              - $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage"
      x-oaiMeta:
        name: Training format for chat models using the preference method
        example: >
          {
            "input": {
              "messages": [
                { "role": "user", "content": "What is the weather in San Francisco?" }
              ]
            },
            "preferred_completion": [
              {
                "role": "assistant",
                "content": "The weather in San Francisco is 70 degrees Fahrenheit."
              }
            ],
            "non_preferred_completion": [
              {
                "role": "assistant",
                "content": "The weather in San Francisco is 21 degrees Celsius."
              }
            ]
          }
    FineTuneSupervisedMethod:
      type: object
      description: Configuration for the supervised fine-tuning method.
      properties:
        hyperparameters:
          type: object
          description: The hyperparameters used for the fine-tuning job.
          properties:
            batch_size:
              description: >
                Number of examples in each batch. A larger batch size means that
                model parameters are updated less frequently, but with lower
                variance.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: integer
                  minimum: 1
                  maximum: 256
              default: auto
            learning_rate_multiplier:
              description: >
                Scaling factor for the learning rate. A smaller learning rate
                may be useful to avoid overfitting.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: number
                  minimum: 0
                  exclusiveMinimum: true
              default: auto
            n_epochs:
              description: >
                The number of epochs to train the model for. An epoch refers to
                one full cycle through the training dataset.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: integer
                  minimum: 1
                  maximum: 50
              default: auto
    FineTuningCheckpointPermission:
      type: object
      title: FineTuningCheckpointPermission
      description: >
        The `checkpoint.permission` object represents a permission for a
        fine-tuned model checkpoint.
      properties:
        id:
          type: string
          description: The permission identifier, which can be referenced in the API
            endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the permission was created.
        project_id:
          type: string
          description: The project identifier that the permission is for.
        object:
          type: string
          description: The object type, which is always "checkpoint.permission".
          enum:
            - checkpoint.permission
          x-stainless-const: true
      required:
        - created_at
        - id
        - object
        - project_id
      x-oaiMeta:
        name: The fine-tuned model checkpoint permission object
        example: |
          {
            "object": "checkpoint.permission",
            "id": "cp_zc4Q7MP6XxulcVzj4MZdwsAB",
            "created_at": 1712211699,
            "project_id": "proj_abGMw1llN8IrBb6SvvY5A1iH"
          }
    FineTuningIntegration:
      type: object
      title: Fine-Tuning Job Integration
      required:
        - type
        - wandb
      properties:
        type:
          type: string
          description: The type of the integration being enabled for the fine-tuning job
          enum:
            - wandb
          x-stainless-const: true
        wandb:
          type: object
          description: >
            The settings for your integration with Weights and Biases. This
            payload specifies the project that

            metrics will be sent to. Optionally, you can set an explicit display
            name for your run, add tags

            to your run, and set a default entity (team, username, etc) to be
            associated with your run.
          required:
            - project
          properties:
            project:
              description: |
                The name of the project that the new run will be created under.
              type: string
              example: my-wandb-project
            name:
              description: >
                A display name to set for the run. If not set, we will use the
                Job ID as the name.
              nullable: true
              type: string
            entity:
              description: >
                The entity to use for the run. This allows you to set the team
                or username of the WandB user that you would

                like associated with the run. If not set, the default entity for
                the registered WandB API key is used.
              nullable: true
              type: string
            tags:
              description: >
                A list of tags to be attached to the newly created run. These
                tags are passed through directly to WandB. Some

                default tags are generated by OpenAI: "openai/finetune",
                "openai/{base-model}", "openai/{ftjob-abcdef}".
              type: array
              items:
                type: string
                example: custom-tag
    FineTuningJob:
      type: object
      title: FineTuningJob
      description: >
        The `fine_tuning.job` object represents a fine-tuning job that has been
        created through the API.
      properties:
        id:
          type: string
          description: The object identifier, which can be referenced in the API endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the fine-tuning job was
            created.
        error:
          type: object
          nullable: true
          description: For fine-tuning jobs that have `failed`, this will contain more
            information on the cause of the failure.
          properties:
            code:
              type: string
              description: A machine-readable error code.
            message:
              type: string
              description: A human-readable error message.
            param:
              type: string
              description: The parameter that was invalid, usually `training_file` or
                `validation_file`. This field will be null if the failure was
                not parameter-specific.
              nullable: true
          required:
            - code
            - message
            - param
        fine_tuned_model:
          type: string
          nullable: true
          description: The name of the fine-tuned model that is being created. The value
            will be null if the fine-tuning job is still running.
        finished_at:
          type: integer
          nullable: true
          description: The Unix timestamp (in seconds) for when the fine-tuning job was
            finished. The value will be null if the fine-tuning job is still
            running.
        hyperparameters:
          type: object
          description: The hyperparameters used for the fine-tuning job. This value will
            only be returned when running `supervised` jobs.
          properties:
            batch_size:
              description: >
                Number of examples in each batch. A larger batch size means that
                model parameters

                are updated less frequently, but with lower variance.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: integer
                  minimum: 1
                  maximum: 256
              default: auto
            learning_rate_multiplier:
              description: >
                Scaling factor for the learning rate. A smaller learning rate
                may be useful to avoid

                overfitting.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: number
                  minimum: 0
                  exclusiveMinimum: true
              default: auto
            n_epochs:
              description: >
                The number of epochs to train the model for. An epoch refers to
                one full cycle

                through the training dataset.
              oneOf:
                - type: string
                  enum:
                    - auto
                  x-stainless-const: true
                - type: integer
                  minimum: 1
                  maximum: 50
              default: auto
        model:
          type: string
          description: The base model that is being fine-tuned.
        object:
          type: string
          description: The object type, which is always "fine_tuning.job".
          enum:
            - fine_tuning.job
          x-stainless-const: true
        organization_id:
          type: string
          description: The organization that owns the fine-tuning job.
        result_files:
          type: array
          description: The compiled results file ID(s) for the fine-tuning job. You can
            retrieve the results with the [Files
            API](/docs/api-reference/files/retrieve-contents).
          items:
            type: string
            example: file-abc123
        status:
          type: string
          description: The current status of the fine-tuning job, which can be either
            `validating_files`, `queued`, `running`, `succeeded`, `failed`, or
            `cancelled`.
          enum:
            - validating_files
            - queued
            - running
            - succeeded
            - failed
            - cancelled
        trained_tokens:
          type: integer
          nullable: true
          description: The total number of billable tokens processed by this fine-tuning
            job. The value will be null if the fine-tuning job is still running.
        training_file:
          type: string
          description: The file ID used for training. You can retrieve the training data
            with the [Files API](/docs/api-reference/files/retrieve-contents).
        validation_file:
          type: string
          nullable: true
          description: The file ID used for validation. You can retrieve the validation
            results with the [Files
            API](/docs/api-reference/files/retrieve-contents).
        integrations:
          type: array
          nullable: true
          description: A list of integrations to enable for this fine-tuning job.
          maxItems: 5
          items:
            oneOf:
              - $ref: "#/components/schemas/FineTuningIntegration"
        seed:
          type: integer
          description: The seed used for the fine-tuning job.
        estimated_finish:
          type: integer
          nullable: true
          description: The Unix timestamp (in seconds) for when the fine-tuning job is
            estimated to finish. The value will be null if the fine-tuning job
            is not running.
        method:
          $ref: "#/components/schemas/FineTuneMethod"
        metadata:
          $ref: "#/components/schemas/Metadata"
      required:
        - created_at
        - error
        - finished_at
        - fine_tuned_model
        - hyperparameters
        - id
        - model
        - object
        - organization_id
        - result_files
        - status
        - trained_tokens
        - training_file
        - validation_file
        - seed
      x-oaiMeta:
        name: The fine-tuning job object
        example: |
          {
            "object": "fine_tuning.job",
            "id": "ftjob-abc123",
            "model": "davinci-002",
            "created_at": 1692661014,
            "finished_at": 1692661190,
            "fine_tuned_model": "ft:davinci-002:my-org:custom_suffix:7q8mpxmy",
            "organization_id": "org-123",
            "result_files": [
                "file-abc123"
            ],
            "status": "succeeded",
            "validation_file": null,
            "training_file": "file-abc123",
            "hyperparameters": {
                "n_epochs": 4,
                "batch_size": 1,
                "learning_rate_multiplier": 1.0
            },
            "trained_tokens": 5768,
            "integrations": [],
            "seed": 0,
            "estimated_finish": 0,
            "method": {
              "type": "supervised",
              "supervised": {
                "hyperparameters": {
                  "n_epochs": 4,
                  "batch_size": 1,
                  "learning_rate_multiplier": 1.0
                }
              }
            },
            "metadata": {
              "key": "value"
            }
          }
    FineTuningJobCheckpoint:
      type: object
      title: FineTuningJobCheckpoint
      description: >
        The `fine_tuning.job.checkpoint` object represents a model checkpoint
        for a fine-tuning job that is ready to use.
      properties:
        id:
          type: string
          description: The checkpoint identifier, which can be referenced in the API
            endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the checkpoint was created.
        fine_tuned_model_checkpoint:
          type: string
          description: The name of the fine-tuned checkpoint model that is created.
        step_number:
          type: integer
          description: The step number that the checkpoint was created at.
        metrics:
          type: object
          description: Metrics at the step number during the fine-tuning job.
          properties:
            step:
              type: number
            train_loss:
              type: number
            train_mean_token_accuracy:
              type: number
            valid_loss:
              type: number
            valid_mean_token_accuracy:
              type: number
            full_valid_loss:
              type: number
            full_valid_mean_token_accuracy:
              type: number
        fine_tuning_job_id:
          type: string
          description: The name of the fine-tuning job that this checkpoint was created
            from.
        object:
          type: string
          description: The object type, which is always "fine_tuning.job.checkpoint".
          enum:
            - fine_tuning.job.checkpoint
          x-stainless-const: true
      required:
        - created_at
        - fine_tuning_job_id
        - fine_tuned_model_checkpoint
        - id
        - metrics
        - object
        - step_number
      x-oaiMeta:
        name: The fine-tuning job checkpoint object
        example: >
          {
            "object": "fine_tuning.job.checkpoint",
            "id": "ftckpt_qtZ5Gyk4BLq1SfLFWp3RtO3P",
            "created_at": 1712211699,
            "fine_tuned_model_checkpoint": "ft:gpt-4o-mini-2024-07-18:my-org:custom_suffix:9ABel2dg:ckpt-step-88",
            "fine_tuning_job_id": "ftjob-fpbNQ3H1GrMehXRf8cO97xTN",
            "metrics": {
              "step": 88,
              "train_loss": 0.478,
              "train_mean_token_accuracy": 0.924,
              "valid_loss": 10.112,
              "valid_mean_token_accuracy": 0.145,
              "full_valid_loss": 0.567,
              "full_valid_mean_token_accuracy": 0.944
            },
            "step_number": 88
          }
    FineTuningJobEvent:
      type: object
      description: Fine-tuning job event object
      properties:
        object:
          type: string
          description: The object type, which is always "fine_tuning.job.event".
          enum:
            - fine_tuning.job.event
          x-stainless-const: true
        id:
          type: string
          description: The object identifier.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the fine-tuning job was
            created.
        level:
          type: string
          description: The log level of the event.
          enum:
            - info
            - warn
            - error
        message:
          type: string
          description: The message of the event.
        type:
          type: string
          description: The type of event.
          enum:
            - message
            - metrics
        data:
          type: object
          description: The data associated with the event.
      required:
        - id
        - object
        - created_at
        - level
        - message
      x-oaiMeta:
        name: The fine-tuning job event object
        example: |
          {
            "object": "fine_tuning.job.event",
            "id": "ftevent-abc123"
            "created_at": 1677610602,
            "level": "info",
            "message": "Created fine-tuning job",
            "data": {},
            "type": "message"
          }
    FunctionObject:
      type: object
      properties:
        description:
          type: string
          description: A description of what the function does, used by the model to
            choose when and how to call the function.
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or
            contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: "#/components/schemas/FunctionParameters"
        strict:
          type: boolean
          nullable: true
          default: false
          description: Whether to enable strict schema adherence when generating the
            function call. If set to true, the model will follow the exact
            schema defined in the `parameters` field. Only a subset of JSON
            Schema is supported when `strict` is `true`. Learn more about
            Structured Outputs in the [function calling
            guide](docs/guides/function-calling).
      required:
        - name
    FunctionParameters:
      type: object
      description: >-
        The parameters the functions accepts, described as a JSON Schema object.
        See the [guide](/docs/guides/function-calling) for examples, and the
        [JSON Schema
        reference](https://json-schema.org/understanding-json-schema/) for
        documentation about the format. 


        Omitting `parameters` defines a function with an empty parameter list.
      additionalProperties: true
    FunctionToolCall:
      type: object
      title: Function tool call
      description: >
        A tool call to run a function. See the 

        [function calling guide](/docs/guides/function-calling) for more
        information.
      properties:
        id:
          type: string
          description: |
            The unique ID of the function tool call.
        type:
          type: string
          enum:
            - function_call
          description: |
            The type of the function tool call. Always `function_call`.
          x-stainless-const: true
        call_id:
          type: string
          description: |
            The unique ID of the function tool call generated by the model.
        name:
          type: string
          description: |
            The name of the function to run.
        arguments:
          type: string
          description: |
            A JSON string of the arguments to pass to the function.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - call_id
        - name
        - arguments
    FunctionToolCallOutput:
      type: object
      title: Function tool call output
      description: |
        The output of a function tool call.
      properties:
        id:
          type: string
          description: >
            The unique ID of the function tool call output. Populated when this
            item

            is returned via API.
        type:
          type: string
          enum:
            - function_call_output
          description: >
            The type of the function tool call output. Always
            `function_call_output`.
          x-stainless-const: true
        call_id:
          type: string
          description: |
            The unique ID of the function tool call generated by the model.
        output:
          type: string
          description: |
            A JSON string of the output of the function tool call.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - call_id
        - output
    FunctionToolCallOutputResource:
      allOf:
        - $ref: "#/components/schemas/FunctionToolCallOutput"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the function call tool output.
          required:
            - id
    FunctionToolCallResource:
      allOf:
        - $ref: "#/components/schemas/FunctionToolCall"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the function tool call.
          required:
            - id
    Image:
      type: object
      description: Represents the content or the URL of an image generated by the
        OpenAI API.
      properties:
        b64_json:
          type: string
          description: The base64-encoded JSON of the generated image. Default value for
            `gpt-image-1`, and only present if `response_format` is set to
            `b64_json` for `dall-e-2` and `dall-e-3`.
        url:
          type: string
          description: When using `dall-e-2` or `dall-e-3`, the URL of the generated image
            if `response_format` is set to `url` (default value). Unsupported
            for `gpt-image-1`.
        revised_prompt:
          type: string
          description: For `dall-e-3` only, the revised prompt that was used to generate
            the image.
    ImagesResponse:
      type: object
      title: Image generation response
      description: The response from the image generation endpoint.
      properties:
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the image was created.
        data:
          type: array
          description: The list of generated images.
          items:
            $ref: "#/components/schemas/Image"
        usage:
          type: object
          description: >
            For `gpt-image-1` only, the token usage information for the image
            generation.
          required:
            - total_tokens
            - input_tokens
            - output_tokens
            - input_tokens_details
          properties:
            total_tokens:
              type: integer
              description: The total number of tokens (images and text) used for the image
                generation.
            input_tokens:
              type: integer
              description: The number of tokens (images and text) in the input prompt.
            output_tokens:
              type: integer
              description: The number of image tokens in the output image.
            input_tokens_details:
              type: object
              description: The input tokens detailed information for the image generation.
              required:
                - text_tokens
                - image_tokens
              properties:
                text_tokens:
                  type: integer
                  description: The number of text tokens in the input prompt.
                image_tokens:
                  type: integer
                  description: The number of image tokens in the input prompt.
      required:
        - created
      x-oaiMeta:
        name: The image generation response
        group: images
        example: |
          {
            "created": 1713833628,
            "data": [
              {
                "b64_json": "..."
              }
            ],
            "usage": {
              "total_tokens": 100,
              "input_tokens": 50,
              "output_tokens": 50,
              "input_tokens_details": {
                "text_tokens": 10,
                "image_tokens": 40
              }
            }
          }
    Includable:
      type: string
      description: >
        Specify additional output data to include in the model response.
        Currently

        supported values are:

        - `file_search_call.results`: Include the search results of
          the file search tool call.
        - `message.input_image.image_url`: Include image urls from the input
        message.

        - `computer_call_output.output.image_url`: Include image urls from the
        computer call output.
      enum:
        - file_search_call.results
        - message.input_image.image_url
        - computer_call_output.output.image_url
    InputAudio:
      type: object
      title: Audio input
      description: |
        An audio input to the model.
      properties:
        type:
          type: string
          description: |
            The type of the input item. Always `input_audio`.
          enum:
            - input_audio
          x-stainless-const: true
        data:
          type: string
          description: |
            Base64-encoded audio data.
        format:
          type: string
          description: >
            The format of the audio data. Currently supported formats are `mp3`
            and

            `wav`.
          enum:
            - mp3
            - wav
      required:
        - type
        - data
        - format
    InputContent:
      oneOf:
        - $ref: "#/components/schemas/InputTextContent"
        - $ref: "#/components/schemas/InputImageContent"
        - $ref: "#/components/schemas/InputFileContent"
    InputItem:
      oneOf:
        - $ref: "#/components/schemas/EasyInputMessage"
        - type: object
          title: Item
          description: |
            An item representing part of the context for the response to be 
            generated by the model. Can contain text, images, and audio inputs,
            as well as previous assistant responses and tool call outputs.
          $ref: "#/components/schemas/Item"
        - $ref: "#/components/schemas/ItemReferenceParam"
      discriminator:
        propertyName: type
    InputMessage:
      type: object
      title: Input message
      description: >
        A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role.
      properties:
        type:
          type: string
          description: |
            The type of the message input. Always set to `message`.
          enum:
            - message
          x-stainless-const: true
        role:
          type: string
          description: >
            The role of the message input. One of `user`, `system`, or
            `developer`.
          enum:
            - user
            - system
            - developer
        status:
          type: string
          description: |
            The status of item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
        content:
          $ref: "#/components/schemas/InputMessageContentList"
      required:
        - role
        - content
    InputMessageContentList:
      type: array
      title: Input item content list
      description: >
        A list of one or many input items to the model, containing different
        content 

        types.
      items:
        $ref: "#/components/schemas/InputContent"
    InputMessageResource:
      allOf:
        - $ref: "#/components/schemas/InputMessage"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the message input.
          required:
            - id
    Invite:
      type: object
      description: Represents an individual `invite` to the organization.
      properties:
        object:
          type: string
          enum:
            - organization.invite
          description: The object type, which is always `organization.invite`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        email:
          type: string
          description: The email address of the individual to whom the invite was sent
        role:
          type: string
          enum:
            - owner
            - reader
          description: "`owner` or `reader`"
        status:
          type: string
          enum:
            - accepted
            - expired
            - pending
          description: "`accepted`,`expired`, or `pending`"
        invited_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite was sent.
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite expires.
        accepted_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite was accepted.
        projects:
          type: array
          description: The projects that were granted membership upon acceptance of the
            invite.
          items:
            type: object
            properties:
              id:
                type: string
                description: Project's public ID
              role:
                type: string
                enum:
                  - member
                  - owner
                description: Project membership role
      required:
        - object
        - id
        - email
        - role
        - status
        - invited_at
        - expires_at
      x-oaiMeta:
        name: The invite object
        example: |
          {
            "object": "organization.invite",
            "id": "invite-abc",
            "email": "user@example.com",
            "role": "owner",
            "status": "accepted",
            "invited_at": 1711471533,
            "expires_at": 1711471533,
            "accepted_at": 1711471533,
            "projects": [
              {
                "id": "project-xyz",
                "role": "member"
              }
            ]
          }
    InviteDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.invite.deleted
          description: The object type, which is always `organization.invite.deleted`
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
    InviteListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
          description: The object type, which is always `list`
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Invite"
        first_id:
          type: string
          description: The first `invite_id` in the retrieved `list`
        last_id:
          type: string
          description: The last `invite_id` in the retrieved `list`
        has_more:
          type: boolean
          description: The `has_more` property is used for pagination to indicate there
            are additional results.
      required:
        - object
        - data
    InviteRequest:
      type: object
      properties:
        email:
          type: string
          description: Send an email to this address
        role:
          type: string
          enum:
            - reader
            - owner
          description: "`owner` or `reader`"
        projects:
          type: array
          description: An array of projects to which membership is granted at the same
            time the org invite is accepted. If omitted, the user will be
            invited to the default project for compatibility with legacy
            behavior.
          items:
            type: object
            properties:
              id:
                type: string
                description: Project's public ID
              role:
                type: string
                enum:
                  - member
                  - owner
                description: Project membership role
            required:
              - id
              - role
      required:
        - email
        - role
    Item:
      type: object
      description: |
        Content item used to generate a response.
      oneOf:
        - $ref: "#/components/schemas/InputMessage"
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/ComputerCallOutputItemParam"
        - $ref: "#/components/schemas/WebSearchToolCall"
        - $ref: "#/components/schemas/FunctionToolCall"
        - $ref: "#/components/schemas/FunctionCallOutputItemParam"
        - $ref: "#/components/schemas/ReasoningItem"
      discriminator:
        propertyName: type
    ItemResource:
      description: |
        Content item used to generate a response.
      oneOf:
        - $ref: "#/components/schemas/InputMessageResource"
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/ComputerToolCallOutputResource"
        - $ref: "#/components/schemas/WebSearchToolCall"
        - $ref: "#/components/schemas/FunctionToolCallResource"
        - $ref: "#/components/schemas/FunctionToolCallOutputResource"
      discriminator:
        propertyName: type
    KeyPress:
      type: object
      title: KeyPress
      description: |
        A collection of keypresses the model would like to perform.
      properties:
        type:
          type: string
          enum:
            - keypress
          default: keypress
          description: |
            Specifies the event type. For a keypress action, this property is 
            always set to `keypress`.
          x-stainless-const: true
        keys:
          type: array
          items:
            type: string
            description: |
              One of the keys the model is requesting to be pressed.
          description: >
            The combination of keys the model is requesting to be pressed. This
            is an

            array of strings, each representing a key.
      required:
        - type
        - keys
    ListModelsResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Model"
      required:
        - object
        - data
    ListPaginatedFineTuningJobsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FineTuningJob"
        has_more:
          type: boolean
        object:
          type: string
          enum:
            - list
          x-stainless-const: true
      required:
        - object
        - data
        - has_more
    LogProbProperties:
      type: object
      description: |
        A log probability object.
      properties:
        token:
          type: string
          description: |
            The token that was used to generate the log probability.
        logprob:
          type: number
          description: |
            The log probability of the token.
        bytes:
          type: array
          items:
            type: integer
          description: |
            The bytes that were used to generate the log probability.
      required:
        - token
        - logprob
        - bytes
    MessageContentImageFileObject:
      title: Image file
      type: object
      description: References an image [File](/docs/api-reference/files) in the
        content of a message.
      properties:
        type:
          description: Always `image_file`.
          type: string
          enum:
            - image_file
          x-stainless-const: true
        image_file:
          type: object
          properties:
            file_id:
              description: The [File](/docs/api-reference/files) ID of the image in the
                message content. Set `purpose="vision"` when uploading the File
                if you need to later display the file content.
              type: string
            detail:
              type: string
              description: Specifies the detail level of the image if specified by the user.
                `low` uses fewer tokens, you can opt in to high resolution using
                `high`.
              enum:
                - auto
                - low
                - high
              default: auto
          required:
            - file_id
      required:
        - type
        - image_file
    MessageContentImageUrlObject:
      title: Image URL
      type: object
      description: References an image URL in the content of a message.
      properties:
        type:
          type: string
          enum:
            - image_url
          description: The type of the content part.
          x-stainless-const: true
        image_url:
          type: object
          properties:
            url:
              type: string
              description: "The external URL of the image, must be a supported image types:
                jpeg, jpg, png, gif, webp."
              format: uri
            detail:
              type: string
              description: Specifies the detail level of the image. `low` uses fewer tokens,
                you can opt in to high resolution using `high`. Default value is
                `auto`
              enum:
                - auto
                - low
                - high
              default: auto
          required:
            - url
      required:
        - type
        - image_url
    MessageContentRefusalObject:
      title: Refusal
      type: object
      description: The refusal content generated by the assistant.
      properties:
        type:
          description: Always `refusal`.
          type: string
          enum:
            - refusal
          x-stainless-const: true
        refusal:
          type: string
          nullable: false
      required:
        - type
        - refusal
    MessageContentTextAnnotationsFileCitationObject:
      title: File citation
      type: object
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated
        when the assistant uses the "file_search" tool to search files.
      properties:
        type:
          description: Always `file_citation`.
          type: string
          enum:
            - file_citation
          x-stainless-const: true
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_citation:
          type: object
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
          required:
            - file_id
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
        - type
        - text
        - file_citation
        - start_index
        - end_index
    MessageContentTextAnnotationsFilePathObject:
      title: File path
      type: object
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        type:
          description: Always `file_path`.
          type: string
          enum:
            - file_path
          x-stainless-const: true
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_path:
          type: object
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
          required:
            - file_id
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
        - type
        - text
        - file_path
        - start_index
        - end_index
    MessageContentTextObject:
      title: Text
      type: object
      description: The text content that is part of a message.
      properties:
        type:
          description: Always `text`.
          type: string
          enum:
            - text
          x-stainless-const: true
        text:
          type: object
          properties:
            value:
              description: The data that makes up the text.
              type: string
            annotations:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/MessageContentTextAnnotationsFileCitationObject"
                  - $ref: "#/components/schemas/MessageContentTextAnnotationsFilePathObject"
          required:
            - value
            - annotations
      required:
        - type
        - text
    MessageDeltaContentImageFileObject:
      title: Image file
      type: object
      description: References an image [File](/docs/api-reference/files) in the
        content of a message.
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          description: Always `image_file`.
          type: string
          enum:
            - image_file
          x-stainless-const: true
        image_file:
          type: object
          properties:
            file_id:
              description: The [File](/docs/api-reference/files) ID of the image in the
                message content. Set `purpose="vision"` when uploading the File
                if you need to later display the file content.
              type: string
            detail:
              type: string
              description: Specifies the detail level of the image if specified by the user.
                `low` uses fewer tokens, you can opt in to high resolution using
                `high`.
              enum:
                - auto
                - low
                - high
              default: auto
      required:
        - index
        - type
    MessageDeltaContentImageUrlObject:
      title: Image URL
      type: object
      description: References an image URL in the content of a message.
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          description: Always `image_url`.
          type: string
          enum:
            - image_url
          x-stainless-const: true
        image_url:
          type: object
          properties:
            url:
              description: "The URL of the image, must be a supported image types: jpeg, jpg,
                png, gif, webp."
              type: string
            detail:
              type: string
              description: Specifies the detail level of the image. `low` uses fewer tokens,
                you can opt in to high resolution using `high`.
              enum:
                - auto
                - low
                - high
              default: auto
      required:
        - index
        - type
    MessageDeltaContentRefusalObject:
      title: Refusal
      type: object
      description: The refusal content that is part of a message.
      properties:
        index:
          type: integer
          description: The index of the refusal part in the message.
        type:
          description: Always `refusal`.
          type: string
          enum:
            - refusal
          x-stainless-const: true
        refusal:
          type: string
      required:
        - index
        - type
    MessageDeltaContentTextAnnotationsFileCitationObject:
      title: File citation
      type: object
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated
        when the assistant uses the "file_search" tool to search files.
      properties:
        index:
          type: integer
          description: The index of the annotation in the text content part.
        type:
          description: Always `file_citation`.
          type: string
          enum:
            - file_citation
          x-stainless-const: true
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_citation:
          type: object
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
            quote:
              description: The specific quote in the file.
              type: string
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
        - index
        - type
    MessageDeltaContentTextAnnotationsFilePathObject:
      title: File path
      type: object
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        index:
          type: integer
          description: The index of the annotation in the text content part.
        type:
          description: Always `file_path`.
          type: string
          enum:
            - file_path
          x-stainless-const: true
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_path:
          type: object
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
        - index
        - type
    MessageDeltaContentTextObject:
      title: Text
      type: object
      description: The text content that is part of a message.
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          description: Always `text`.
          type: string
          enum:
            - text
          x-stainless-const: true
        text:
          type: object
          properties:
            value:
              description: The data that makes up the text.
              type: string
            annotations:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObjec\
                      t"
                  - $ref: "#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject"
      required:
        - index
        - type
    MessageDeltaObject:
      type: object
      title: Message delta object
      description: >
        Represents a message delta i.e. any changed fields on a message during
        streaming.
      properties:
        id:
          description: The identifier of the message, which can be referenced in API
            endpoints.
          type: string
        object:
          description: The object type, which is always `thread.message.delta`.
          type: string
          enum:
            - thread.message.delta
          x-stainless-const: true
        delta:
          description: The delta containing the fields that have changed on the Message.
          type: object
          properties:
            role:
              description: The entity that produced the message. One of `user` or `assistant`.
              type: string
              enum:
                - user
                - assistant
            content:
              description: The content of the message in array of text and/or images.
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/MessageDeltaContentImageFileObject"
                  - $ref: "#/components/schemas/MessageDeltaContentTextObject"
                  - $ref: "#/components/schemas/MessageDeltaContentRefusalObject"
                  - $ref: "#/components/schemas/MessageDeltaContentImageUrlObject"
      required:
        - id
        - object
        - delta
      x-oaiMeta:
        name: The message delta object
        beta: true
        example: |
          {
            "id": "msg_123",
            "object": "thread.message.delta",
            "delta": {
              "content": [
                {
                  "index": 0,
                  "type": "text",
                  "text": { "value": "Hello", "annotations": [] }
                }
              ]
            }
          }
    MessageRequestContentTextObject:
      title: Text
      type: object
      description: The text content that is part of a message.
      properties:
        type:
          description: Always `text`.
          type: string
          enum:
            - text
          x-stainless-const: true
        text:
          type: string
          description: Text content to be sent to the model
      required:
        - type
        - text
    Metadata:
      type: object
      description: >
        Set of 16 key-value pairs that can be attached to an object. This can be

        useful for storing additional information about the object in a
        structured

        format, and querying for objects via API or the dashboard. 


        Keys are strings with a maximum length of 64 characters. Values are
        strings

        with a maximum length of 512 characters.
      additionalProperties:
        type: string
      x-oaiTypeLabel: map
      nullable: true
    Model:
      title: Model
      description: Describes an OpenAI model offering that can be used with the API.
      properties:
        id:
          type: string
          description: The model identifier, which can be referenced in the API endpoints.
        created:
          type: integer
          description: The Unix timestamp (in seconds) when the model was created.
        object:
          type: string
          description: The object type, which is always "model".
          enum:
            - model
          x-stainless-const: true
        owned_by:
          type: string
          description: The organization that owns the model.
      required:
        - id
        - object
        - created
        - owned_by
      x-oaiMeta:
        name: The model object
        example: |
          {
            "id": "VAR_chat_model_id",
            "object": "model",
            "created": 1686935002,
            "owned_by": "openai"
          }
    ModelIds:
      anyOf:
        - $ref: "#/components/schemas/ModelIdsShared"
        - $ref: "#/components/schemas/ModelIdsResponses"
    ModelIdsResponses:
      example: gpt-4o
      anyOf:
        - $ref: "#/components/schemas/ModelIdsShared"
        - type: string
          title: ResponsesOnlyModel
          enum:
            - o1-pro
            - o1-pro-2025-03-19
            - computer-use-preview
            - computer-use-preview-2025-03-11
    ModelIdsShared:
      example: gpt-4o
      anyOf:
        - type: string
        - type: string
          enum:
            - gpt-4.1
            - gpt-4.1-mini
            - gpt-4.1-nano
            - gpt-4.1-2025-04-14
            - gpt-4.1-mini-2025-04-14
            - gpt-4.1-nano-2025-04-14
            - o4-mini
            - o4-mini-2025-04-16
            - o3
            - o3-2025-04-16
            - o3-mini
            - o3-mini-2025-01-31
            - o1
            - o1-2024-12-17
            - o1-preview
            - o1-preview-2024-09-12
            - o1-mini
            - o1-mini-2024-09-12
            - gpt-4o
            - gpt-4o-2024-11-20
            - gpt-4o-2024-08-06
            - gpt-4o-2024-05-13
            - gpt-4o-audio-preview
            - gpt-4o-audio-preview-2024-10-01
            - gpt-4o-audio-preview-2024-12-17
            - gpt-4o-mini-audio-preview
            - gpt-4o-mini-audio-preview-2024-12-17
            - gpt-4o-search-preview
            - gpt-4o-mini-search-preview
            - gpt-4o-search-preview-2025-03-11
            - gpt-4o-mini-search-preview-2025-03-11
            - chatgpt-4o-latest
            - gpt-4o-mini
            - gpt-4o-mini-2024-07-18
            - gpt-4-turbo
            - gpt-4-turbo-2024-04-09
            - gpt-4-0125-preview
            - gpt-4-turbo-preview
            - gpt-4-1106-preview
            - gpt-4-vision-preview
            - gpt-4
            - gpt-4-0314
            - gpt-4-0613
            - gpt-4-32k
            - gpt-4-32k-0314
            - gpt-4-32k-0613
            - gpt-3.5-turbo
            - gpt-3.5-turbo-16k
            - gpt-3.5-turbo-0301
            - gpt-3.5-turbo-0613
            - gpt-3.5-turbo-1106
            - gpt-3.5-turbo-0125
            - gpt-3.5-turbo-16k-0613
    ModelResponseProperties:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/Metadata"
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: >
            What sampling temperature to use, between 0 and 2. Higher values
            like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: >
            An alternative to sampling with temperature, called nucleus
            sampling,

            where the model considers the results of the tokens with top_p
            probability

            mass. So 0.1 means only the tokens comprising the top 10%
            probability mass

            are considered.


            We generally recommend altering this or `temperature` but not both.
        user:
          type: string
          example: user-1234
          description: >
            A unique identifier representing your end-user, which can help
            OpenAI to monitor and detect abuse. [Learn
            more](/docs/guides/safety-best-practices#end-user-ids).
        service_tier:
          $ref: "#/components/schemas/ServiceTier"
    Move:
      type: object
      title: Move
      description: |
        A mouse move action.
      properties:
        type:
          type: string
          enum:
            - move
          default: move
          description: |
            Specifies the event type. For a move action, this property is 
            always set to `move`.
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate to move to.
        y:
          type: integer
          description: |
            The y-coordinate to move to.
      required:
        - type
        - x
        - y
    OpenAIFile:
      title: OpenAIFile
      description: The `File` object represents a document that has been uploaded to OpenAI.
      properties:
        id:
          type: string
          description: The file identifier, which can be referenced in the API endpoints.
        bytes:
          type: integer
          description: The size of the file, in bytes.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the file was created.
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the file will expire.
        filename:
          type: string
          description: The name of the file.
        object:
          type: string
          description: The object type, which is always `file`.
          enum:
            - file
          x-stainless-const: true
        purpose:
          type: string
          description: The intended purpose of the file. Supported values are
            `assistants`, `assistants_output`, `batch`, `batch_output`,
            `fine-tune`, `fine-tune-results` and `vision`.
          enum:
            - assistants
            - assistants_output
            - batch
            - batch_output
            - fine-tune
            - fine-tune-results
            - vision
        status:
          type: string
          deprecated: true
          description: Deprecated. The current status of the file, which can be either
            `uploaded`, `processed`, or `error`.
          enum:
            - uploaded
            - processed
            - error
        status_details:
          type: string
          deprecated: true
          description: Deprecated. For details on why a fine-tuning training file failed
            validation, see the `error` field on `fine_tuning.job`.
      required:
        - id
        - object
        - bytes
        - created_at
        - filename
        - purpose
        - status
      x-oaiMeta:
        name: The file object
        example: |
          {
            "id": "file-abc123",
            "object": "file",
            "bytes": 120000,
            "created_at": 1677610602,
            "expires_at": 1680202602,
            "filename": "salesOverview.pdf",
            "purpose": "assistants",
          }
    OtherChunkingStrategyResponseParam:
      type: object
      title: Other Chunking Strategy
      description: This is returned when the chunking strategy is unknown. Typically,
        this is because the file was indexed before the `chunking_strategy`
        concept was introduced in the API.
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `other`.
          enum:
            - other
          x-stainless-const: true
      required:
        - type
    OutputAudio:
      type: object
      title: Output audio
      description: |
        An audio output from the model.
      properties:
        type:
          type: string
          description: |
            The type of the output audio. Always `output_audio`.
          enum:
            - output_audio
          x-stainless-const: true
        data:
          type: string
          description: |
            Base64-encoded audio data from the model.
        transcript:
          type: string
          description: |
            The transcript of the audio data from the model.
      required:
        - type
        - data
        - transcript
    OutputContent:
      oneOf:
        - $ref: "#/components/schemas/OutputTextContent"
        - $ref: "#/components/schemas/RefusalContent"
    OutputItem:
      anyOf:
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/FunctionToolCall"
        - $ref: "#/components/schemas/WebSearchToolCall"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/ReasoningItem"
      discriminator:
        propertyName: type
    OutputMessage:
      type: object
      title: Output message
      description: |
        An output message from the model.
      properties:
        id:
          type: string
          description: |
            The unique ID of the output message.
        type:
          type: string
          description: |
            The type of the output message. Always `message`.
          enum:
            - message
          x-stainless-const: true
        role:
          type: string
          description: |
            The role of the output message. Always `assistant`.
          enum:
            - assistant
          x-stainless-const: true
        content:
          type: array
          description: |
            The content of the output message.
          items:
            $ref: "#/components/schemas/OutputContent"
        status:
          type: string
          description: >
            The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - id
        - type
        - role
        - content
        - status
    ParallelToolCalls:
      description: Whether to enable [parallel function
        calling](/docs/guides/function-calling#configuring-parallel-function-calling)
        during tool use.
      type: boolean
      default: true
    PredictionContent:
      type: object
      title: Static Content
      description: >
        Static predicted output content, such as the content of a text file that
        is

        being regenerated.
      required:
        - type
        - content
      properties:
        type:
          type: string
          enum:
            - content
          description: |
            The type of the predicted content you want to provide. This type is
            currently always `content`.
          x-stainless-const: true
        content:
          description: >
            The content that should be matched when generating a model response.

            If generated tokens would match this content, the entire model
            response

            can be returned much more quickly.
          oneOf:
            - type: string
              title: Text content
              description: |
                The content used for a Predicted Output. This is often the
                text of a file you are regenerating with minor changes.
            - type: array
              description: An array of content parts with a defined type. Supported options
                differ based on the [model](/docs/models) being used to generate
                the response. Can contain text inputs.
              title: Array of content parts
              items:
                $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
              minItems: 1
    Project:
      type: object
      description: Represents an individual project.
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        object:
          type: string
          enum:
            - organization.project
          description: The object type, which is always `organization.project`
          x-stainless-const: true
        name:
          type: string
          description: The name of the project. This appears in reporting.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was created.
        archived_at:
          type: integer
          nullable: true
          description: The Unix timestamp (in seconds) of when the project was archived or
            `null`.
        status:
          type: string
          enum:
            - active
            - archived
          description: "`active` or `archived`"
      required:
        - id
        - object
        - name
        - created_at
        - status
      x-oaiMeta:
        name: The project object
        example: |
          {
              "id": "proj_abc",
              "object": "organization.project",
              "name": "Project example",
              "created_at": 1711471533,
              "archived_at": null,
              "status": "active"
          }
    ProjectApiKey:
      type: object
      description: Represents an individual API key in a project.
      properties:
        object:
          type: string
          enum:
            - organization.project.api_key
          description: The object type, which is always `organization.project.api_key`
          x-stainless-const: true
        redacted_value:
          type: string
          description: The redacted value of the API key
        name:
          type: string
          description: The name of the API key
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was created
        last_used_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was last used.
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        owner:
          type: object
          properties:
            type:
              type: string
              enum:
                - user
                - service_account
              description: "`user` or `service_account`"
            user:
              $ref: "#/components/schemas/ProjectUser"
            service_account:
              $ref: "#/components/schemas/ProjectServiceAccount"
      required:
        - object
        - redacted_value
        - name
        - created_at
        - last_used_at
        - id
        - owner
      x-oaiMeta:
        name: The project API key object
        example: |
          {
              "object": "organization.project.api_key",
              "redacted_value": "sk-abc...def",
              "name": "My API Key",
              "created_at": 1711471533,
              "last_used_at": 1711471534,
              "id": "key_abc",
              "owner": {
                  "type": "user",
                  "user": {
                      "object": "organization.project.user",
                      "id": "user_abc",
                      "name": "First Last",
                      "email": "user@example.com",
                      "role": "owner",
                      "created_at": 1711471533
                  }
              }
          }
    ProjectApiKeyDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.api_key.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
    ProjectApiKeyListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectApiKey"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: The friendly name of the project, this name appears in reports.
      required:
        - name
    ProjectListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Project"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ProjectRateLimit:
      type: object
      description: Represents a project rate limit config.
      properties:
        object:
          type: string
          enum:
            - project.rate_limit
          description: The object type, which is always `project.rate_limit`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        model:
          type: string
          description: The model this rate limit applies to.
        max_requests_per_1_minute:
          type: integer
          description: The maximum requests per minute.
        max_tokens_per_1_minute:
          type: integer
          description: The maximum tokens per minute.
        max_images_per_1_minute:
          type: integer
          description: The maximum images per minute. Only present for relevant models.
        max_audio_megabytes_per_1_minute:
          type: integer
          description: The maximum audio megabytes per minute. Only present for relevant
            models.
        max_requests_per_1_day:
          type: integer
          description: The maximum requests per day. Only present for relevant models.
        batch_1_day_max_input_tokens:
          type: integer
          description: The maximum batch input tokens per day. Only present for relevant
            models.
      required:
        - object
        - id
        - model
        - max_requests_per_1_minute
        - max_tokens_per_1_minute
      x-oaiMeta:
        name: The project rate limit object
        example: |
          {
              "object": "project.rate_limit",
              "id": "rl_ada",
              "model": "ada",
              "max_requests_per_1_minute": 600,
              "max_tokens_per_1_minute": 150000,
              "max_images_per_1_minute": 10
          }
    ProjectRateLimitListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectRateLimit"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ProjectRateLimitUpdateRequest:
      type: object
      properties:
        max_requests_per_1_minute:
          type: integer
          description: The maximum requests per minute.
        max_tokens_per_1_minute:
          type: integer
          description: The maximum tokens per minute.
        max_images_per_1_minute:
          type: integer
          description: The maximum images per minute. Only relevant for certain models.
        max_audio_megabytes_per_1_minute:
          type: integer
          description: The maximum audio megabytes per minute. Only relevant for certain
            models.
        max_requests_per_1_day:
          type: integer
          description: The maximum requests per day. Only relevant for certain models.
        batch_1_day_max_input_tokens:
          type: integer
          description: The maximum batch input tokens per day. Only relevant for certain
            models.
    ProjectServiceAccount:
      type: object
      description: Represents an individual service account in a project.
      properties:
        object:
          type: string
          enum:
            - organization.project.service_account
          description: The object type, which is always
            `organization.project.service_account`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        name:
          type: string
          description: The name of the service account
        role:
          type: string
          enum:
            - owner
            - member
          description: "`owner` or `member`"
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the service account was
            created
      required:
        - object
        - id
        - name
        - role
        - created_at
      x-oaiMeta:
        name: The project service account object
        example: |
          {
              "object": "organization.project.service_account",
              "id": "svc_acct_abc",
              "name": "Service Account",
              "role": "owner",
              "created_at": 1711471533
          }
    ProjectServiceAccountApiKey:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.service_account.api_key
          description: The object type, which is always
            `organization.project.service_account.api_key`
          x-stainless-const: true
        value:
          type: string
        name:
          type: string
        created_at:
          type: integer
        id:
          type: string
      required:
        - object
        - value
        - name
        - created_at
        - id
    ProjectServiceAccountCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the service account being created.
      required:
        - name
    ProjectServiceAccountCreateResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.service_account
          x-stainless-const: true
        id:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - member
          description: Service accounts can only have one role of type `member`
          x-stainless-const: true
        created_at:
          type: integer
        api_key:
          $ref: "#/components/schemas/ProjectServiceAccountApiKey"
      required:
        - object
        - id
        - name
        - role
        - created_at
        - api_key
    ProjectServiceAccountDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.service_account.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
    ProjectServiceAccountListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectServiceAccount"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The updated name of the project, this name appears in reports.
      required:
        - name
    ProjectUser:
      type: object
      description: Represents an individual user in a project.
      properties:
        object:
          type: string
          enum:
            - organization.project.user
          description: The object type, which is always `organization.project.user`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        role:
          type: string
          enum:
            - owner
            - member
          description: "`owner` or `member`"
        added_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was added.
      required:
        - object
        - id
        - name
        - email
        - role
        - added_at
      x-oaiMeta:
        name: The project user object
        example: |
          {
              "object": "organization.project.user",
              "id": "user_abc",
              "name": "First Last",
              "email": "user@example.com",
              "role": "owner",
              "added_at": 1711471533
          }
    ProjectUserCreateRequest:
      type: object
      properties:
        user_id:
          type: string
          description: The ID of the user.
        role:
          type: string
          enum:
            - owner
            - member
          description: "`owner` or `member`"
      required:
        - user_id
        - role
    ProjectUserDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.user.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
    ProjectUserListResponse:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectUser"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ProjectUserUpdateRequest:
      type: object
      properties:
        role:
          type: string
          enum:
            - owner
            - member
          description: "`owner` or `member`"
      required:
        - role
    Reasoning:
      type: object
      description: |
        **o-series models only**

        Configuration options for 
        [reasoning models](https://platform.openai.com/docs/guides/reasoning).
      title: Reasoning
      properties:
        effort:
          $ref: "#/components/schemas/ReasoningEffort"
        summary:
          type: string
          description: >
            A summary of the reasoning performed by the model. This can be

            useful for debugging and understanding the model's reasoning
            process.

            One of `auto`, `concise`, or `detailed`.
          enum:
            - auto
            - concise
            - detailed
          nullable: true
        generate_summary:
          type: string
          deprecated: true
          description: >
            **Deprecated:** use `summary` instead.


            A summary of the reasoning performed by the model. This can be

            useful for debugging and understanding the model's reasoning
            process.

            One of `auto`, `concise`, or `detailed`.
          enum:
            - auto
            - concise
            - detailed
          nullable: true
    ReasoningEffort:
      type: string
      enum:
        - low
        - medium
        - high
      default: medium
      nullable: true
      description: |
        **o-series models only** 

        Constrains effort on reasoning for 
        [reasoning models](https://platform.openai.com/docs/guides/reasoning).
        Currently supported values are `low`, `medium`, and `high`. Reducing
        reasoning effort can result in faster responses and fewer tokens used
        on reasoning in a response.
    ReasoningItem:
      type: object
      description: >
        A description of the chain of thought used by a reasoning model while
        generating

        a response.
      title: Reasoning
      properties:
        type:
          type: string
          description: |
            The type of the object. Always `reasoning`.
          enum:
            - reasoning
          x-stainless-const: true
        id:
          type: string
          description: |
            The unique identifier of the reasoning content.
        summary:
          type: array
          description: |
            Reasoning text contents.
          items:
            type: object
            properties:
              type:
                type: string
                description: |
                  The type of the object. Always `summary_text`.
                enum:
                  - summary_text
                x-stainless-const: true
              text:
                type: string
                description: >
                  A short summary of the reasoning used by the model when
                  generating

                  the response.
            required:
              - type
              - text
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - id
        - summary
        - type
    Response:
      allOf:
        - $ref: "#/components/schemas/ModelResponseProperties"
        - $ref: "#/components/schemas/ResponseProperties"
        - type: object
          properties:
            id:
              type: string
              description: |
                Unique identifier for this Response.
            object:
              type: string
              description: |
                The object type of this resource - always set to `response`.
              enum:
                - response
              x-stainless-const: true
            status:
              type: string
              description: >
                The status of the response generation. One of `completed`,
                `failed`, 

                `in_progress`, or `incomplete`.
              enum:
                - completed
                - failed
                - in_progress
                - incomplete
            created_at:
              type: number
              description: |
                Unix timestamp (in seconds) of when this Response was created.
            error:
              $ref: "#/components/schemas/ResponseError"
            incomplete_details:
              type: object
              nullable: true
              description: |
                Details about why the response is incomplete.
              properties:
                reason:
                  type: string
                  description: The reason why the response is incomplete.
                  enum:
                    - max_output_tokens
                    - content_filter
            output:
              type: array
              description: >
                An array of content items generated by the model.


                - The length and order of items in the `output` array is
                dependent
                  on the model's response.
                - Rather than accessing the first item in the `output` array
                and 
                  assuming it's an `assistant` message with the content generated by
                  the model, you might consider using the `output_text` property where
                  supported in SDKs.
              items:
                $ref: "#/components/schemas/OutputItem"
            output_text:
              type: string
              nullable: true
              description: >
                SDK-only convenience property that contains the aggregated text
                output 

                from all `output_text` items in the `output` array, if any are
                present. 

                Supported in the Python and JavaScript SDKs.
              x-oaiSupportedSDKs:
                - python
                - javascript
            usage:
              $ref: "#/components/schemas/ResponseUsage"
            parallel_tool_calls:
              type: boolean
              description: |
                Whether to allow the model to run tool calls in parallel.
              default: true
          required:
            - id
            - object
            - created_at
            - error
            - incomplete_details
            - instructions
            - model
            - tools
            - output
            - parallel_tool_calls
            - metadata
            - tool_choice
            - temperature
            - top_p
          x-oaiMeta:
            name: The response object
            group: responses
            example: >
              {
                "id": "resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41",
                "object": "response",
                "created_at": 1741476777,
                "status": "completed",
                "error": null,
                "incomplete_details": null,
                "instructions": null,
                "max_output_tokens": null,
                "model": "gpt-4o-2024-08-06",
                "output": [
                  {
                    "type": "message",
                    "id": "msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41",
                    "status": "completed",
                    "role": "assistant",
                    "content": [
                      {
                        "type": "output_text",
                        "text": "The image depicts a scenic landscape with a wooden boardwalk or pathway leading through lush, green grass under a blue sky with some clouds. The setting suggests a peaceful natural area, possibly a park or nature reserve. There are trees and shrubs in the background.",
                        "annotations": []
                      }
                    ]
                  }
                ],
                "parallel_tool_calls": true,
                "previous_response_id": null,
                "reasoning": {
                  "effort": null,
                  "summary": null
                },
                "store": true,
                "temperature": 1.0,
                "text": {
                  "format": {
                    "type": "text"
                  }
                },
                "tool_choice": "auto",
                "tools": [],
                "top_p": 1.0,
                "truncation": "disabled",
                "usage": {
                  "input_tokens": 328,
                  "input_tokens_details": {
                    "cached_tokens": 0
                  },
                  "output_tokens": 52,
                  "output_tokens_details": {
                    "reasoning_tokens": 0
                  },
                  "total_tokens": 380
                },
                "user": null,
                "metadata": {}
              }
    ResponseAudioDeltaEvent:
      type: object
      description: Emitted when there is a partial audio response.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.delta`.
          enum:
            - response.audio.delta
          x-stainless-const: true
        delta:
          type: string
          description: |
            A chunk of Base64 encoded response audio bytes.
      required:
        - type
        - delta
      x-oaiMeta:
        name: response.audio.delta
        group: responses
        example: |
          {
            "type": "response.audio.delta",
            "response_id": "resp_123",
            "delta": "base64encoded..."
          }
    ResponseAudioDoneEvent:
      type: object
      description: Emitted when the audio response is complete.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.done`.
          enum:
            - response.audio.done
          x-stainless-const: true
      required:
        - type
        - response_id
      x-oaiMeta:
        name: response.audio.done
        group: responses
        example: |
          {
            "type": "response.audio.done",
            "response_id": "resp-123"
          }
    ResponseAudioTranscriptDeltaEvent:
      type: object
      description: Emitted when there is a partial transcript of audio.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.transcript.delta`.
          enum:
            - response.audio.transcript.delta
          x-stainless-const: true
        delta:
          type: string
          description: |
            The partial transcript of the audio response.
      required:
        - type
        - response_id
        - delta
      x-oaiMeta:
        name: response.audio.transcript.delta
        group: responses
        example: |
          {
            "type": "response.audio.transcript.delta",
            "response_id": "resp_123",
            "delta": " ... partial transcript ... "
          }
    ResponseAudioTranscriptDoneEvent:
      type: object
      description: Emitted when the full audio transcript is completed.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.transcript.done`.
          enum:
            - response.audio.transcript.done
          x-stainless-const: true
      required:
        - type
        - response_id
      x-oaiMeta:
        name: response.audio.transcript.done
        group: responses
        example: |
          {
            "type": "response.audio.transcript.done",
            "response_id": "resp_123"
          }
    ResponseCodeInterpreterCallCodeDeltaEvent:
      type: object
      description: Emitted when a partial code snippet is added by the code interpreter.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.code.delta`.
          enum:
            - response.code_interpreter_call.code.delta
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        delta:
          type: string
          description: |
            The partial code snippet added by the code interpreter.
      required:
        - type
        - response_id
        - output_index
        - delta
      x-oaiMeta:
        name: response.code_interpreter_call.code.delta
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.code.delta",
            "response_id": "resp-123",
            "output_index": 0,
            "delta": "partial code"
          }
    ResponseCodeInterpreterCallCodeDoneEvent:
      type: object
      description: Emitted when code snippet output is finalized by the code interpreter.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.code.done`.
          enum:
            - response.code_interpreter_call.code.done
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        code:
          type: string
          description: |
            The final code snippet output by the code interpreter.
      required:
        - type
        - response_id
        - output_index
        - code
      x-oaiMeta:
        name: response.code_interpreter_call.code.done
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.code.done",
            "response_id": "resp-123",
            "output_index": 3,
            "code": "console.log('done');"
          }
    ResponseCodeInterpreterCallCompletedEvent:
      type: object
      description: Emitted when the code interpreter call is completed.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.completed`.
          enum:
            - response.code_interpreter_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.completed
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.completed",
            "response_id": "resp-123",
            "output_index": 5,
            "code_interpreter_call": {}
          }
    ResponseCodeInterpreterCallInProgressEvent:
      type: object
      description: Emitted when a code interpreter call is in progress.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.in_progress`.
          enum:
            - response.code_interpreter_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.in_progress
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.in.progress",
            "response_id": "resp-123",
            "output_index": 0,
            "code_interpreter_call": {}
          }
    ResponseCodeInterpreterCallInterpretingEvent:
      type: object
      description: Emitted when the code interpreter is actively interpreting the code
        snippet.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.code_interpreter_call.interpreting`.
          enum:
            - response.code_interpreter_call.interpreting
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the code interpreter call is in
            progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      x-oaiMeta:
        name: response.code_interpreter_call.interpreting
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.interpreting",
            "response_id": "resp-123",
            "output_index": 4,
            "code_interpreter_call": {}
          }
    ResponseCompletedEvent:
      type: object
      description: Emitted when the model response is complete.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.completed`.
          enum:
            - response.completed
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
          description: |
            Properties of the completed response.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.completed
        group: responses
        example: >
          {
            "type": "response.completed",
            "response": {
              "id": "resp_123",
              "object": "response",
              "created_at": 1740855869,
              "status": "completed",
              "error": null,
              "incomplete_details": null,
              "input": [],
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-mini-2024-07-18",
              "output": [
                {
                  "id": "msg_123",
                  "type": "message",
                  "role": "assistant",
                  "content": [
                    {
                      "type": "output_text",
                      "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
                      "annotations": []
                    }
                  ]
                }
              ],
              "previous_response_id": null,
              "reasoning_effort": null,
              "store": false,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": {
                "input_tokens": 0,
                "output_tokens": 0,
                "output_tokens_details": {
                  "reasoning_tokens": 0
                },
                "total_tokens": 0
              },
              "user": null,
              "metadata": {}
            }
          }
    ResponseContentPartAddedEvent:
      type: object
      description: Emitted when a new content part is added.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.content_part.added`.
          enum:
            - response.content_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the content part was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the content part was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that was added.
        part:
          $ref: "#/components/schemas/OutputContent"
          description: |
            The content part that was added.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - part
      x-oaiMeta:
        name: response.content_part.added
        group: responses
        example: |
          {
            "type": "response.content_part.added",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "part": {
              "type": "output_text",
              "text": "",
              "annotations": []
            }
          }
    ResponseContentPartDoneEvent:
      type: object
      description: Emitted when a content part is done.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.content_part.done`.
          enum:
            - response.content_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the content part was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the content part was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that is done.
        part:
          $ref: "#/components/schemas/OutputContent"
          description: |
            The content part that is done.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - part
      x-oaiMeta:
        name: response.content_part.done
        group: responses
        example: >
          {
            "type": "response.content_part.done",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "part": {
              "type": "output_text",
              "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
              "annotations": []
            }
          }
    ResponseCreatedEvent:
      type: object
      description: |
        An event that is emitted when a response is created.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.created`.
          enum:
            - response.created
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
          description: |
            The response that was created.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.created
        group: responses
        example: |
          {
            "type": "response.created",
            "response": {
              "id": "resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c",
              "object": "response",
              "created_at": 1741487325,
              "status": "in_progress",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseError:
      type: object
      description: |
        An error object returned when the model fails to generate a Response.
      nullable: true
      properties:
        code:
          $ref: "#/components/schemas/ResponseErrorCode"
        message:
          type: string
          description: |
            A human-readable description of the error.
      required:
        - code
        - message
    ResponseErrorCode:
      type: string
      description: |
        The error code for the response.
      enum:
        - server_error
        - rate_limit_exceeded
        - invalid_prompt
        - vector_store_timeout
        - invalid_image
        - invalid_image_format
        - invalid_base64_image
        - invalid_image_url
        - image_too_large
        - image_too_small
        - image_parse_error
        - image_content_policy_violation
        - invalid_image_mode
        - image_file_too_large
        - unsupported_image_media_type
        - empty_image_file
        - failed_to_download_image
        - image_file_not_found
    ResponseErrorEvent:
      type: object
      description: Emitted when an error occurs.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `error`.
          enum:
            - error
          x-stainless-const: true
        code:
          type: string
          description: |
            The error code.
          nullable: true
        message:
          type: string
          description: |
            The error message.
        param:
          type: string
          description: |
            The error parameter.
          nullable: true
      required:
        - type
        - code
        - message
        - param
      x-oaiMeta:
        name: error
        group: responses
        example: |
          {
            "type": "error",
            "code": "ERR_SOMETHING",
            "message": "Something went wrong",
            "param": null
          }
    ResponseFailedEvent:
      type: object
      description: |
        An event that is emitted when a response fails.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.failed`.
          enum:
            - response.failed
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
          description: |
            The response that failed.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.failed
        group: responses
        example: |
          {
            "type": "response.failed",
            "response": {
              "id": "resp_123",
              "object": "response",
              "created_at": 1740855869,
              "status": "failed",
              "error": {
                "code": "server_error",
                "message": "The model failed to generate a response."
              },
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-mini-2024-07-18",
              "output": [],
              "previous_response_id": null,
              "reasoning_effort": null,
              "store": false,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseFileSearchCallCompletedEvent:
      type: object
      description: Emitted when a file search call is completed (results found).
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.file_search_call.completed`.
          enum:
            - response.file_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is initiated.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.file_search_call.completed
        group: responses
        example: |
          {
            "type": "response.file_search_call.completed",
            "output_index": 0,
            "item_id": "fs_123",
          }
    ResponseFileSearchCallInProgressEvent:
      type: object
      description: Emitted when a file search call is initiated.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.file_search_call.in_progress`.
          enum:
            - response.file_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is initiated.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.file_search_call.in_progress
        group: responses
        example: |
          {
            "type": "response.file_search_call.in_progress",
            "output_index": 0,
            "item_id": "fs_123",
          }
    ResponseFileSearchCallSearchingEvent:
      type: object
      description: Emitted when a file search is currently searching.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.file_search_call.searching`.
          enum:
            - response.file_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is searching.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.file_search_call.searching
        group: responses
        example: |
          {
            "type": "response.file_search_call.searching",
            "output_index": 0,
            "item_id": "fs_123",
          }
    ResponseFormatJsonObject:
      type: object
      title: JSON object
      description: >
        JSON object response format. An older method of generating JSON
        responses.

        Using `json_schema` is recommended for models that support it. Note that
        the

        model will not generate JSON without a system or user message
        instructing it

        to do so.
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_object`.
          enum:
            - json_object
          x-stainless-const: true
      required:
        - type
    ResponseFormatJsonSchema:
      type: object
      title: JSON schema
      description: |
        JSON Schema response format. Used to generate structured JSON responses.
        Learn more about [Structured Outputs](/docs/guides/structured-outputs).
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
            - json_schema
          x-stainless-const: true
        json_schema:
          type: object
          title: JSON schema
          description: |
            Structured Outputs configuration options, including a JSON Schema.
          properties:
            description:
              type: string
              description: >
                A description of what the response format is for, used by the
                model to

                determine how to respond in the format.
            name:
              type: string
              description: >
                The name of the response format. Must be a-z, A-Z, 0-9, or
                contain

                underscores and dashes, with a maximum length of 64.
            schema:
              $ref: "#/components/schemas/ResponseFormatJsonSchemaSchema"
            strict:
              type: boolean
              nullable: true
              default: false
              description: >
                Whether to enable strict schema adherence when generating the
                output.

                If set to true, the model will always follow the exact schema
                defined

                in the `schema` field. Only a subset of JSON Schema is supported
                when

                `strict` is `true`. To learn more, read the [Structured Outputs

                guide](/docs/guides/structured-outputs).
          required:
            - name
      required:
        - type
        - json_schema
    ResponseFormatJsonSchemaSchema:
      type: object
      title: JSON schema
      description: |
        The schema for the response format, described as a JSON Schema object.
        Learn how to build JSON schemas [here](https://json-schema.org/).
      additionalProperties: true
    ResponseFormatText:
      type: object
      title: Text
      description: |
        Default response format. Used to generate text responses.
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `text`.
          enum:
            - text
          x-stainless-const: true
      required:
        - type
    ResponseFunctionCallArgumentsDeltaEvent:
      type: object
      description: Emitted when there is a partial function-call arguments delta.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.function_call_arguments.delta`.
          enum:
            - response.function_call_arguments.delta
          x-stainless-const: true
        item_id:
          type: string
          description: >
            The ID of the output item that the function-call arguments delta is
            added to.
        output_index:
          type: integer
          description: >
            The index of the output item that the function-call arguments delta
            is added to.
        delta:
          type: string
          description: |
            The function-call arguments delta that is added.
      required:
        - type
        - item_id
        - output_index
        - delta
      x-oaiMeta:
        name: response.function_call_arguments.delta
        group: responses
        example: |
          {
            "type": "response.function_call_arguments.delta",
            "item_id": "item-abc",
            "output_index": 0,
            "delta": "{ \"arg\":"
          }
    ResponseFunctionCallArgumentsDoneEvent:
      type: object
      description: Emitted when function-call arguments are finalized.
      properties:
        type:
          type: string
          enum:
            - response.function_call_arguments.done
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item.
        arguments:
          type: string
          description: The function-call arguments.
      required:
        - type
        - item_id
        - output_index
        - arguments
      x-oaiMeta:
        name: response.function_call_arguments.done
        group: responses
        example: |
          {
            "type": "response.function_call_arguments.done",
            "item_id": "item-abc",
            "output_index": 1,
            "arguments": "{ \"arg\": 123 }"
          }
    ResponseInProgressEvent:
      type: object
      description: Emitted when the response is in progress.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.in_progress`.
          enum:
            - response.in_progress
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
          description: |
            The response that is in progress.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.in_progress
        group: responses
        example: |
          {
            "type": "response.in_progress",
            "response": {
              "id": "resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c",
              "object": "response",
              "created_at": 1741487325,
              "status": "in_progress",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseIncompleteEvent:
      type: object
      description: |
        An event that is emitted when a response finishes as incomplete.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.incomplete`.
          enum:
            - response.incomplete
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
          description: |
            The response that was incomplete.
      required:
        - type
        - response
      x-oaiMeta:
        name: response.incomplete
        group: responses
        example: |
          {
            "type": "response.incomplete",
            "response": {
              "id": "resp_123",
              "object": "response",
              "created_at": 1740855869,
              "status": "incomplete",
              "error": null, 
              "incomplete_details": {
                "reason": "max_tokens"
              },
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-mini-2024-07-18",
              "output": [],
              "previous_response_id": null,
              "reasoning_effort": null,
              "store": false,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseItemList:
      type: object
      description: A list of Response items.
      properties:
        object:
          type: string
          description: The type of object returned, must be `list`.
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          description: A list of items used to generate this response.
          items:
            $ref: "#/components/schemas/ItemResource"
        has_more:
          type: boolean
          description: Whether there are more items available.
        first_id:
          type: string
          description: The ID of the first item in the list.
        last_id:
          type: string
          description: The ID of the last item in the list.
      required:
        - object
        - data
        - has_more
        - first_id
        - last_id
      x-oaiMeta:
        name: The input item list
        group: responses
        example: >
          {
            "object": "list",
            "data": [
              {
                "id": "msg_abc123",
                "type": "message",
                "role": "user",
                "content": [
                  {
                    "type": "input_text",
                    "text": "Tell me a three sentence bedtime story about a unicorn."
                  }
                ]
              }
            ],
            "first_id": "msg_abc123",
            "last_id": "msg_abc123",
            "has_more": false
          }
    ResponseModalities:
      type: array
      nullable: true
      description: >
        Output types that you would like the model to generate.

        Most models are capable of generating text, which is the default:


        `["text"]`


        The `gpt-4o-audio-preview` model can also be used to 

        [generate audio](/docs/guides/audio). To request that this model
        generate 

        both text and audio responses, you can use:


        `["text", "audio"]`
      items:
        type: string
        enum:
          - text
          - audio
    ResponseOutputItemAddedEvent:
      type: object
      description: Emitted when a new output item is added.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_item.added`.
          enum:
            - response.output_item.added
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that was added.
        item:
          $ref: "#/components/schemas/OutputItem"
          description: |
            The output item that was added.
      required:
        - type
        - output_index
        - item
      x-oaiMeta:
        name: response.output_item.added
        group: responses
        example: |
          {
            "type": "response.output_item.added",
            "output_index": 0,
            "item": {
              "id": "msg_123",
              "status": "in_progress",
              "type": "message",
              "role": "assistant",
              "content": []
            }
          }
    ResponseOutputItemDoneEvent:
      type: object
      description: Emitted when an output item is marked done.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_item.done`.
          enum:
            - response.output_item.done
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that was marked done.
        item:
          $ref: "#/components/schemas/OutputItem"
          description: |
            The output item that was marked done.
      required:
        - type
        - output_index
        - item
      x-oaiMeta:
        name: response.output_item.done
        group: responses
        example: >
          {
            "type": "response.output_item.done",
            "output_index": 0,
            "item": {
              "id": "msg_123",
              "status": "completed",
              "type": "message",
              "role": "assistant",
              "content": [
                {
                  "type": "output_text",
                  "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
                  "annotations": []
                }
              ]
            }
          }
    ResponseProperties:
      type: object
      properties:
        previous_response_id:
          type: string
          description: |
            The unique ID of the previous response to the model. Use this to
            create multi-turn conversations. Learn more about 
            [conversation state](/docs/guides/conversation-state).
          nullable: true
        model:
          description: >
            Model ID used to generate the response, like `gpt-4o` or `o3`.
            OpenAI

            offers a wide range of models with different capabilities,
            performance

            characteristics, and price points. Refer to the [model
            guide](/docs/models)

            to browse and compare available models.
          $ref: "#/components/schemas/ModelIdsResponses"
        reasoning:
          $ref: "#/components/schemas/Reasoning"
          nullable: true
        max_output_tokens:
          description: >
            An upper bound for the number of tokens that can be generated for a
            response, including visible output tokens and [reasoning
            tokens](/docs/guides/reasoning).
          type: integer
          nullable: true
        instructions:
          type: string
          description: >
            Inserts a system (or developer) message as the first item in the
            model's context.


            When using along with `previous_response_id`, the instructions from
            a previous

            response will not be carried over to the next response. This makes
            it simple

            to swap out system (or developer) messages in new responses.
          nullable: true
        text:
          type: object
          description: >
            Configuration options for a text response from the model. Can be
            plain

            text or structured JSON data. Learn more:

            - [Text inputs and outputs](/docs/guides/text)

            - [Structured Outputs](/docs/guides/structured-outputs)
          properties:
            format:
              $ref: "#/components/schemas/TextResponseFormatConfiguration"
        tools:
          type: array
          description: >
            An array of tools the model may call while generating a response.
            You 

            can specify which tool to use by setting the `tool_choice`
            parameter.


            The two categories of tools you can provide the model are:


            - **Built-in tools**: Tools that are provided by OpenAI that extend
            the
              model's capabilities, like [web search](/docs/guides/tools-web-search)
              or [file search](/docs/guides/tools-file-search). Learn more about
              [built-in tools](/docs/guides/tools).
            - **Function calls (custom tools)**: Functions that are defined by
            you,
              enabling the model to call your own code. Learn more about
              [function calling](/docs/guides/function-calling).
          items:
            $ref: "#/components/schemas/Tool"
        tool_choice:
          description: >
            How the model should select which tool (or tools) to use when
            generating

            a response. See the `tools` parameter to see how to specify which
            tools

            the model can call.
          oneOf:
            - $ref: "#/components/schemas/ToolChoiceOptions"
            - $ref: "#/components/schemas/ToolChoiceTypes"
            - $ref: "#/components/schemas/ToolChoiceFunction"
        truncation:
          type: string
          description: >
            The truncation strategy to use for the model response.

            - `auto`: If the context of this response and previous ones exceeds
              the model's context window size, the model will truncate the 
              response to fit the context window by dropping input items in the
              middle of the conversation. 
            - `disabled` (default): If a model response will exceed the context
            window 
              size for a model, the request will fail with a 400 error.
          enum:
            - auto
            - disabled
          nullable: true
          default: disabled
    ResponseReasoningSummaryPartAddedEvent:
      type: object
      description: Emitted when a new reasoning summary part is added.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.reasoning_summary_part.added`.
          enum:
            - response.reasoning_summary_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the item this summary part is associated with.
        output_index:
          type: integer
          description: |
            The index of the output item this summary part is associated with.
        summary_index:
          type: integer
          description: |
            The index of the summary part within the reasoning summary.
        part:
          type: object
          description: |
            The summary part that was added.
          properties:
            type:
              type: string
              description: The type of the summary part. Always `summary_text`.
              enum:
                - summary_text
              x-stainless-const: true
            text:
              type: string
              description: The text of the summary part.
          required:
            - type
            - text
      required:
        - type
        - item_id
        - output_index
        - summary_index
        - part
      x-oaiMeta:
        name: response.reasoning_summary_part.added
        group: responses
        example: |
          {
            "type": "response.reasoning_summary_part.added",
            "item_id": "rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476",
            "output_index": 0,
            "summary_index": 0,
            "part": {
              "type": "summary_text",
              "text": ""
            }
          }
    ResponseReasoningSummaryPartDoneEvent:
      type: object
      description: Emitted when a reasoning summary part is completed.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always `response.reasoning_summary_part.done`.
          enum:
            - response.reasoning_summary_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the item this summary part is associated with.
        output_index:
          type: integer
          description: |
            The index of the output item this summary part is associated with.
        summary_index:
          type: integer
          description: |
            The index of the summary part within the reasoning summary.
        part:
          type: object
          description: |
            The completed summary part.
          properties:
            type:
              type: string
              description: The type of the summary part. Always `summary_text`.
              enum:
                - summary_text
              x-stainless-const: true
            text:
              type: string
              description: The text of the summary part.
          required:
            - type
            - text
      required:
        - type
        - item_id
        - output_index
        - summary_index
        - part
      x-oaiMeta:
        name: response.reasoning_summary_part.done
        group: responses
        example: >
          {
            "type": "response.reasoning_summary_part.done",
            "item_id": "rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476",
            "output_index": 0,
            "summary_index": 0,
            "part": {
              "type": "summary_text",
              "text": "**Responding to a greeting**\n\nThe user just said, \"Hello!\" So, it seems I need to engage. I'll greet them back and offer help since they're looking to chat. I could say something like, \"Hello! How can I assist you today?\" That feels friendly and open. They didn't ask a specific question, so this approach will work well for starting a conversation. Let's see where it goes from there!"
            }
          }
    ResponseReasoningSummaryTextDeltaEvent:
      type: object
      description: Emitted when a delta is added to a reasoning summary text.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.reasoning_summary_text.delta`.
          enum:
            - response.reasoning_summary_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the item this summary text delta is associated with.
        output_index:
          type: integer
          description: >
            The index of the output item this summary text delta is associated
            with.
        summary_index:
          type: integer
          description: |
            The index of the summary part within the reasoning summary.
        delta:
          type: string
          description: |
            The text delta that was added to the summary.
      required:
        - type
        - item_id
        - output_index
        - summary_index
        - delta
      x-oaiMeta:
        name: response.reasoning_summary_text.delta
        group: responses
        example: |
          {
            "type": "response.reasoning_summary_text.delta",
            "item_id": "rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476",
            "output_index": 0,
            "summary_index": 0,
            "delta": "**Respond"
          }
    ResponseReasoningSummaryTextDoneEvent:
      type: object
      description: Emitted when a reasoning summary text is completed.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always `response.reasoning_summary_text.done`.
          enum:
            - response.reasoning_summary_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the item this summary text is associated with.
        output_index:
          type: integer
          description: |
            The index of the output item this summary text is associated with.
        summary_index:
          type: integer
          description: |
            The index of the summary part within the reasoning summary.
        text:
          type: string
          description: |
            The full text of the completed reasoning summary.
      required:
        - type
        - item_id
        - output_index
        - summary_index
        - text
      x-oaiMeta:
        name: response.reasoning_summary_text.done
        group: responses
        example: >
          {
            "type": "response.reasoning_summary_text.done",
            "item_id": "rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476",
            "output_index": 0,
            "summary_index": 0,
            "text": "**Responding to a greeting**\n\nThe user just said, \"Hello!\" So, it seems I need to engage. I'll greet them back and offer help since they're looking to chat. I could say something like, \"Hello! How can I assist you today?\" That feels friendly and open. They didn't ask a specific question, so this approach will work well for starting a conversation. Let's see where it goes from there!"
          }
    ResponseRefusalDeltaEvent:
      type: object
      description: Emitted when there is a partial refusal text.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.refusal.delta`.
          enum:
            - response.refusal.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the refusal text is added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the refusal text is added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the refusal text is added to.
        delta:
          type: string
          description: |
            The refusal text that is added.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - delta
      x-oaiMeta:
        name: response.refusal.delta
        group: responses
        example: |
          {
            "type": "response.refusal.delta",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "delta": "refusal text so far"
          }
    ResponseRefusalDoneEvent:
      type: object
      description: Emitted when refusal text is finalized.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.refusal.done`.
          enum:
            - response.refusal.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the refusal text is finalized.
        output_index:
          type: integer
          description: |
            The index of the output item that the refusal text is finalized.
        content_index:
          type: integer
          description: |
            The index of the content part that the refusal text is finalized.
        refusal:
          type: string
          description: |
            The refusal text that is finalized.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - refusal
      x-oaiMeta:
        name: response.refusal.done
        group: responses
        example: |
          {
            "type": "response.refusal.done",
            "item_id": "item-abc",
            "output_index": 1,
            "content_index": 2,
            "refusal": "final refusal text"
          }
    ResponseStreamEvent:
      anyOf:
        - $ref: "#/components/schemas/ResponseAudioDeltaEvent"
        - $ref: "#/components/schemas/ResponseAudioDoneEvent"
        - $ref: "#/components/schemas/ResponseAudioTranscriptDeltaEvent"
        - $ref: "#/components/schemas/ResponseAudioTranscriptDoneEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallCodeDeltaEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallCodeDoneEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallCompletedEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallInProgressEvent"
        - $ref: "#/components/schemas/ResponseCodeInterpreterCallInterpretingEvent"
        - $ref: "#/components/schemas/ResponseCompletedEvent"
        - $ref: "#/components/schemas/ResponseContentPartAddedEvent"
        - $ref: "#/components/schemas/ResponseContentPartDoneEvent"
        - $ref: "#/components/schemas/ResponseCreatedEvent"
        - $ref: "#/components/schemas/ResponseErrorEvent"
        - $ref: "#/components/schemas/ResponseFileSearchCallCompletedEvent"
        - $ref: "#/components/schemas/ResponseFileSearchCallInProgressEvent"
        - $ref: "#/components/schemas/ResponseFileSearchCallSearchingEvent"
        - $ref: "#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent"
        - $ref: "#/components/schemas/ResponseFunctionCallArgumentsDoneEvent"
        - $ref: "#/components/schemas/ResponseInProgressEvent"
        - $ref: "#/components/schemas/ResponseFailedEvent"
        - $ref: "#/components/schemas/ResponseIncompleteEvent"
        - $ref: "#/components/schemas/ResponseOutputItemAddedEvent"
        - $ref: "#/components/schemas/ResponseOutputItemDoneEvent"
        - $ref: "#/components/schemas/ResponseReasoningSummaryPartAddedEvent"
        - $ref: "#/components/schemas/ResponseReasoningSummaryPartDoneEvent"
        - $ref: "#/components/schemas/ResponseReasoningSummaryTextDeltaEvent"
        - $ref: "#/components/schemas/ResponseReasoningSummaryTextDoneEvent"
        - $ref: "#/components/schemas/ResponseRefusalDeltaEvent"
        - $ref: "#/components/schemas/ResponseRefusalDoneEvent"
        - $ref: "#/components/schemas/ResponseTextAnnotationDeltaEvent"
        - $ref: "#/components/schemas/ResponseTextDeltaEvent"
        - $ref: "#/components/schemas/ResponseTextDoneEvent"
        - $ref: "#/components/schemas/ResponseWebSearchCallCompletedEvent"
        - $ref: "#/components/schemas/ResponseWebSearchCallInProgressEvent"
        - $ref: "#/components/schemas/ResponseWebSearchCallSearchingEvent"
      discriminator:
        propertyName: type
    ResponseTextAnnotationDeltaEvent:
      type: object
      description: Emitted when a text annotation is added.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always
            `response.output_text.annotation.added`.
          enum:
            - response.output_text.annotation.added
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text annotation was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the text annotation was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the text annotation was added to.
        annotation_index:
          type: integer
          description: |
            The index of the annotation that was added.
        annotation:
          $ref: "#/components/schemas/Annotation"
      required:
        - type
        - item_id
        - output_index
        - content_index
        - annotation_index
        - annotation
      x-oaiMeta:
        name: response.output_text.annotation.added
        group: responses
        example: |
          {
            "type": "response.output_text.annotation.added",
            "item_id": "msg_abc123",
            "output_index": 1,
            "content_index": 0,
            "annotation_index": 0,
            "annotation": {
              "type": "file_citation",
              "index": 390,
              "file_id": "file-4wDz5b167pAf72nx1h9eiN",
              "filename": "dragons.pdf"
            }
          }
    ResponseTextDeltaEvent:
      type: object
      description: Emitted when there is an additional text delta.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_text.delta`.
          enum:
            - response.output_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text delta was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the text delta was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the text delta was added to.
        delta:
          type: string
          description: |
            The text delta that was added.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - delta
      x-oaiMeta:
        name: response.output_text.delta
        group: responses
        example: |
          {
            "type": "response.output_text.delta",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "delta": "In"
          }
    ResponseTextDoneEvent:
      type: object
      description: Emitted when text content is finalized.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_text.done`.
          enum:
            - response.output_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text content is finalized.
        output_index:
          type: integer
          description: |
            The index of the output item that the text content is finalized.
        content_index:
          type: integer
          description: |
            The index of the content part that the text content is finalized.
        text:
          type: string
          description: |
            The text content that is finalized.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - text
      x-oaiMeta:
        name: response.output_text.done
        group: responses
        example: >
          {
            "type": "response.output_text.done",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic."
          }
    ResponseUsage:
      type: object
      description: |
        Represents token usage details including input tokens, output tokens,
        a breakdown of output tokens, and the total tokens used.
      properties:
        input_tokens:
          type: integer
          description: The number of input tokens.
        input_tokens_details:
          type: object
          description: A detailed breakdown of the input tokens.
          properties:
            cached_tokens:
              type: integer
              description: |
                The number of tokens that were retrieved from the cache. 
                [More on prompt caching](/docs/guides/prompt-caching).
          required:
            - cached_tokens
        output_tokens:
          type: integer
          description: The number of output tokens.
        output_tokens_details:
          type: object
          description: A detailed breakdown of the output tokens.
          properties:
            reasoning_tokens:
              type: integer
              description: The number of reasoning tokens.
          required:
            - reasoning_tokens
        total_tokens:
          type: integer
          description: The total number of tokens used.
      required:
        - input_tokens
        - input_tokens_details
        - output_tokens
        - output_tokens_details
        - total_tokens
    ResponseWebSearchCallCompletedEvent:
      type: object
      description: Emitted when a web search call is completed.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.web_search_call.completed`.
          enum:
            - response.web_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the web search call is associated
            with.
        item_id:
          type: string
          description: |
            Unique ID for the output item associated with the web search call.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.web_search_call.completed
        group: responses
        example: |
          {
            "type": "response.web_search_call.completed",
            "output_index": 0,
            "item_id": "ws_123",
          }
    ResponseWebSearchCallInProgressEvent:
      type: object
      description: Emitted when a web search call is initiated.
      properties:
        type:
          type: string
          description: >
            The type of the event. Always `response.web_search_call.in_progress`.
          enum:
            - response.web_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the web search call is associated
            with.
        item_id:
          type: string
          description: |
            Unique ID for the output item associated with the web search call.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.web_search_call.in_progress
        group: responses
        example: |
          {
            "type": "response.web_search_call.in_progress",
            "output_index": 0,
            "item_id": "ws_123",
          }
    ResponseWebSearchCallSearchingEvent:
      type: object
      description: Emitted when a web search call is executing.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.web_search_call.searching`.
          enum:
            - response.web_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: >
            The index of the output item that the web search call is associated
            with.
        item_id:
          type: string
          description: |
            Unique ID for the output item associated with the web search call.
      required:
        - type
        - output_index
        - item_id
      x-oaiMeta:
        name: response.web_search_call.searching
        group: responses
        example: |
          {
            "type": "response.web_search_call.searching",
            "output_index": 0,
            "item_id": "ws_123",
          }
    RunToolCallObject:
      type: object
      description: Tool call objects
      properties:
        id:
          type: string
          description: The ID of the tool call. This ID must be referenced when you submit
            the tool outputs in using the [Submit tool outputs to
            run](/docs/api-reference/runs/submitToolOutputs) endpoint.
        type:
          type: string
          description: The type of tool call the output is required for. For now, this is
            always `function`.
          enum:
            - function
          x-stainless-const: true
        function:
          type: object
          description: The function definition.
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments that the model expects you to pass to the function.
          required:
            - name
            - arguments
      required:
        - id
        - type
        - function
    Screenshot:
      type: object
      title: Screenshot
      description: |
        A screenshot action.
      properties:
        type:
          type: string
          enum:
            - screenshot
          default: screenshot
          description: |
            Specifies the event type. For a screenshot action, this property is 
            always set to `screenshot`.
          x-stainless-const: true
      required:
        - type
    Scroll:
      type: object
      title: Scroll
      description: |
        A scroll action.
      properties:
        type:
          type: string
          enum:
            - scroll
          default: scroll
          description: |
            Specifies the event type. For a scroll action, this property is 
            always set to `scroll`.
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate where the scroll occurred.
        y:
          type: integer
          description: |
            The y-coordinate where the scroll occurred.
        scroll_x:
          type: integer
          description: |
            The horizontal scroll distance.
        scroll_y:
          type: integer
          description: |
            The vertical scroll distance.
      required:
        - type
        - x
        - y
        - scroll_x
        - scroll_y
    ServiceTier:
      type: string
      description: >
        Specifies the latency tier to use for processing the request. This
        parameter is relevant for customers subscribed to the scale tier
        service:
          - If set to 'auto', and the Project is Scale tier enabled, the system
            will utilize scale tier credits until they are exhausted.
          - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
          - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
          - If set to 'flex', the request will be processed with the Flex Processing service tier. [Learn more](/docs/guides/flex-processing).
          - When not set, the default behavior is 'auto'.

          When this parameter is set, the response body will include the `service_tier` utilized.
      enum:
        - auto
        - default
        - flex
      nullable: true
      default: auto
    StaticChunkingStrategy:
      type: object
      additionalProperties: false
      properties:
        max_chunk_size_tokens:
          type: integer
          minimum: 100
          maximum: 4096
          description: The maximum number of tokens in each chunk. The default value is
            `800`. The minimum value is `100` and the maximum value is `4096`.
        chunk_overlap_tokens:
          type: integer
          description: >
            The number of tokens that overlap between chunks. The default value
            is `400`.


            Note that the overlap must not exceed half of
            `max_chunk_size_tokens`.
      required:
        - max_chunk_size_tokens
        - chunk_overlap_tokens
    StaticChunkingStrategyRequestParam:
      type: object
      title: Static Chunking Strategy
      description: Customize your own chunking strategy by setting chunk size and
        chunk overlap.
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `static`.
          enum:
            - static
          x-stainless-const: true
        static:
          $ref: "#/components/schemas/StaticChunkingStrategy"
      required:
        - type
        - static
    StaticChunkingStrategyResponseParam:
      type: object
      title: Static Chunking Strategy
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `static`.
          enum:
            - static
          x-stainless-const: true
        static:
          $ref: "#/components/schemas/StaticChunkingStrategy"
      required:
        - type
        - static
    StopConfiguration:
      description: |
        Not supported with latest reasoning models `o3` and `o4-mini`.

        Up to 4 sequences where the API will stop generating further tokens. The
        returned text will not contain the stop sequence.
      default: null
      nullable: true
      oneOf:
        - type: string
          default: <|endoftext|>
          example: "\n"
          nullable: true
        - type: array
          minItems: 1
          maxItems: 4
          items:
            type: string
            example: '["\n"]'
    SubmitToolOutputsRunRequest:
      type: object
      additionalProperties: false
      properties:
        tool_outputs:
          description: A list of tools for which the outputs are being submitted.
          type: array
          items:
            type: object
            properties:
              tool_call_id:
                type: string
                description: The ID of the tool call in the `required_action` object within the
                  run object the output is being submitted for.
              output:
                type: string
                description: The output of the tool call to be submitted to continue the run.
        stream:
          type: boolean
          nullable: true
          description: >
            If `true`, returns a stream of events that happen during the Run as
            server-sent events, terminating when the Run enters a terminal state
            with a `data: [DONE]` message.
      required:
        - tool_outputs
    TextResponseFormatConfiguration:
      description: >
        An object specifying the format that the model must output.


        Configuring `{ "type": "json_schema" }` enables Structured Outputs, 

        which ensures the model will match your supplied JSON schema. Learn more
        in the 

        [Structured Outputs guide](/docs/guides/structured-outputs).


        The default format is `{ "type": "text" }` with no additional options.


        **Not recommended for gpt-4o and newer models:**


        Setting to `{ "type": "json_object" }` enables the older JSON mode,
        which

        ensures the message the model generates is valid JSON. Using
        `json_schema`

        is preferred for models that support it.
      oneOf:
        - $ref: "#/components/schemas/ResponseFormatText"
        - $ref: "#/components/schemas/TextResponseFormatJsonSchema"
        - $ref: "#/components/schemas/ResponseFormatJsonObject"
    TextResponseFormatJsonSchema:
      type: object
      title: JSON schema
      description: |
        JSON Schema response format. Used to generate structured JSON responses.
        Learn more about [Structured Outputs](/docs/guides/structured-outputs).
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
            - json_schema
          x-stainless-const: true
        description:
          type: string
          description: >
            A description of what the response format is for, used by the model
            to

            determine how to respond in the format.
        name:
          type: string
          description: |
            The name of the response format. Must be a-z, A-Z, 0-9, or contain
            underscores and dashes, with a maximum length of 64.
        schema:
          $ref: "#/components/schemas/ResponseFormatJsonSchemaSchema"
        strict:
          type: boolean
          nullable: true
          default: false
          description: >
            Whether to enable strict schema adherence when generating the
            output.

            If set to true, the model will always follow the exact schema
            defined

            in the `schema` field. Only a subset of JSON Schema is supported
            when

            `strict` is `true`. To learn more, read the [Structured Outputs

            guide](/docs/guides/structured-outputs).
      required:
        - type
        - schema
        - name
    ThreadObject:
      type: object
      title: Thread
      description: Represents a thread that contains
        [messages](/docs/api-reference/messages).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread`.
          type: string
          enum:
            - thread
          x-stainless-const: true
        created_at:
          description: The Unix timestamp (in seconds) for when the thread was created.
          type: integer
        tool_resources:
          type: object
          description: >
            A set of resources that are made available to the assistant's tools
            in this thread. The resources are specific to the type of tool. For
            example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: >
                    A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a
                    maximum of 20 files associated with the tool.
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: >
                    The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this thread. There can be a maximum of 1 vector
                    store attached to the thread.
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          $ref: "#/components/schemas/Metadata"
      required:
        - id
        - object
        - created_at
        - tool_resources
        - metadata
      x-oaiMeta:
        name: The thread object
        beta: true
        example: |
          {
            "id": "thread_abc123",
            "object": "thread",
            "created_at": 1698107661,
            "metadata": {}
          }
    ThreadStreamEvent:
      oneOf:
        - type: object
          properties:
            enabled:
              type: boolean
              description: Whether to enable input audio transcription.
            event:
              type: string
              enum:
                - thread.created
              x-stainless-const: true
            data:
              $ref: "#/components/schemas/ThreadObject"
          required:
            - event
            - data
          description: Occurs when a new [thread](/docs/api-reference/threads/object) is
            created.
          x-oaiMeta:
            dataDescription: "`data` is a [thread](/docs/api-reference/threads/object)"
    ToggleCertificatesRequest:
      type: object
      properties:
        certificate_ids:
          type: array
          items:
            type: string
            example: cert_abc
          minItems: 1
          maxItems: 10
      required:
        - certificate_ids
    ToolChoiceFunction:
      type: object
      title: Function tool
      description: |
        Use this option to force the model to call a specific function.
      properties:
        type:
          type: string
          enum:
            - function
          description: For function calling, the type is always `function`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
      required:
        - type
        - name
    ToolChoiceOptions:
      type: string
      title: Tool choice mode
      description: >
        Controls which (if any) tool is called by the model.


        `none` means the model will not call any tool and instead generates a
        message.


        `auto` means the model can pick between generating a message or calling
        one or

        more tools.


        `required` means the model must call one or more tools.
      enum:
        - none
        - auto
        - required
    ToolChoiceTypes:
      type: object
      title: Hosted tool
      description: >
        Indicates that the model should use a built-in tool to generate a
        response.

        [Learn more about built-in tools](/docs/guides/tools).
      properties:
        type:
          type: string
          description: |
            The type of hosted tool the model should to use. Learn more about
            [built-in tools](/docs/guides/tools).

            Allowed values are:
            - `file_search`
            - `web_search_preview`
            - `computer_use_preview`
          enum:
            - file_search
            - web_search_preview
            - computer_use_preview
            - web_search_preview_2025_03_11
      required:
        - type
    Type:
      type: object
      title: Type
      description: |
        An action to type in text.
      properties:
        type:
          type: string
          enum:
            - type
          default: type
          description: |
            Specifies the event type. For a type action, this property is 
            always set to `type`.
          x-stainless-const: true
        text:
          type: string
          description: |
            The text to type.
      required:
        - type
        - text
    Upload:
      type: object
      title: Upload
      description: |
        The Upload object can accept byte chunks in the form of Parts.
      properties:
        id:
          type: string
          description: The Upload unique identifier, which can be referenced in API
            endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Upload was created.
        filename:
          type: string
          description: The name of the file to be uploaded.
        bytes:
          type: integer
          description: The intended number of bytes to be uploaded.
        purpose:
          type: string
          description: The intended purpose of the file. [Please refer
            here](/docs/api-reference/files/object#files/object-purpose) for
            acceptable values.
        status:
          type: string
          description: The status of the Upload.
          enum:
            - pending
            - completed
            - cancelled
            - expired
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Upload will expire.
        object:
          type: string
          description: The object type, which is always "upload".
          enum:
            - upload
          x-stainless-const: true
        file:
          allOf:
            - $ref: "#/components/schemas/OpenAIFile"
            - nullable: true
              description: The ready File object after the Upload is completed.
      required:
        - bytes
        - created_at
        - expires_at
        - filename
        - id
        - purpose
        - status
      x-oaiMeta:
        name: The upload object
        example: |
          {
            "id": "upload_abc123",
            "object": "upload",
            "bytes": 2147483648,
            "created_at": 1719184911,
            "filename": "training_examples.jsonl",
            "purpose": "fine-tune",
            "status": "completed",
            "expires_at": 1719127296,
            "file": {
              "id": "file-xyz321",
              "object": "file",
              "bytes": 2147483648,
              "created_at": 1719186911,
              "filename": "training_examples.jsonl",
              "purpose": "fine-tune",
            }
          }
    UploadCertificateRequest:
      type: object
      properties:
        name:
          type: string
          description: An optional name for the certificate
        content:
          type: string
          description: The certificate content in PEM format
      required:
        - content
    UploadPart:
      type: object
      title: UploadPart
      description: >
        The upload Part represents a chunk of bytes we can add to an Upload
        object.
      properties:
        id:
          type: string
          description: The upload Part unique identifier, which can be referenced in API
            endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Part was created.
        upload_id:
          type: string
          description: The ID of the Upload object that this Part was added to.
        object:
          type: string
          description: The object type, which is always `upload.part`.
          enum:
            - upload.part
          x-stainless-const: true
      required:
        - created_at
        - id
        - object
        - upload_id
      x-oaiMeta:
        name: The upload part object
        example: |
          {
              "id": "part_def456",
              "object": "upload.part",
              "created_at": 1719186911,
              "upload_id": "upload_abc123"
          }
    UsageAudioSpeechesResult:
      type: object
      description: The aggregated audio speeches usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.usage.audio_speeches.result
          x-stainless-const: true
        characters:
          type: integer
          description: The number of characters processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of the
            grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key ID of
            the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of the
            grouped usage result.
      required:
        - object
        - characters
        - num_model_requests
      x-oaiMeta:
        name: Audio speeches usage object
        example: |
          {
              "object": "organization.usage.audio_speeches.result",
              "characters": 45,
              "num_model_requests": 1,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "tts-1"
          }
    UsageAudioTranscriptionsResult:
      type: object
      description: The aggregated audio transcriptions usage details of the specific
        time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.usage.audio_transcriptions.result
          x-stainless-const: true
        seconds:
          type: integer
          description: The number of seconds processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of the
            grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key ID of
            the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of the
            grouped usage result.
      required:
        - object
        - seconds
        - num_model_requests
      x-oaiMeta:
        name: Audio transcriptions usage object
        example: |
          {
              "object": "organization.usage.audio_transcriptions.result",
              "seconds": 10,
              "num_model_requests": 1,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "tts-1"
          }
    UsageCodeInterpreterSessionsResult:
      type: object
      description: The aggregated code interpreter sessions usage details of the
        specific time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.usage.code_interpreter_sessions.result
          x-stainless-const: true
        num_sessions:
          type: integer
          description: The number of code interpreter sessions.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped usage result.
      required:
        - object
        - sessions
      x-oaiMeta:
        name: Code interpreter sessions usage object
        example: |
          {
              "object": "organization.usage.code_interpreter_sessions.result",
              "num_sessions": 1,
              "project_id": "proj_abc"
          }
    UsageCompletionsResult:
      type: object
      description: The aggregated completions usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.usage.completions.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: The aggregated number of text input tokens used, including cached
            tokens. For customers subscribe to scale tier, this includes scale
            tier tokens.
        input_cached_tokens:
          type: integer
          description: The aggregated number of text input tokens that has been cached
            from previous requests. For customers subscribe to scale tier, this
            includes scale tier tokens.
        output_tokens:
          type: integer
          description: The aggregated number of text output tokens used. For customers
            subscribe to scale tier, this includes scale tier tokens.
        input_audio_tokens:
          type: integer
          description: The aggregated number of audio input tokens used, including cached
            tokens.
        output_audio_tokens:
          type: integer
          description: The aggregated number of audio output tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of the
            grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key ID of
            the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of the
            grouped usage result.
        batch:
          type: boolean
          nullable: true
          description: When `group_by=batch`, this field tells whether the grouped usage
            result is batch or not.
      required:
        - object
        - input_tokens
        - output_tokens
        - num_model_requests
      x-oaiMeta:
        name: Completions usage object
        example: |
          {
              "object": "organization.usage.completions.result",
              "input_tokens": 5000,
              "output_tokens": 1000,
              "input_cached_tokens": 4000,
              "input_audio_tokens": 300,
              "output_audio_tokens": 200,
              "num_model_requests": 5,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "gpt-4o-mini-2024-07-18",
              "batch": false
          }
    UsageEmbeddingsResult:
      type: object
      description: The aggregated embeddings usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.usage.embeddings.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: The aggregated number of input tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of the
            grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key ID of
            the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of the
            grouped usage result.
      required:
        - object
        - input_tokens
        - num_model_requests
      x-oaiMeta:
        name: Embeddings usage object
        example: |
          {
              "object": "organization.usage.embeddings.result",
              "input_tokens": 20,
              "num_model_requests": 2,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "text-embedding-ada-002-v2"
          }
    UsageImagesResult:
      type: object
      description: The aggregated images usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.usage.images.result
          x-stainless-const: true
        images:
          type: integer
          description: The number of images processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        source:
          type: string
          nullable: true
          description: When `group_by=source`, this field provides the source of the
            grouped usage result, possible values are `image.generation`,
            `image.edit`, `image.variation`.
        size:
          type: string
          nullable: true
          description: When `group_by=size`, this field provides the image size of the
            grouped usage result.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of the
            grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key ID of
            the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of the
            grouped usage result.
      required:
        - object
        - images
        - num_model_requests
      x-oaiMeta:
        name: Images usage object
        example: |
          {
              "object": "organization.usage.images.result",
              "images": 2,
              "num_model_requests": 2,
              "size": "1024x1024",
              "source": "image.generation",
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "dall-e-3"
          }
    UsageModerationsResult:
      type: object
      description: The aggregated moderations usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.usage.moderations.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: The aggregated number of input tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of the
            grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key ID of
            the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of the
            grouped usage result.
      required:
        - object
        - input_tokens
        - num_model_requests
      x-oaiMeta:
        name: Moderations usage object
        example: |
          {
              "object": "organization.usage.moderations.result",
              "input_tokens": 20,
              "num_model_requests": 2,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "text-moderation"
          }
    UsageResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - page
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/UsageTimeBucket"
        has_more:
          type: boolean
        next_page:
          type: string
      required:
        - object
        - data
        - has_more
        - next_page
    UsageTimeBucket:
      type: object
      properties:
        object:
          type: string
          enum:
            - bucket
          x-stainless-const: true
        start_time:
          type: integer
        end_time:
          type: integer
        result:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/UsageCompletionsResult"
              - $ref: "#/components/schemas/UsageEmbeddingsResult"
              - $ref: "#/components/schemas/UsageModerationsResult"
              - $ref: "#/components/schemas/UsageImagesResult"
              - $ref: "#/components/schemas/UsageAudioSpeechesResult"
              - $ref: "#/components/schemas/UsageAudioTranscriptionsResult"
              - $ref: "#/components/schemas/UsageVectorStoresResult"
              - $ref: "#/components/schemas/UsageCodeInterpreterSessionsResult"
              - $ref: "#/components/schemas/CostsResult"
      required:
        - object
        - start_time
        - end_time
        - result
    UsageVectorStoresResult:
      type: object
      description: The aggregated vector stores usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
            - organization.usage.vector_stores.result
          x-stainless-const: true
        usage_bytes:
          type: integer
          description: The vector stores usage in bytes.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project ID of
            the grouped usage result.
      required:
        - object
        - usage_bytes
      x-oaiMeta:
        name: Vector stores usage object
        example: |
          {
              "object": "organization.usage.vector_stores.result",
              "usage_bytes": 1024,
              "project_id": "proj_abc"
          }
    User:
      type: object
      description: Represents an individual `user` within an organization.
      properties:
        object:
          type: string
          enum:
            - organization.user
          description: The object type, which is always `organization.user`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        role:
          type: string
          enum:
            - owner
            - reader
          description: "`owner` or `reader`"
        added_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the user was added.
      required:
        - object
        - id
        - name
        - email
        - role
        - added_at
      x-oaiMeta:
        name: The user object
        example: |
          {
              "object": "organization.user",
              "id": "user_abc",
              "name": "First Last",
              "email": "user@example.com",
              "role": "owner",
              "added_at": 1711471533
          }
    UserDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.user.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
    UserListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    UserRoleUpdateRequest:
      type: object
      properties:
        role:
          type: string
          enum:
            - owner
            - reader
          description: "`owner` or `reader`"
      required:
        - role
    Wait:
      type: object
      title: Wait
      description: |
        A wait action.
      properties:
        type:
          type: string
          enum:
            - wait
          default: wait
          description: |
            Specifies the event type. For a wait action, this property is 
            always set to `wait`.
          x-stainless-const: true
      required:
        - type
    WebSearchContextSize:
      type: string
      description: >
        High level guidance for the amount of context window space to use for
        the 

        search. One of `low`, `medium`, or `high`. `medium` is the default.
      enum:
        - low
        - medium
        - high
      default: medium
    WebSearchLocation:
      type: object
      title: Web search location
      description: Approximate location parameters for the search.
      properties:
        country:
          type: string
          description: >
            The two-letter 

            [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the
            user,

            e.g. `US`.
        region:
          type: string
          description: |
            Free text input for the region of the user, e.g. `California`.
        city:
          type: string
          description: |
            Free text input for the city of the user, e.g. `San Francisco`.
        timezone:
          type: string
          description: >
            The [IANA
            timezone](https://timeapi.io/documentation/iana-timezones) 

            of the user, e.g. `America/Los_Angeles`.
    WebSearchToolCall:
      type: object
      title: Web search tool call
      description: |
        The results of a web search tool call. See the 
        [web search guide](/docs/guides/tools-web-search) for more information.
      properties:
        id:
          type: string
          description: |
            The unique ID of the web search tool call.
        type:
          type: string
          enum:
            - web_search_call
          description: |
            The type of the web search tool call. Always `web_search_call`.
          x-stainless-const: true
        status:
          type: string
          description: |
            The status of the web search tool call.
          enum:
            - in_progress
            - searching
            - completed
            - failed
      required:
        - id
        - type
        - status
    InputTextContent:
      properties:
        type:
          type: string
          enum:
            - input_text
          description: The type of the input item. Always `input_text`.
          default: input_text
          x-stainless-const: true
        text:
          type: string
          description: The text input to the model.
      type: object
      required:
        - type
        - text
      title: Input text
      description: A text input to the model.
    InputImageContent:
      properties:
        type:
          type: string
          enum:
            - input_image
          description: The type of the input item. Always `input_image`.
          default: input_image
          x-stainless-const: true
        image_url:
          anyOf:
            - type: string
              description: The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
        file_id:
          anyOf:
            - type: string
              description: The ID of the file to be sent to the model.
        detail:
          type: string
          enum:
            - low
            - high
            - auto
          description: The detail level of the image to be sent to the model. One of
            `high`, `low`, or `auto`. Defaults to `auto`.
      type: object
      required:
        - type
        - detail
      title: Input image
      description: An image input to the model. Learn about [image
        inputs](/docs/guides/vision).
    InputFileContent:
      properties:
        type:
          type: string
          enum:
            - input_file
          description: The type of the input item. Always `input_file`.
          default: input_file
          x-stainless-const: true
        file_id:
          anyOf:
            - type: string
              description: The ID of the file to be sent to the model.
        filename:
          type: string
          description: The name of the file to be sent to the model.
        file_data:
          type: string
          description: |
            The content of the file to be sent to the model.
      type: object
      required: &a1
        - type
      title: Input file
      description: A file input to the model.
    RankingOptions:
      properties:
        ranker:
          type: string
          enum:
            - auto
            - default-2024-11-15
          description: The ranker to use for the file search.
        score_threshold:
          type: number
          description: The score threshold for the file search, a number between 0 and 1.
            Numbers closer to 1 will attempt to return only the most relevant
            results, but may return fewer results.
      type: object
      required: []
    Filters:
      anyOf:
        - $ref: "#/components/schemas/ComparisonFilter"
        - $ref: "#/components/schemas/CompoundFilter"
    FileSearchTool:
      properties:
        type:
          type: string
          enum:
            - file_search
          description: The type of the file search tool. Always `file_search`.
          default: file_search
          x-stainless-const: true
        vector_store_ids:
          items:
            type: string
          type: array
          description: The IDs of the vector stores to search.
        max_num_results:
          type: integer
          description: The maximum number of results to return. This number should be
            between 1 and 50 inclusive.
        ranking_options:
          $ref: "#/components/schemas/RankingOptions"
          description: Ranking options for search.
        filters:
          anyOf:
            - $ref: "#/components/schemas/Filters"
              description: A filter to apply.
      type: object
      required:
        - type
        - vector_store_ids
      title: File search
      description: A tool that searches for relevant content from uploaded files.
        Learn more about the [file search
        tool](https://platform.openai.com/docs/guides/tools-file-search).
    FunctionTool:
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the function tool. Always `function`.
          default: function
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
        description:
          anyOf:
            - type: string
              description: A description of the function. Used by the model to determine
                whether or not to call the function.
        parameters:
          anyOf:
            - additionalProperties: {}
              type: object
              description: A JSON schema object describing the parameters of the function.
        strict:
          anyOf:
            - type: boolean
              description: Whether to enforce strict parameter validation. Default `true`.
      type: object
      required:
        - type
        - name
        - strict
        - parameters
      title: Function
      description: Defines a function in your own code the model can choose to call.
        Learn more about [function
        calling](https://platform.openai.com/docs/guides/function-calling).
    ApproximateLocation:
      properties:
        type:
          type: string
          enum:
            - approximate
          description: The type of location approximation. Always `approximate`.
          default: approximate
          x-stainless-const: true
        country:
          anyOf:
            - type: string
              description: The two-letter [ISO country
                code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
                e.g. `US`.
        region:
          anyOf:
            - type: string
              description: Free text input for the region of the user, e.g. `California`.
        city:
          anyOf:
            - type: string
              description: Free text input for the city of the user, e.g. `San Francisco`.
        timezone:
          anyOf:
            - type: string
              description: The [IANA
                timezone](https://timeapi.io/documentation/iana-timezones) of
                the user, e.g. `America/Los_Angeles`.
      type: object
    WebSearchPreviewTool:
      properties:
        type:
          type: string
          enum:
            - web_search_preview
            - web_search_preview_2025_03_11
          description: The type of the web search tool. One of `web_search_preview` or
            `web_search_preview_2025_03_11`.
          default: web_search_preview
          x-stainless-const: true
        user_location:
          anyOf:
            - $ref: "#/components/schemas/ApproximateLocation"
              description: The user's location.
        search_context_size:
          type: string
          enum:
            - low
            - medium
            - high
          description: High level guidance for the amount of context window space to use
            for the search. One of `low`, `medium`, or `high`. `medium` is the
            default.
      type: object
      required: *a1
      title: Web search preview
      description: This tool searches the web for relevant results to use in a
        response. Learn more about the [web search
        tool](https://platform.openai.com/docs/guides/tools-web-search).
    ComputerUsePreviewTool:
      properties:
        type:
          type: string
          enum:
            - computer_use_preview
          description: The type of the computer use tool. Always `computer_use_preview`.
          default: computer_use_preview
          x-stainless-const: true
        environment:
          type: string
          enum:
            - windows
            - mac
            - linux
            - ubuntu
            - browser
          description: The type of computer environment to control.
        display_width:
          type: integer
          description: The width of the computer display.
        display_height:
          type: integer
          description: The height of the computer display.
      type: object
      required:
        - type
        - environment
        - display_width
        - display_height
      title: Computer use preview
      description: A tool that controls a virtual computer. Learn more about the
        [computer
        tool](https://platform.openai.com/docs/guides/tools-computer-use).
    Tool:
      oneOf:
        - $ref: "#/components/schemas/FileSearchTool"
        - $ref: "#/components/schemas/FunctionTool"
        - $ref: "#/components/schemas/WebSearchPreviewTool"
        - $ref: "#/components/schemas/ComputerUsePreviewTool"
      discriminator:
        propertyName: type
    FileCitationBody:
      properties:
        type:
          type: string
          enum:
            - file_citation
          description: The type of the file citation. Always `file_citation`.
          default: file_citation
          x-stainless-const: true
        file_id:
          type: string
          description: The ID of the file.
        index:
          type: integer
          description: The index of the file in the list of files.
      type: object
      required:
        - type
        - file_id
        - index
      title: File citation
      description: A citation to a file.
    UrlCitationBody:
      properties:
        type:
          type: string
          enum:
            - url_citation
          description: The type of the URL citation. Always `url_citation`.
          default: url_citation
          x-stainless-const: true
        url:
          type: string
          description: The URL of the web resource.
        start_index:
          type: integer
          description: The index of the first character of the URL citation in the message.
        end_index:
          type: integer
          description: The index of the last character of the URL citation in the message.
        title:
          type: string
          description: The title of the web resource.
      type: object
      required:
        - type
        - url
        - start_index
        - end_index
        - title
      title: URL citation
      description: A citation for a web resource used to generate a model response.
    Annotation:
      oneOf:
        - $ref: "#/components/schemas/FileCitationBody"
        - $ref: "#/components/schemas/UrlCitationBody"
        - $ref: "#/components/schemas/FilePath"
      discriminator:
        propertyName: type
    OutputTextContent:
      properties:
        type:
          type: string
          enum:
            - output_text
          description: The type of the output text. Always `output_text`.
          default: output_text
          x-stainless-const: true
        text:
          type: string
          description: The text output from the model.
        annotations:
          items:
            $ref: "#/components/schemas/Annotation"
          type: array
          description: The annotations of the text output.
      type: object
      required:
        - type
        - text
        - annotations
      title: Output text
      description: A text output from the model.
    RefusalContent:
      properties:
        type:
          type: string
          enum:
            - refusal
          description: The type of the refusal. Always `refusal`.
          default: refusal
          x-stainless-const: true
        refusal:
          type: string
          description: The refusal explanationfrom the model.
      type: object
      required:
        - type
        - refusal
      title: Refusal
      description: A refusal from the model.
    ComputerCallSafetyCheckParam:
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          anyOf:
            - type: string
              description: The type of the pending safety check.
        message:
          anyOf:
            - type: string
              description: Details about the pending safety check.
      type: object
      required:
        - id
      description: A pending safety check for the computer call.
    ComputerCallOutputItemParam:
      properties:
        id:
          anyOf:
            - type: string
              description: The ID of the computer tool call output.
        call_id:
          type: string
          maxLength: 64
          minLength: 1
          description: The ID of the computer tool call that produced the output.
        type:
          type: string
          enum:
            - computer_call_output
          description: The type of the computer tool call output. Always
            `computer_call_output`.
          default: computer_call_output
          x-stainless-const: true
        output:
          $ref: "#/components/schemas/ComputerScreenshotImage"
        acknowledged_safety_checks:
          anyOf:
            - items:
                $ref: "#/components/schemas/ComputerCallSafetyCheckParam"
              type: array
              description: The safety checks reported by the API that have been acknowledged
                by the developer.
        status:
          anyOf:
            - type: string
              enum:
                - in_progress
                - completed
                - incomplete
              description: The status of the message input. One of `in_progress`, `completed`, or `incomplete`. Populated when input items are returned via API.
      type: object
      required:
        - call_id
        - type
        - output
      title: Computer tool call output
      description: The output of a computer tool call.
    FunctionCallOutputItemParam:
      properties:
        id:
          anyOf:
            - type: string
              description: The unique ID of the function tool call output. Populated when this item is returned via API.
        call_id:
          type: string
          maxLength: 64
          minLength: 1
          description: The unique ID of the function tool call generated by the model.
        type:
          type: string
          enum:
            - function_call_output
          description: The type of the function tool call output. Always
            `function_call_output`.
          default: function_call_output
          x-stainless-const: true
        output:
          type: string
          maxLength: 10485760
          description: A JSON string of the output of the function tool call.
        status:
          anyOf:
            - type: string
              enum:
                - in_progress
                - completed
                - incomplete
              description: The status of the item. One of `in_progress`, `completed`, or
                `incomplete`. Populated when items are returned via API.
      type: object
      required:
        - call_id
        - type
        - output
      title: Function tool call output
      description: The output of a function tool call.
    ItemReferenceParam:
      properties:
        type:
          anyOf:
            - type: string
              enum:
                - item_reference
              description: The type of item to reference. Always `item_reference`.
              default: item_reference
              x-stainless-const: true
        id:
          type: string
          description: The ID of the item to reference.
      type: object
      required:
        - id
      title: Item reference
      description: An internal identifier for an item to reference.
  # securitySchemes:
  #   ApiKeyAuth:
  #     type: http
  #     scheme: bearer
x-oaiMeta:
  navigationGroups:
    - id: responses
      title: Responses
    - id: chat
      title: Chat Completions
    - id: realtime
      title: Realtime
      beta: true
    - id: endpoints
      title: Platform APIs
    - id: vector_stores
      title: Vector stores
    - id: assistants
      title: Assistants
      beta: true
    - id: administration
      title: Administration
    - id: legacy
      title: Legacy
  groups:
    - id: responses
      title: Responses
      description: >
        OpenAI's most advanced interface for generating model responses.
        Supports

        text and image inputs, and text outputs. Create stateful interactions

        with the model, using the output of previous responses as input. Extend

        the model's capabilities with built-in tools for file search, web
        search,

        computer use, and more. Allow the model access to external systems and
        data

        using function calling.


        Related guides:

        - [Quickstart](/docs/quickstart?api-mode=responses)

        - [Text inputs and outputs](/docs/guides/text?api-mode=responses)

        - [Image inputs](/docs/guides/images?api-mode=responses)

        - [Structured
        Outputs](/docs/guides/structured-outputs?api-mode=responses)

        - [Function calling](/docs/guides/function-calling?api-mode=responses)

        - [Conversation
        state](/docs/guides/conversation-state?api-mode=responses)

        - [Extend the models with tools](/docs/guides/tools?api-mode=responses)
      navigationGroup: responses
      sections:
        - type: endpoint
          key: createResponse
          path: create
        - type: endpoint
          key: getResponse
          path: get
        - type: endpoint
          key: deleteResponse
          path: delete
        - type: endpoint
          key: listInputItems
          path: input-items
        - type: object
          key: Response
          path: object
        - type: object
          key: ResponseItemList
          path: list
    - id: responses-streaming
      title: Streaming
      description: >
        When you [create a Response](/docs/api-reference/responses/create) with

        `stream` set to `true`, the server will emit server-sent events to the

        client as the Response is generated. This section contains the events
        that

        are emitted by the server.


        [Learn more about streaming
        responses](/docs/guides/streaming-responses?api-mode=responses).
      navigationGroup: responses
      sections:
        - type: object
          key: ResponseCreatedEvent
          path: <auto>
        - type: object
          key: ResponseInProgressEvent
          path: <auto>
        - type: object
          key: ResponseCompletedEvent
          path: <auto>
        - type: object
          key: ResponseFailedEvent
          path: <auto>
        - type: object
          key: ResponseIncompleteEvent
          path: <auto>
        - type: object
          key: ResponseOutputItemAddedEvent
          path: <auto>
        - type: object
          key: ResponseOutputItemDoneEvent
          path: <auto>
        - type: object
          key: ResponseContentPartAddedEvent
          path: <auto>
        - type: object
          key: ResponseContentPartDoneEvent
          path: <auto>
        - type: object
          key: ResponseTextDeltaEvent
          path: <auto>
        - type: object
          key: ResponseTextAnnotationDeltaEvent
          path: <auto>
        - type: object
          key: ResponseTextDoneEvent
          path: <auto>
        - type: object
          key: ResponseRefusalDeltaEvent
          path: <auto>
        - type: object
          key: ResponseRefusalDoneEvent
          path: <auto>
        - type: object
          key: ResponseFunctionCallArgumentsDeltaEvent
          path: <auto>
        - type: object
          key: ResponseFunctionCallArgumentsDoneEvent
          path: <auto>
        - type: object
          key: ResponseFileSearchCallInProgressEvent
          path: <auto>
        - type: object
          key: ResponseFileSearchCallSearchingEvent
          path: <auto>
        - type: object
          key: ResponseFileSearchCallCompletedEvent
          path: <auto>
        - type: object
          key: ResponseWebSearchCallInProgressEvent
          path: <auto>
        - type: object
          key: ResponseWebSearchCallSearchingEvent
          path: <auto>
        - type: object
          key: ResponseWebSearchCallCompletedEvent
          path: <auto>
        - type: object
          key: ResponseReasoningSummaryPartAddedEvent
          path: <auto>
        - type: object
          key: ResponseReasoningSummaryPartDoneEvent
          path: <auto>
        - type: object
          key: ResponseReasoningSummaryTextDeltaEvent
          path: <auto>
        - type: object
          key: ResponseReasoningSummaryTextDoneEvent
          path: <auto>
        - type: object
          key: ResponseErrorEvent
          path: <auto>
    - id: chat
      title: Chat Completions
      description: |
        The Chat Completions API endpoint will generate a model response from a
        list of messages comprising a conversation.

        Related guides:
        - [Quickstart](/docs/quickstart?api-mode=chat)
        - [Text inputs and outputs](/docs/guides/text?api-mode=chat)
        - [Image inputs](/docs/guides/images?api-mode=chat)
        - [Audio inputs and outputs](/docs/guides/audio?api-mode=chat)
        - [Structured Outputs](/docs/guides/structured-outputs?api-mode=chat)
        - [Function calling](/docs/guides/function-calling?api-mode=chat)
        - [Conversation state](/docs/guides/conversation-state?api-mode=chat)

        **Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses)
        to take advantage of the latest OpenAI platform features. Compare
        [Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).
      navigationGroup: chat
      sections:
        - type: endpoint
          key: createChatCompletion
          path: create
        - type: endpoint
          key: getChatCompletion
          path: get
        - type: endpoint
          key: getChatCompletionMessages
          path: getMessages
        - type: endpoint
          key: listChatCompletions
          path: list
        - type: endpoint
          key: updateChatCompletion
          path: update
        - type: endpoint
          key: deleteChatCompletion
          path: delete
        - type: object
          key: CreateChatCompletionResponse
          path: object
        - type: object
          key: ChatCompletionList
          path: list-object
        - type: object
          key: ChatCompletionMessageList
          path: message-list
    - id: chat-streaming
      title: Streaming
      description: |
        Stream Chat Completions in real time. Receive chunks of completions
        returned from the model using server-sent events.
        [Learn more](/docs/guides/streaming-responses?api-mode=chat).
      navigationGroup: chat
      sections:
        - type: object
          key: CreateChatCompletionStreamResponse
          path: streaming
    - id: realtime
      title: Realtime
      beta: true
      description: |
        Communicate with a GPT-4o class model in real time using WebRTC or
        WebSockets. Supports text and audio inputs and ouputs, along with audio
        transcriptions.
        [Learn more about the Realtime API](/docs/guides/realtime).
      navigationGroup: realtime
    - id: realtime-sessions
      title: Session tokens
      description: >
        REST API endpoint to generate ephemeral session tokens for use in
        client-side

        applications.
      navigationGroup: realtime
      sections:
        - type: endpoint
          key: create-realtime-session
          path: create
        - type: endpoint
          key: create-realtime-transcription-session
          path: create-transcription
        - type: object
          key: RealtimeSessionCreateResponse
          path: session_object
        - type: object
          key: RealtimeTranscriptionSessionCreateResponse
          path: transcription_session_object
    - id: realtime-client-events
      title: Client events
      description: >
        These are events that the OpenAI Realtime WebSocket server will accept
        from the client.
      navigationGroup: realtime
      sections:
        - type: object
          key: RealtimeClientEventSessionUpdate
          path: <auto>
        - type: object
          key: RealtimeClientEventInputAudioBufferAppend
          path: <auto>
        - type: object
          key: RealtimeClientEventInputAudioBufferCommit
          path: <auto>
        - type: object
          key: RealtimeClientEventInputAudioBufferClear
          path: <auto>
        - type: object
          key: RealtimeClientEventConversationItemCreate
          path: <auto>
        - type: object
          key: RealtimeClientEventConversationItemRetrieve
          path: <auto>
        - type: object
          key: RealtimeClientEventConversationItemTruncate
          path: <auto>
        - type: object
          key: RealtimeClientEventConversationItemDelete
          path: <auto>
        - type: object
          key: RealtimeClientEventResponseCreate
          path: <auto>
        - type: object
          key: RealtimeClientEventResponseCancel
          path: <auto>
        - type: object
          key: RealtimeClientEventTranscriptionSessionUpdate
          path: <auto>
        - type: object
          key: RealtimeClientEventOutputAudioBufferClear
          path: <auto>
    - id: realtime-server-events
      title: Server events
      description: >
        These are events emitted from the OpenAI Realtime WebSocket server to
        the client.
      navigationGroup: realtime
      sections:
        - type: object
          key: RealtimeServerEventError
          path: <auto>
        - type: object
          key: RealtimeServerEventSessionCreated
          path: <auto>
        - type: object
          key: RealtimeServerEventSessionUpdated
          path: <auto>
        - type: object
          key: RealtimeServerEventConversationCreated
          path: <auto>
        - type: object
          key: RealtimeServerEventConversationItemCreated
          path: <auto>
        - type: object
          key: RealtimeServerEventConversationItemRetrieved
          path: <auto>
        - type: object
          key: RealtimeServerEventConversationItemInputAudioTranscriptionCompleted
          path: <auto>
        - type: object
          key: RealtimeServerEventConversationItemInputAudioTranscriptionDelta
          path: <auto>
        - type: object
          key: RealtimeServerEventConversationItemInputAudioTranscriptionFailed
          path: <auto>
        - type: object
          key: RealtimeServerEventConversationItemTruncated
          path: <auto>
        - type: object
          key: RealtimeServerEventConversationItemDeleted
          path: <auto>
        - type: object
          key: RealtimeServerEventInputAudioBufferCommitted
          path: <auto>
        - type: object
          key: RealtimeServerEventInputAudioBufferCleared
          path: <auto>
        - type: object
          key: RealtimeServerEventInputAudioBufferSpeechStarted
          path: <auto>
        - type: object
          key: RealtimeServerEventInputAudioBufferSpeechStopped
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseCreated
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseDone
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseOutputItemAdded
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseOutputItemDone
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseContentPartAdded
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseContentPartDone
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseTextDelta
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseTextDone
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseAudioTranscriptDelta
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseAudioTranscriptDone
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseAudioDelta
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseAudioDone
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseFunctionCallArgumentsDelta
          path: <auto>
        - type: object
          key: RealtimeServerEventResponseFunctionCallArgumentsDone
          path: <auto>
        - type: object
          key: RealtimeServerEventTranscriptionSessionUpdated
          path: <auto>
        - type: object
          key: RealtimeServerEventRateLimitsUpdated
          path: <auto>
        - type: object
          key: RealtimeServerEventOutputAudioBufferStarted
          path: <auto>
        - type: object
          key: RealtimeServerEventOutputAudioBufferStopped
          path: <auto>
        - type: object
          key: RealtimeServerEventOutputAudioBufferCleared
          path: <auto>
    - id: audio
      title: Audio
      description: |
        Learn how to turn audio into text or text into audio.

        Related guide: [Speech to text](/docs/guides/speech-to-text)
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createSpeech
          path: createSpeech
        - type: endpoint
          key: createTranscription
          path: createTranscription
        - type: endpoint
          key: createTranslation
          path: createTranslation
        - type: object
          key: CreateTranscriptionResponseJson
          path: json-object
        - type: object
          key: CreateTranscriptionResponseVerboseJson
          path: verbose-json-object
        - type: object
          key: TranscriptTextDeltaEvent
          path: transcript-text-delta-event
        - type: object
          key: TranscriptTextDoneEvent
          path: transcript-text-done-event
    - id: images
      title: Images
      description: >
        Given a prompt and/or an input image, the model will generate a new
        image.

        Related guide: [Image generation](/docs/guides/images)
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createImage
          path: create
        - type: endpoint
          key: createImageEdit
          path: createEdit
        - type: endpoint
          key: createImageVariation
          path: createVariation
        - type: object
          key: ImagesResponse
          path: object
    - id: embeddings
      title: Embeddings
      description: >
        Get a vector representation of a given input that can be easily consumed
        by machine learning models and algorithms.

        Related guide: [Embeddings](/docs/guides/embeddings)
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createEmbedding
          path: create
        - type: object
          key: Embedding
          path: object
    - id: evals
      title: Evals
      description: |
        Create, manage, and run evals in the OpenAI platform.
        Related guide: [Evals](/docs/guides/evals)
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createEval
          path: create
        - type: endpoint
          key: getEval
          path: get
        - type: endpoint
          key: updateEval
          path: update
        - type: endpoint
          key: deleteEval
          path: delete
        - type: endpoint
          key: listEvals
          path: list
        - type: endpoint
          key: getEvalRuns
          path: getRuns
        - type: endpoint
          key: getEvalRun
          path: getRun
        - type: endpoint
          key: createEvalRun
          path: createRun
        - type: endpoint
          key: cancelEvalRun
          path: cancelRun
        - type: endpoint
          key: deleteEvalRun
          path: deleteRun
        - type: endpoint
          key: getEvalRunOutputItem
          path: getRunOutputItem
        - type: endpoint
          key: getEvalRunOutputItems
          path: getRunOutputItems
        - type: object
          key: Eval
          path: object
        - type: object
          key: EvalRun
          path: run-object
        - type: object
          key: EvalRunOutputItem
          path: run-output-item-object
    - id: fine-tuning
      title: Fine-tuning
      description: >
        Manage fine-tuning jobs to tailor a model to your specific training
        data.

        Related guide: [Fine-tune models](/docs/guides/fine-tuning)
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createFineTuningJob
          path: create
        - type: endpoint
          key: listPaginatedFineTuningJobs
          path: list
        - type: endpoint
          key: listFineTuningEvents
          path: list-events
        - type: endpoint
          key: listFineTuningJobCheckpoints
          path: list-checkpoints
        - type: endpoint
          key: listFineTuningCheckpointPermissions
          path: list-permissions
        - type: endpoint
          key: createFineTuningCheckpointPermission
          path: create-permission
        - type: endpoint
          key: deleteFineTuningCheckpointPermission
          path: delete-permission
        - type: endpoint
          key: retrieveFineTuningJob
          path: retrieve
        - type: endpoint
          key: cancelFineTuningJob
          path: cancel
        - type: object
          key: FineTuneChatRequestInput
          path: chat-input
        - type: object
          key: FineTunePreferenceRequestInput
          path: preference-input
        - type: object
          key: FineTuneCompletionRequestInput
          path: completions-input
        - type: object
          key: FineTuningJob
          path: object
        - type: object
          key: FineTuningJobEvent
          path: event-object
        - type: object
          key: FineTuningJobCheckpoint
          path: checkpoint-object
        - type: object
          key: FineTuningCheckpointPermission
          path: permission-object
    - id: batch
      title: Batch
      description: >
        Create large batches of API requests for asynchronous processing. The
        Batch API returns completions within 24 hours for a 50% discount.

        Related guide: [Batch](/docs/guides/batch)
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createBatch
          path: create
        - type: endpoint
          key: retrieveBatch
          path: retrieve
        - type: endpoint
          key: cancelBatch
          path: cancel
        - type: endpoint
          key: listBatches
          path: list
        - type: object
          key: Batch
          path: object
        - type: object
          key: BatchRequestInput
          path: request-input
        - type: object
          key: BatchRequestOutput
          path: request-output
    - id: files
      title: Files
      description: >
        Files are used to upload documents that can be used with features like
        [Assistants](/docs/api-reference/assistants),
        [Fine-tuning](/docs/api-reference/fine-tuning), and [Batch
        API](/docs/guides/batch).
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createFile
          path: create
        - type: endpoint
          key: listFiles
          path: list
        - type: endpoint
          key: retrieveFile
          path: retrieve
        - type: endpoint
          key: deleteFile
          path: delete
        - type: endpoint
          key: downloadFile
          path: retrieve-contents
        - type: object
          key: OpenAIFile
          path: object
    - id: uploads
      title: Uploads
      description: |
        Allows you to upload large files in multiple parts.
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createUpload
          path: create
        - type: endpoint
          key: addUploadPart
          path: add-part
        - type: endpoint
          key: completeUpload
          path: complete
        - type: endpoint
          key: cancelUpload
          path: cancel
        - type: object
          key: Upload
          path: object
        - type: object
          key: UploadPart
          path: part-object
    - id: models
      title: Models
      description: >
        List and describe the various models available in the API. You can refer
        to the [Models](/docs/models) documentation to understand what models
        are available and the differences between them.
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: listModels
          path: list
        - type: endpoint
          key: retrieveModel
          path: retrieve
        - type: endpoint
          key: deleteModel
          path: delete
        - type: object
          key: Model
          path: object
    - id: moderations
      title: Moderations
      description: >
        Given text and/or image inputs, classifies if those inputs are
        potentially harmful across several categories.

        Related guide: [Moderations](/docs/guides/moderation)
      navigationGroup: endpoints
      sections:
        - type: endpoint
          key: createModeration
          path: create
        - type: object
          key: CreateModerationResponse
          path: object
    - id: vector-stores
      title: Vector stores
      description: >
        Vector stores power semantic search for the Retrieval API and the
        `file_search` tool in the Responses and Assistants APIs.


        Related guide: [File Search](/docs/assistants/tools/file-search)
      navigationGroup: vector_stores
      sections:
        - type: endpoint
          key: createVectorStore
          path: create
        - type: endpoint
          key: listVectorStores
          path: list
        - type: endpoint
          key: getVectorStore
          path: retrieve
        - type: endpoint
          key: modifyVectorStore
          path: modify
        - type: endpoint
          key: deleteVectorStore
          path: delete
        - type: endpoint
          key: searchVectorStore
          path: search
        - type: object
          key: VectorStoreObject
          path: object
    - id: vector-stores-files
      title: Vector store files
      description: |
        Vector store files represent files inside a vector store.

        Related guide: [File Search](/docs/assistants/tools/file-search)
      navigationGroup: vector_stores
      sections:
        - type: endpoint
          key: createVectorStoreFile
          path: createFile
        - type: endpoint
          key: listVectorStoreFiles
          path: listFiles
        - type: endpoint
          key: getVectorStoreFile
          path: getFile
        - type: endpoint
          key: retrieveVectorStoreFileContent
          path: getContent
        - type: endpoint
          key: updateVectorStoreFileAttributes
          path: updateAttributes
        - type: endpoint
          key: deleteVectorStoreFile
          path: deleteFile
        - type: object
          key: VectorStoreFileObject
          path: file-object
    - id: vector-stores-file-batches
      title: Vector store file batches
      description: >
        Vector store file batches represent operations to add multiple files to
        a vector store.

        Related guide: [File Search](/docs/assistants/tools/file-search)
      navigationGroup: vector_stores
      sections:
        - type: endpoint
          key: createVectorStoreFileBatch
          path: createBatch
        - type: endpoint
          key: getVectorStoreFileBatch
          path: getBatch
        - type: endpoint
          key: cancelVectorStoreFileBatch
          path: cancelBatch
        - type: endpoint
          key: listFilesInVectorStoreBatch
          path: listBatchFiles
        - type: object
          key: VectorStoreFileBatchObject
          path: batch-object
    - id: assistants
      title: Assistants
      beta: true
      description: |
        Build assistants that can call models and use tools to perform tasks.

        [Get started with the Assistants API](/docs/assistants)
      navigationGroup: assistants
      sections:
        - type: endpoint
          key: createAssistant
          path: createAssistant
        - type: endpoint
          key: listAssistants
          path: listAssistants
        - type: endpoint
          key: getAssistant
          path: getAssistant
        - type: endpoint
          key: modifyAssistant
          path: modifyAssistant
        - type: endpoint
          key: deleteAssistant
          path: deleteAssistant
        - type: object
          key: AssistantObject
          path: object
    - id: threads
      title: Threads
      beta: true
      description: |
        Create threads that assistants can interact with.

        Related guide: [Assistants](/docs/assistants/overview)
      navigationGroup: assistants
      sections:
        - type: endpoint
          key: createThread
          path: createThread
        - type: endpoint
          key: getThread
          path: getThread
        - type: endpoint
          key: modifyThread
          path: modifyThread
        - type: endpoint
          key: deleteThread
          path: deleteThread
        - type: object
          key: ThreadObject
          path: object
    - id: messages
      title: Messages
      beta: true
      description: |
        Create messages within threads

        Related guide: [Assistants](/docs/assistants/overview)
      navigationGroup: assistants
      sections:
        - type: endpoint
          key: createMessage
          path: createMessage
        - type: endpoint
          key: listMessages
          path: listMessages
        - type: endpoint
          key: getMessage
          path: getMessage
        - type: endpoint
          key: modifyMessage
          path: modifyMessage
        - type: endpoint
          key: deleteMessage
          path: deleteMessage
    - id: runs
      title: Runs
      beta: true
      description: |
        Represents an execution run on a thread.

        Related guide: [Assistants](/docs/assistants/overview)
      navigationGroup: assistants
      sections:
        - type: endpoint
          key: createRun
          path: createRun
        - type: endpoint
          key: createThreadAndRun
          path: createThreadAndRun
        - type: endpoint
          key: listRuns
          path: listRuns
        - type: endpoint
          key: getRun
          path: getRun
        - type: endpoint
          key: modifyRun
          path: modifyRun
        - type: endpoint
          key: submitToolOuputsToRun
          path: submitToolOutputs
        - type: endpoint
          key: cancelRun
          path: cancelRun
        - type: object
          key: RunObject
          path: object
    - id: admin-api-keys
      title: Admin API Keys
      description: |
        Admin API keys enable Organization Owners to programmatically manage various aspects of their organization, including users, projects, and API keys. These keys provide administrative capabilities, such as creating, updating, and deleting users; managing projects; and overseeing API key lifecycles.

        Key Features of Admin API Keys:

        - User Management: Invite new users, update roles, and remove users from the organization.

        - Project Management: Create, update, archive projects, and manage user assignments within projects.

        - API Key Oversight: List, retrieve, and delete API keys associated with projects.

        Only Organization Owners have the authority to create and utilize Admin API keys. To manage these keys, Organization Owners can navigate to the Admin Keys section of their API Platform dashboard.

        For direct access to the Admin Keys management page, Organization Owners can use the following link:

        [https://platform.openai.com/settings/organization/admin-keys](https://platform.openai.com/settings/organization/admin-keys)

        It's crucial to handle Admin API keys with care due to their elevated permissions. Adhering to best practices, such as regular key rotation and assigning appropriate permissions, enhances security and ensures proper governance within the organization.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: admin-api-keys-list
          path: list
        - type: endpoint
          key: admin-api-keys-create
          path: create
        - type: endpoint
          key: admin-api-keys-get
          path: listget
        - type: endpoint
          key: admin-api-keys-delete
          path: delete
        - type: object
          key: AdminApiKey
          path: object
    - id: invite
      title: Invites
      description: Invite and manage invitations for an organization.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: list-invites
          path: list
        - type: endpoint
          key: inviteUser
          path: create
        - type: endpoint
          key: retrieve-invite
          path: retrieve
        - type: endpoint
          key: delete-invite
          path: delete
        - type: object
          key: Invite
          path: object
    - id: users
      title: Users
      description: |
        Manage users and their role in an organization.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: list-users
          path: list
        - type: endpoint
          key: modify-user
          path: modify
        - type: endpoint
          key: retrieve-user
          path: retrieve
        - type: endpoint
          key: delete-user
          path: delete
        - type: object
          key: User
          path: object
    - id: projects
      title: Projects
      description: >
        Manage the projects within an orgnanization includes creation, updating,
        and archiving or projects.

        The Default project cannot be archived.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: list-projects
          path: list
        - type: endpoint
          key: create-project
          path: create
        - type: endpoint
          key: retrieve-project
          path: retrieve
        - type: endpoint
          key: modify-project
          path: modify
        - type: endpoint
          key: archive-project
          path: archive
        - type: object
          key: Project
          path: object
    - id: project-users
      title: Project users
      description: >
        Manage users within a project, including adding, updating roles, and
        removing users.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: list-project-users
          path: list
        - type: endpoint
          key: create-project-user
          path: creeate
        - type: endpoint
          key: retrieve-project-user
          path: retrieve
        - type: endpoint
          key: modify-project-user
          path: modify
        - type: endpoint
          key: delete-project-user
          path: delete
        - type: object
          key: ProjectUser
          path: object
    - id: project-service-accounts
      title: Project service accounts
      description: >
        Manage service accounts within a project. A service account is a bot
        user that is not associated with a user.

        If a user leaves an organization, their keys and membership in projects
        will no longer work. Service accounts

        do not have this limitation. However, service accounts can also be
        deleted from a project.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: list-project-service-accounts
          path: list
        - type: endpoint
          key: create-project-service-account
          path: create
        - type: endpoint
          key: retrieve-project-service-account
          path: retrieve
        - type: endpoint
          key: delete-project-service-account
          path: delete
        - type: object
          key: ProjectServiceAccount
          path: object
    - id: project-api-keys
      title: Project API keys
      description: >
        Manage API keys for a given project. Supports listing and deleting keys
        for users.

        This API does not allow issuing keys for users, as users need to
        authorize themselves to generate keys.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: list-project-api-keys
          path: list
        - type: endpoint
          key: retrieve-project-api-key
          path: retrieve
        - type: endpoint
          key: delete-project-api-key
          path: delete
        - type: object
          key: ProjectApiKey
          path: object
    - id: project-rate-limits
      title: Project rate limits
      description: >
        Manage rate limits per model for projects. Rate limits may be configured
        to be equal to or lower than the organization's rate limits.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: list-project-rate-limits
          path: list
        - type: endpoint
          key: update-project-rate-limits
          path: update
        - type: object
          key: ProjectRateLimit
          path: object
    - id: audit-logs
      title: Audit logs
      description: >
        Logs of user actions and configuration changes within this organization.

        To log events, you must activate logging in the [Organization
        Settings](/settings/organization/general).

        Once activated, for security reasons, logging cannot be deactivated.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: list-audit-logs
          path: list
        - type: object
          key: AuditLog
          path: object
    - id: usage
      title: Usage
      description: >
        The **Usage API** provides detailed insights into your activity across
        the OpenAI API. It also includes a separate [Costs
        endpoint](/docs/api-reference/usage/costs), which offers visibility into
        your spend, breaking down consumption by invoice line items and project
        IDs.


        While the Usage API delivers granular usage data, it may not always
        reconcile perfectly with the Costs due to minor differences in how usage
        and spend are recorded. For financial purposes, we recommend using the
        [Costs endpoint](/docs/api-reference/usage/costs) or the [Costs
        tab](/settings/organization/usage) in the Usage Dashboard, which will
        reconcile back to your billing invoice.
      navigationGroup: administration
      sections:
        - type: endpoint
          key: usage-completions
          path: completions
        - type: object
          key: UsageCompletionsResult
          path: completions_object
        - type: endpoint
          key: usage-embeddings
          path: embeddings
        - type: object
          key: UsageEmbeddingsResult
          path: embeddings_object
        - type: endpoint
          key: usage-moderations
          path: moderations
        - type: object
          key: UsageModerationsResult
          path: moderations_object
        - type: endpoint
          key: usage-images
          path: images
        - type: object
          key: UsageImagesResult
          path: images_object
        - type: endpoint
          key: usage-audio-speeches
          path: audio_speeches
        - type: object
          key: UsageAudioSpeechesResult
          path: audio_speeches_object
        - type: endpoint
          key: usage-audio-transcriptions
          path: audio_transcriptions
        - type: object
          key: UsageAudioTranscriptionsResult
          path: audio_transcriptions_object
        - type: endpoint
          key: usage-vector-stores
          path: vector_stores
        - type: object
          key: UsageVectorStoresResult
          path: vector_stores_object
        - type: endpoint
          key: usage-code-interpreter-sessions
          path: code_interpreter_sessions
        - type: object
          key: UsageCodeInterpreterSessionsResult
          path: code_interpreter_sessions_object
        - type: endpoint
          key: usage-costs
          path: costs
        - type: object
          key: CostsResult
          path: costs_object
    - id: certificates
      beta: true
      title: Certificates
      description: |
        Manage Mutual TLS certificates across your organization and projects.

        [Learn more about Mutual TLS.](https://help.openai.com/en/articles/10876024-openai-mutual-tls-beta-program)
      navigationGroup: administration
      sections:
        - type: endpoint
          key: uploadCertificate
          path: uploadCertificate
        - type: endpoint
          key: getCertificate
          path: getCertificate
        - type: endpoint
          key: modifyCertificate
          path: modifyCertificate
        - type: endpoint
          key: deleteCertificate
          path: deleteCertificate
        - type: endpoint
          key: listOrganizationCertificates
          path: listOrganizationCertificates
        - type: endpoint
          key: listProjectCertificates
          path: listProjectCertificates
        - type: endpoint
          key: activateOrganizationCertificates
          path: activateOrganizationCertificates
        - type: endpoint
          key: deactivateOrganizationCertificates
          path: deactivateOrganizationCertificates
        - type: endpoint
          key: activateProjectCertificates
          path: activateProjectCertificates
        - type: endpoint
          key: deactivateProjectCertificates
          path: deactivateProjectCertificates
        - type: object
          key: Certificate
          path: object
    - id: completions
      title: Completions
      legacy: true
      navigationGroup: legacy
      description: >
        Given a prompt, the model will return one or more predicted completions
        along with the probabilities of alternative tokens at each position.
        Most developer should use our [Chat Completions
        API](/docs/guides/text-generation#text-generation-models) to leverage
        our best and newest models.
      sections:
        - type: endpoint
          key: createCompletion
          path: create
        - type: object
          key: CreateCompletionResponse
          path: object